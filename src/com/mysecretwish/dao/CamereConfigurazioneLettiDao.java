/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.dao;

import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;

public interface CamereConfigurazioneLettiDao
{
	/** 
	 * Inserts a new row in the camere_configurazione_letti table.
	 */
	public CamereConfigurazioneLettiPk insert(CamereConfigurazioneLetti dto) throws CamereConfigurazioneLettiDaoException;

	/** 
	 * Updates a single row in the camere_configurazione_letti table.
	 */
	public void update(CamereConfigurazioneLettiPk pk, CamereConfigurazioneLetti dto) throws CamereConfigurazioneLettiDaoException;

	/** 
	 * Deletes a single row in the camere_configurazione_letti table.
	 */
	public void delete(CamereConfigurazioneLettiPk pk) throws CamereConfigurazioneLettiDaoException;

	/** 
	 * Returns the rows from the camere_configurazione_letti table that matches the specified primary-key value.
	 */
	public CamereConfigurazioneLetti findByPrimaryKey(CamereConfigurazioneLettiPk pk) throws CamereConfigurazioneLettiDaoException;

	/** 
	 * Returns all rows from the camere_configurazione_letti table that match the criteria 'scl_id = :sclId'.
	 */
	public CamereConfigurazioneLetti findByPrimaryKey(long sclId) throws CamereConfigurazioneLettiDaoException;

	/** 
	 * Returns all rows from the camere_configurazione_letti table that match the criteria ''.
	 */
	public CamereConfigurazioneLetti[] findAll() throws CamereConfigurazioneLettiDaoException;

	/** 
	 * Returns all rows from the camere_configurazione_letti table that match the criteria 'camere_cam_id = :camereCamId'.
	 */
	public CamereConfigurazioneLetti[] findByCamere(long camereCamId) throws CamereConfigurazioneLettiDaoException;

	/** 
	 * Returns all rows from the camere_configurazione_letti table that match the criteria 'scl_id = :sclId'.
	 */
	public CamereConfigurazioneLetti[] findWhereSclIdEquals(long sclId) throws CamereConfigurazioneLettiDaoException;

	/** 
	 * Returns all rows from the camere_configurazione_letti table that match the criteria 'scl_quantita = :sclQuantita'.
	 */
	public CamereConfigurazioneLetti[] findWhereSclQuantitaEquals(int sclQuantita) throws CamereConfigurazioneLettiDaoException;

	/** 
	 * Returns all rows from the camere_configurazione_letti table that match the criteria 'camere_cam_id = :camereCamId'.
	 */
	public CamereConfigurazioneLetti[] findWhereCamereCamIdEquals(long camereCamId) throws CamereConfigurazioneLettiDaoException;

	/** 
	 * Returns all rows from the camere_configurazione_letti table that match the criteria 'scl_tipologia = :sclTipologia'.
	 */
	public CamereConfigurazioneLetti[] findWhereSclTipologiaEquals(long sclTipologia) throws CamereConfigurazioneLettiDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the camere_configurazione_letti table that match the specified arbitrary SQL statement
	 */
	public CamereConfigurazioneLetti[] findByDynamicSelect(String sql, Object[] sqlParams) throws CamereConfigurazioneLettiDaoException;

	/** 
	 * Returns all rows from the camere_configurazione_letti table that match the specified arbitrary SQL statement
	 */
	public CamereConfigurazioneLetti[] findByDynamicWhere(String sql, Object[] sqlParams) throws CamereConfigurazioneLettiDaoException;

}
