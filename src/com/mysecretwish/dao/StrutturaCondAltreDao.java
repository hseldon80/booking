/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.dao;

import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;

public interface StrutturaCondAltreDao
{
	/** 
	 * Inserts a new row in the struttura_cond_altre table.
	 */
	public StrutturaCondAltrePk insert(StrutturaCondAltre dto) throws StrutturaCondAltreDaoException;

	/** 
	 * Updates a single row in the struttura_cond_altre table.
	 */
	public void update(StrutturaCondAltrePk pk, StrutturaCondAltre dto) throws StrutturaCondAltreDaoException;

	/** 
	 * Deletes a single row in the struttura_cond_altre table.
	 */
	public void delete(StrutturaCondAltrePk pk) throws StrutturaCondAltreDaoException;

	/** 
	 * Returns the rows from the struttura_cond_altre table that matches the specified primary-key value.
	 */
	public StrutturaCondAltre findByPrimaryKey(StrutturaCondAltrePk pk) throws StrutturaCondAltreDaoException;

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the criteria 'sca_id = :scaId'.
	 */
	public StrutturaCondAltre findByPrimaryKey(long scaId) throws StrutturaCondAltreDaoException;

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the criteria ''.
	 */
	public StrutturaCondAltre[] findAll() throws StrutturaCondAltreDaoException;

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaCondAltre[] findByStruttura(long strutturaStrId) throws StrutturaCondAltreDaoException;

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the criteria 'sca_id = :scaId'.
	 */
	public StrutturaCondAltre[] findWhereScaIdEquals(long scaId) throws StrutturaCondAltreDaoException;

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the criteria 'sca_ospita_bamb = :scaOspitaBamb'.
	 */
	public StrutturaCondAltre[] findWhereScaOspitaBambEquals(String scaOspitaBamb) throws StrutturaCondAltreDaoException;

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the criteria 'sca_bamb_in_letti = :scaBambInLetti'.
	 */
	public StrutturaCondAltre[] findWhereScaBambInLettiEquals(String scaBambInLetti) throws StrutturaCondAltreDaoException;

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the criteria 'sca_letti_agg = :scaLettiAgg'.
	 */
	public StrutturaCondAltre[] findWhereScaLettiAggEquals(String scaLettiAgg) throws StrutturaCondAltreDaoException;

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the criteria 'scp_checkin_dalle = :scpCheckinDalle'.
	 */
	public StrutturaCondAltre[] findWhereScpCheckinDalleEquals(String scpCheckinDalle) throws StrutturaCondAltreDaoException;

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the criteria 'scp_checkin_alle = :scpCheckinAlle'.
	 */
	public StrutturaCondAltre[] findWhereScpCheckinAlleEquals(String scpCheckinAlle) throws StrutturaCondAltreDaoException;

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the criteria 'scp_checkout_dalle = :scpCheckoutDalle'.
	 */
	public StrutturaCondAltre[] findWhereScpCheckoutDalleEquals(String scpCheckoutDalle) throws StrutturaCondAltreDaoException;

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the criteria 'scp_checkout_alle = :scpCheckoutAlle'.
	 */
	public StrutturaCondAltre[] findWhereScpCheckoutAlleEquals(String scpCheckoutAlle) throws StrutturaCondAltreDaoException;

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the criteria 'sca_pren_no_indirizzo = :scaPrenNoIndirizzo'.
	 */
	public StrutturaCondAltre[] findWhereScaPrenNoIndirizzoEquals(String scaPrenNoIndirizzo) throws StrutturaCondAltreDaoException;

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the criteria 'sca_pren_no_tel = :scaPrenNoTel'.
	 */
	public StrutturaCondAltre[] findWhereScaPrenNoTelEquals(String scaPrenNoTel) throws StrutturaCondAltreDaoException;

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaCondAltre[] findWhereStrutturaStrIdEquals(long strutturaStrId) throws StrutturaCondAltreDaoException;

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the criteria 'scp_internet = :scpInternet'.
	 */
	public StrutturaCondAltre[] findWhereScpInternetEquals(long scpInternet) throws StrutturaCondAltreDaoException;

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the criteria 'scp_parcheggio = :scpParcheggio'.
	 */
	public StrutturaCondAltre[] findWhereScpParcheggioEquals(long scpParcheggio) throws StrutturaCondAltreDaoException;

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the criteria 'scp_animali = :scpAnimali'.
	 */
	public StrutturaCondAltre[] findWhereScpAnimaliEquals(long scpAnimali) throws StrutturaCondAltreDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the specified arbitrary SQL statement
	 */
	public StrutturaCondAltre[] findByDynamicSelect(String sql, Object[] sqlParams) throws StrutturaCondAltreDaoException;

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the specified arbitrary SQL statement
	 */
	public StrutturaCondAltre[] findByDynamicWhere(String sql, Object[] sqlParams) throws StrutturaCondAltreDaoException;

}
