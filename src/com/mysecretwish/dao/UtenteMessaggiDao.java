/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.dao;

import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;

public interface UtenteMessaggiDao
{
	/** 
	 * Inserts a new row in the utente_messaggi table.
	 */
	public UtenteMessaggiPk insert(UtenteMessaggi dto) throws UtenteMessaggiDaoException;

	/** 
	 * Updates a single row in the utente_messaggi table.
	 */
	public void update(UtenteMessaggiPk pk, UtenteMessaggi dto) throws UtenteMessaggiDaoException;

	/** 
	 * Deletes a single row in the utente_messaggi table.
	 */
	public void delete(UtenteMessaggiPk pk) throws UtenteMessaggiDaoException;

	/** 
	 * Returns the rows from the utente_messaggi table that matches the specified primary-key value.
	 */
	public UtenteMessaggi findByPrimaryKey(UtenteMessaggiPk pk) throws UtenteMessaggiDaoException;

	/** 
	 * Returns all rows from the utente_messaggi table that match the criteria 'ums_id = :umsId'.
	 */
	public UtenteMessaggi findByPrimaryKey(long umsId) throws UtenteMessaggiDaoException;

	/** 
	 * Returns all rows from the utente_messaggi table that match the criteria ''.
	 */
	public UtenteMessaggi[] findAll() throws UtenteMessaggiDaoException;

	/** 
	 * Returns all rows from the utente_messaggi table that match the criteria 'argomenti_arg_id = :argomentiArgId'.
	 */
	public UtenteMessaggi[] findByArgomenti(long argomentiArgId) throws UtenteMessaggiDaoException;

	/** 
	 * Returns all rows from the utente_messaggi table that match the criteria 'ums_id = :umsId'.
	 */
	public UtenteMessaggi[] findWhereUmsIdEquals(long umsId) throws UtenteMessaggiDaoException;

	/** 
	 * Returns all rows from the utente_messaggi table that match the criteria 'ums_titolo = :umsTitolo'.
	 */
	public UtenteMessaggi[] findWhereUmsTitoloEquals(String umsTitolo) throws UtenteMessaggiDaoException;

	/** 
	 * Returns all rows from the utente_messaggi table that match the criteria 'ums_messaggio = :umsMessaggio'.
	 */
	public UtenteMessaggi[] findWhereUmsMessaggioEquals(String umsMessaggio) throws UtenteMessaggiDaoException;

	/** 
	 * Returns all rows from the utente_messaggi table that match the criteria 'ums_destinatario = :umsDestinatario'.
	 */
	public UtenteMessaggi[] findWhereUmsDestinatarioEquals(long umsDestinatario) throws UtenteMessaggiDaoException;

	/** 
	 * Returns all rows from the utente_messaggi table that match the criteria 'ums_mittente = :umsMittente'.
	 */
	public UtenteMessaggi[] findWhereUmsMittenteEquals(long umsMittente) throws UtenteMessaggiDaoException;

	/** 
	 * Returns all rows from the utente_messaggi table that match the criteria 'argomenti_arg_id = :argomentiArgId'.
	 */
	public UtenteMessaggi[] findWhereArgomentiArgIdEquals(long argomentiArgId) throws UtenteMessaggiDaoException;

	/** 
	 * Returns all rows from the utente_messaggi table that match the criteria 'tipo_mittente = :tipoMittente'.
	 */
	public UtenteMessaggi[] findWhereTipoMittenteEquals(String tipoMittente) throws UtenteMessaggiDaoException;

	/** 
	 * Returns all rows from the utente_messaggi table that match the criteria 'ums_contrassegna = :umsContrassegna'.
	 */
	public UtenteMessaggi[] findWhereUmsContrassegnaEquals(String umsContrassegna) throws UtenteMessaggiDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the utente_messaggi table that match the specified arbitrary SQL statement
	 */
	public UtenteMessaggi[] findByDynamicSelect(String sql, Object[] sqlParams) throws UtenteMessaggiDaoException;

	/** 
	 * Returns all rows from the utente_messaggi table that match the specified arbitrary SQL statement
	 */
	public UtenteMessaggi[] findByDynamicWhere(String sql, Object[] sqlParams) throws UtenteMessaggiDaoException;

}
