/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.dao;

import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;

public interface DatiBancariDao
{
	/** 
	 * Inserts a new row in the dati_bancari table.
	 */
	public DatiBancariPk insert(DatiBancari dto) throws DatiBancariDaoException;

	/** 
	 * Updates a single row in the dati_bancari table.
	 */
	public void update(DatiBancariPk pk, DatiBancari dto) throws DatiBancariDaoException;

	/** 
	 * Deletes a single row in the dati_bancari table.
	 */
	public void delete(DatiBancariPk pk) throws DatiBancariDaoException;

	/** 
	 * Returns the rows from the dati_bancari table that matches the specified primary-key value.
	 */
	public DatiBancari findByPrimaryKey(DatiBancariPk pk) throws DatiBancariDaoException;

	/** 
	 * Returns all rows from the dati_bancari table that match the criteria 'ban_id = :banId'.
	 */
	public DatiBancari findByPrimaryKey(long banId) throws DatiBancariDaoException;

	/** 
	 * Returns all rows from the dati_bancari table that match the criteria ''.
	 */
	public DatiBancari[] findAll() throws DatiBancariDaoException;

	/** 
	 * Returns all rows from the dati_bancari table that match the criteria 'fk_comune = :fkComune'.
	 */
	public DatiBancari[] findByComuni(long fkComune) throws DatiBancariDaoException;

	/** 
	 * Returns all rows from the dati_bancari table that match the criteria 'fk_struttura = :fkStruttura'.
	 */
	public DatiBancari[] findByStruttura(long fkStruttura) throws DatiBancariDaoException;

	/** 
	 * Returns all rows from the dati_bancari table that match the criteria 'ban_id = :banId'.
	 */
	public DatiBancari[] findWhereBanIdEquals(long banId) throws DatiBancariDaoException;

	/** 
	 * Returns all rows from the dati_bancari table that match the criteria 'ban_iban = :banIban'.
	 */
	public DatiBancari[] findWhereBanIbanEquals(String banIban) throws DatiBancariDaoException;

	/** 
	 * Returns all rows from the dati_bancari table that match the criteria 'ban_nominativo = :banNominativo'.
	 */
	public DatiBancari[] findWhereBanNominativoEquals(String banNominativo) throws DatiBancariDaoException;

	/** 
	 * Returns all rows from the dati_bancari table that match the criteria 'ban_indirizzo = :banIndirizzo'.
	 */
	public DatiBancari[] findWhereBanIndirizzoEquals(String banIndirizzo) throws DatiBancariDaoException;

	/** 
	 * Returns all rows from the dati_bancari table that match the criteria 'ban_cap = :banCap'.
	 */
	public DatiBancari[] findWhereBanCapEquals(String banCap) throws DatiBancariDaoException;

	/** 
	 * Returns all rows from the dati_bancari table that match the criteria 'ban_nome_banca = :banNomeBanca'.
	 */
	public DatiBancari[] findWhereBanNomeBancaEquals(String banNomeBanca) throws DatiBancariDaoException;

	/** 
	 * Returns all rows from the dati_bancari table that match the criteria 'ban_branch_code = :banBranchCode'.
	 */
	public DatiBancari[] findWhereBanBranchCodeEquals(String banBranchCode) throws DatiBancariDaoException;

	/** 
	 * Returns all rows from the dati_bancari table that match the criteria 'ban_bic_swift = :banBicSwift'.
	 */
	public DatiBancari[] findWhereBanBicSwiftEquals(String banBicSwift) throws DatiBancariDaoException;

	/** 
	 * Returns all rows from the dati_bancari table that match the criteria 'utente_ute_id = :utenteUteId'.
	 */
	public DatiBancari[] findWhereUtenteUteIdEquals(long utenteUteId) throws DatiBancariDaoException;

	/** 
	 * Returns all rows from the dati_bancari table that match the criteria 'fk_comune = :fkComune'.
	 */
	public DatiBancari[] findWhereFkComuneEquals(long fkComune) throws DatiBancariDaoException;

	/** 
	 * Returns all rows from the dati_bancari table that match the criteria 'fk_struttura = :fkStruttura'.
	 */
	public DatiBancari[] findWhereFkStrutturaEquals(long fkStruttura) throws DatiBancariDaoException;

	/** 
	 * Returns all rows from the dati_bancari table that match the criteria 'ban_usa_attuale = :banUsaAttuale'.
	 */
	public DatiBancari[] findWhereBanUsaAttualeEquals(String banUsaAttuale) throws DatiBancariDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the dati_bancari table that match the specified arbitrary SQL statement
	 */
	public DatiBancari[] findByDynamicSelect(String sql, Object[] sqlParams) throws DatiBancariDaoException;

	/** 
	 * Returns all rows from the dati_bancari table that match the specified arbitrary SQL statement
	 */
	public DatiBancari[] findByDynamicWhere(String sql, Object[] sqlParams) throws DatiBancariDaoException;

}
