/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.dao;

import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;

public interface CamereFotoDao
{
	/** 
	 * Inserts a new row in the camere_foto table.
	 */
	public CamereFotoPk insert(CamereFoto dto) throws CamereFotoDaoException;

	/** 
	 * Updates a single row in the camere_foto table.
	 */
	public void update(CamereFotoPk pk, CamereFoto dto) throws CamereFotoDaoException;

	/** 
	 * Deletes a single row in the camere_foto table.
	 */
	public void delete(CamereFotoPk pk) throws CamereFotoDaoException;

	/** 
	 * Returns the rows from the camere_foto table that matches the specified primary-key value.
	 */
	public CamereFoto findByPrimaryKey(CamereFotoPk pk) throws CamereFotoDaoException;

	/** 
	 * Returns all rows from the camere_foto table that match the criteria 'foto_id = :fotoId'.
	 */
	public CamereFoto findByPrimaryKey(long fotoId) throws CamereFotoDaoException;

	/** 
	 * Returns all rows from the camere_foto table that match the criteria ''.
	 */
	public CamereFoto[] findAll() throws CamereFotoDaoException;

	/** 
	 * Returns all rows from the camere_foto table that match the criteria 'camere_cam_id = :camereCamId'.
	 */
	public CamereFoto[] findByCamere(long camereCamId) throws CamereFotoDaoException;

	/** 
	 * Returns all rows from the camere_foto table that match the criteria 'foto_id = :fotoId'.
	 */
	public CamereFoto[] findWhereFotoIdEquals(int fotoId) throws CamereFotoDaoException;

	/** 
	 * Returns all rows from the camere_foto table that match the criteria 'camere_cam_id = :camereCamId'.
	 */
	public CamereFoto[] findWhereCamereCamIdEquals(long camereCamId) throws CamereFotoDaoException;

	/** 
	 * Returns all rows from the camere_foto table that match the criteria 'foto_descrizione = :fotoDescrizione'.
	 */
	public CamereFoto[] findWhereFotoDescrizioneEquals(String fotoDescrizione) throws CamereFotoDaoException;

	/** 
	 * Returns all rows from the camere_foto table that match the criteria 'foto_path = :fotoPath'.
	 */
	public CamereFoto[] findWhereFotoPathEquals(String fotoPath) throws CamereFotoDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the camere_foto table that match the specified arbitrary SQL statement
	 */
	public CamereFoto[] findByDynamicSelect(String sql, Object[] sqlParams) throws CamereFotoDaoException;

	/** 
	 * Returns all rows from the camere_foto table that match the specified arbitrary SQL statement
	 */
	public CamereFoto[] findByDynamicWhere(String sql, Object[] sqlParams) throws CamereFotoDaoException;

}
