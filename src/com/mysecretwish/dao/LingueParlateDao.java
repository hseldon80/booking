/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.dao;

import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;

public interface LingueParlateDao
{
	/** 
	 * Inserts a new row in the lingue_parlate table.
	 */
	public LingueParlatePk insert(LingueParlate dto) throws LingueParlateDaoException;

	/** 
	 * Updates a single row in the lingue_parlate table.
	 */
	public void update(LingueParlatePk pk, LingueParlate dto) throws LingueParlateDaoException;

	/** 
	 * Deletes a single row in the lingue_parlate table.
	 */
	public void delete(LingueParlatePk pk) throws LingueParlateDaoException;

	/** 
	 * Returns the rows from the lingue_parlate table that matches the specified primary-key value.
	 */
	public LingueParlate findByPrimaryKey(LingueParlatePk pk) throws LingueParlateDaoException;

	/** 
	 * Returns all rows from the lingue_parlate table that match the criteria 'lin_id = :linId'.
	 */
	public LingueParlate findByPrimaryKey(long linId) throws LingueParlateDaoException;

	/** 
	 * Returns all rows from the lingue_parlate table that match the criteria ''.
	 */
	public LingueParlate[] findAll() throws LingueParlateDaoException;

	/** 
	 * Returns all rows from the lingue_parlate table that match the criteria 'lin_id = :linId'.
	 */
	public LingueParlate[] findWhereLinIdEquals(long linId) throws LingueParlateDaoException;

	/** 
	 * Returns all rows from the lingue_parlate table that match the criteria 'lin_descrizione = :linDescrizione'.
	 */
	public LingueParlate[] findWhereLinDescrizioneEquals(String linDescrizione) throws LingueParlateDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the lingue_parlate table that match the specified arbitrary SQL statement
	 */
	public LingueParlate[] findByDynamicSelect(String sql, Object[] sqlParams) throws LingueParlateDaoException;

	/** 
	 * Returns all rows from the lingue_parlate table that match the specified arbitrary SQL statement
	 */
	public LingueParlate[] findByDynamicWhere(String sql, Object[] sqlParams) throws LingueParlateDaoException;

}
