/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.dao;

import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;

public interface CamereDao
{
	/** 
	 * Inserts a new row in the camere table.
	 */
	public CamerePk insert(Camere dto) throws CamereDaoException;

	/** 
	 * Updates a single row in the camere table.
	 */
	public void update(CamerePk pk, Camere dto) throws CamereDaoException;

	/** 
	 * Deletes a single row in the camere table.
	 */
	public void delete(CamerePk pk) throws CamereDaoException;

	/** 
	 * Returns the rows from the camere table that matches the specified primary-key value.
	 */
	public Camere findByPrimaryKey(CamerePk pk) throws CamereDaoException;

	/** 
	 * Returns all rows from the camere table that match the criteria 'cam_id = :camId'.
	 */
	public Camere findByPrimaryKey(long camId) throws CamereDaoException;

	/** 
	 * Returns all rows from the camere table that match the criteria ''.
	 */
	public Camere[] findAll() throws CamereDaoException;

	/** 
	 * Returns all rows from the camere table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public Camere[] findByStruttura(long strutturaStrId) throws CamereDaoException;

	/** 
	 * Returns all rows from the camere table that match the criteria 'tipologia_camere_id = :tipologiaCamereId'.
	 */
	public Camere[] findByTipologiaCamere(long tipologiaCamereId) throws CamereDaoException;

	/** 
	 * Returns all rows from the camere table that match the criteria 'cam_id = :camId'.
	 */
	public Camere[] findWhereCamIdEquals(long camId) throws CamereDaoException;

	/** 
	 * Returns all rows from the camere table that match the criteria 'cam_nome = :camNome'.
	 */
	public Camere[] findWhereCamNomeEquals(String camNome) throws CamereDaoException;

	/** 
	 * Returns all rows from the camere table that match the criteria 'cam_capienza = :camCapienza'.
	 */
	public Camere[] findWhereCamCapienzaEquals(int camCapienza) throws CamereDaoException;

	/** 
	 * Returns all rows from the camere table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public Camere[] findWhereStrutturaStrIdEquals(long strutturaStrId) throws CamereDaoException;

	/** 
	 * Returns all rows from the camere table that match the criteria 'cam_dimensione = :camDimensione'.
	 */
	public Camere[] findWhereCamDimensioneEquals(int camDimensione) throws CamereDaoException;

	/** 
	 * Returns all rows from the camere table that match the criteria 'tipologia_camere_id = :tipologiaCamereId'.
	 */
	public Camere[] findWhereTipologiaCamereIdEquals(long tipologiaCamereId) throws CamereDaoException;

	/** 
	 * Returns all rows from the camere table that match the criteria 'cam_dimensione_um = :camDimensioneUm'.
	 */
	public Camere[] findWhereCamDimensioneUmEquals(long camDimensioneUm) throws CamereDaoException;

	/** 
	 * Returns all rows from the camere table that match the criteria 'cam_fumatori = :camFumatori'.
	 */
	public Camere[] findWhereCamFumatoriEquals(String camFumatori) throws CamereDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the camere table that match the specified arbitrary SQL statement
	 */
	public Camere[] findByDynamicSelect(String sql, Object[] sqlParams) throws CamereDaoException;

	/** 
	 * Returns all rows from the camere table that match the specified arbitrary SQL statement
	 */
	public Camere[] findByDynamicWhere(String sql, Object[] sqlParams) throws CamereDaoException;

}
