/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.dao;

import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;

public interface UtenteStruttureDao
{
	/** 
	 * Inserts a new row in the utente_strutture table.
	 */
	public UtenteStrutturePk insert(UtenteStrutture dto) throws UtenteStruttureDaoException;

	/** 
	 * Updates a single row in the utente_strutture table.
	 */
	public void update(UtenteStrutturePk pk, UtenteStrutture dto) throws UtenteStruttureDaoException;

	/** 
	 * Deletes a single row in the utente_strutture table.
	 */
	public void delete(UtenteStrutturePk pk) throws UtenteStruttureDaoException;

	/** 
	 * Returns the rows from the utente_strutture table that matches the specified primary-key value.
	 */
	public UtenteStrutture findByPrimaryKey(UtenteStrutturePk pk) throws UtenteStruttureDaoException;

	/** 
	 * Returns all rows from the utente_strutture table that match the criteria 'id = :id'.
	 */
	public UtenteStrutture findByPrimaryKey(long id) throws UtenteStruttureDaoException;

	/** 
	 * Returns all rows from the utente_strutture table that match the criteria ''.
	 */
	public UtenteStrutture[] findAll() throws UtenteStruttureDaoException;

	/** 
	 * Returns all rows from the utente_strutture table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public UtenteStrutture[] findByStruttura(long strutturaStrId) throws UtenteStruttureDaoException;

	/** 
	 * Returns all rows from the utente_strutture table that match the criteria 'utente_ute_id = :utenteUteId'.
	 */
	public UtenteStrutture[] findByUtente(long utenteUteId) throws UtenteStruttureDaoException;

	/** 
	 * Returns all rows from the utente_strutture table that match the criteria 'utente_ute_id = :utenteUteId'.
	 */
	public UtenteStrutture[] findWhereUtenteUteIdEquals(long utenteUteId) throws UtenteStruttureDaoException;

	/** 
	 * Returns all rows from the utente_strutture table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public UtenteStrutture[] findWhereStrutturaStrIdEquals(long strutturaStrId) throws UtenteStruttureDaoException;

	/** 
	 * Returns all rows from the utente_strutture table that match the criteria 'id = :id'.
	 */
	public UtenteStrutture[] findWhereIdEquals(long id) throws UtenteStruttureDaoException;

	/** 
	 * Returns all rows from the utente_strutture table that match the criteria 'delegato = :delegato'.
	 */
	public UtenteStrutture[] findWhereDelegatoEquals(String delegato) throws UtenteStruttureDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the utente_strutture table that match the specified arbitrary SQL statement
	 */
	public UtenteStrutture[] findByDynamicSelect(String sql, Object[] sqlParams) throws UtenteStruttureDaoException;

	/** 
	 * Returns all rows from the utente_strutture table that match the specified arbitrary SQL statement
	 */
	public UtenteStrutture[] findByDynamicWhere(String sql, Object[] sqlParams) throws UtenteStruttureDaoException;

}
