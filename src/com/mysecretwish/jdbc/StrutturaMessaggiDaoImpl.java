/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.jdbc;

import com.mysecretwish.dao.*;
import com.mysecretwish.factory.*;
import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class StrutturaMessaggiDaoImpl extends AbstractDAO implements StrutturaMessaggiDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT mes_id, mes_struttura, mes_ospite, mes_indicazioni, mes_valore_agg, struttura_str_id, lingue_parlate_lin_id FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( mes_id, mes_struttura, mes_ospite, mes_indicazioni, mes_valore_agg, struttura_str_id, lingue_parlate_lin_id ) VALUES ( ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET mes_id = ?, mes_struttura = ?, mes_ospite = ?, mes_indicazioni = ?, mes_valore_agg = ?, struttura_str_id = ?, lingue_parlate_lin_id = ? WHERE mes_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE mes_id = ?";

	/** 
	 * Index of column mes_id
	 */
	protected static final int COLUMN_MES_ID = 1;

	/** 
	 * Index of column mes_struttura
	 */
	protected static final int COLUMN_MES_STRUTTURA = 2;

	/** 
	 * Index of column mes_ospite
	 */
	protected static final int COLUMN_MES_OSPITE = 3;

	/** 
	 * Index of column mes_indicazioni
	 */
	protected static final int COLUMN_MES_INDICAZIONI = 4;

	/** 
	 * Index of column mes_valore_agg
	 */
	protected static final int COLUMN_MES_VALORE_AGG = 5;

	/** 
	 * Index of column struttura_str_id
	 */
	protected static final int COLUMN_STRUTTURA_STR_ID = 6;

	/** 
	 * Index of column lingue_parlate_lin_id
	 */
	protected static final int COLUMN_LINGUE_PARLATE_LIN_ID = 7;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 7;

	/** 
	 * Index of primary-key column mes_id
	 */
	protected static final int PK_COLUMN_MES_ID = 1;

	/** 
	 * Inserts a new row in the struttura_messaggi table.
	 */
	public StrutturaMessaggiPk insert(StrutturaMessaggi dto) throws StrutturaMessaggiDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_messaggi')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setMesId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getMesId() );
			stmt.setString( index++, dto.getMesStruttura() );
			stmt.setString( index++, dto.getMesOspite() );
			stmt.setString( index++, dto.getMesIndicazioni() );
			stmt.setString( index++, dto.getMesValoreAgg() );
			stmt.setLong( index++, dto.getStrutturaStrId() );
			stmt.setLong( index++, dto.getLingueParlateLinId() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaMessaggiDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the struttura_messaggi table.
	 */
	public void update(StrutturaMessaggiPk pk, StrutturaMessaggi dto) throws StrutturaMessaggiDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getMesId() );
			stmt.setString( index++, dto.getMesStruttura() );
			stmt.setString( index++, dto.getMesOspite() );
			stmt.setString( index++, dto.getMesIndicazioni() );
			stmt.setString( index++, dto.getMesValoreAgg() );
			stmt.setLong( index++, dto.getStrutturaStrId() );
			stmt.setLong( index++, dto.getLingueParlateLinId() );
			stmt.setLong( 8, pk.getMesId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaMessaggiDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the struttura_messaggi table.
	 */
	public void delete(StrutturaMessaggiPk pk) throws StrutturaMessaggiDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getMesId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaMessaggiDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the struttura_messaggi table that matches the specified primary-key value.
	 */
	public StrutturaMessaggi findByPrimaryKey(StrutturaMessaggiPk pk) throws StrutturaMessaggiDaoException
	{
		return findByPrimaryKey( pk.getMesId() );
	}

	/** 
	 * Returns all rows from the struttura_messaggi table that match the criteria 'mes_id = :mesId'.
	 */
	public StrutturaMessaggi findByPrimaryKey(long mesId) throws StrutturaMessaggiDaoException
	{
		StrutturaMessaggi ret[] = findByDynamicSelect( SQL_SELECT + " WHERE mes_id = ?", new Object[] {  new Long(mesId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the struttura_messaggi table that match the criteria ''.
	 */
	public StrutturaMessaggi[] findAll() throws StrutturaMessaggiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY mes_id", null );
	}

	/** 
	 * Returns all rows from the struttura_messaggi table that match the criteria 'lingue_parlate_lin_id = :lingueParlateLinId'.
	 */
	public StrutturaMessaggi[] findByLingueParlate(long lingueParlateLinId) throws StrutturaMessaggiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE lingue_parlate_lin_id = ?", new Object[] {  new Long(lingueParlateLinId) } );
	}

	/** 
	 * Returns all rows from the struttura_messaggi table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaMessaggi[] findByStruttura(long strutturaStrId) throws StrutturaMessaggiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_str_id = ?", new Object[] {  new Long(strutturaStrId) } );
	}

	/** 
	 * Returns all rows from the struttura_messaggi table that match the criteria 'mes_id = :mesId'.
	 */
	public StrutturaMessaggi[] findWhereMesIdEquals(long mesId) throws StrutturaMessaggiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mes_id = ? ORDER BY mes_id", new Object[] {  new Long(mesId) } );
	}

	/** 
	 * Returns all rows from the struttura_messaggi table that match the criteria 'mes_struttura = :mesStruttura'.
	 */
	public StrutturaMessaggi[] findWhereMesStrutturaEquals(String mesStruttura) throws StrutturaMessaggiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mes_struttura = ? ORDER BY mes_struttura", new Object[] { mesStruttura } );
	}

	/** 
	 * Returns all rows from the struttura_messaggi table that match the criteria 'mes_ospite = :mesOspite'.
	 */
	public StrutturaMessaggi[] findWhereMesOspiteEquals(String mesOspite) throws StrutturaMessaggiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mes_ospite = ? ORDER BY mes_ospite", new Object[] { mesOspite } );
	}

	/** 
	 * Returns all rows from the struttura_messaggi table that match the criteria 'mes_indicazioni = :mesIndicazioni'.
	 */
	public StrutturaMessaggi[] findWhereMesIndicazioniEquals(String mesIndicazioni) throws StrutturaMessaggiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mes_indicazioni = ? ORDER BY mes_indicazioni", new Object[] { mesIndicazioni } );
	}

	/** 
	 * Returns all rows from the struttura_messaggi table that match the criteria 'mes_valore_agg = :mesValoreAgg'.
	 */
	public StrutturaMessaggi[] findWhereMesValoreAggEquals(String mesValoreAgg) throws StrutturaMessaggiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mes_valore_agg = ? ORDER BY mes_valore_agg", new Object[] { mesValoreAgg } );
	}

	/** 
	 * Returns all rows from the struttura_messaggi table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaMessaggi[] findWhereStrutturaStrIdEquals(long strutturaStrId) throws StrutturaMessaggiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_str_id = ? ORDER BY struttura_str_id", new Object[] {  new Long(strutturaStrId) } );
	}

	/** 
	 * Returns all rows from the struttura_messaggi table that match the criteria 'lingue_parlate_lin_id = :lingueParlateLinId'.
	 */
	public StrutturaMessaggi[] findWhereLingueParlateLinIdEquals(long lingueParlateLinId) throws StrutturaMessaggiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE lingue_parlate_lin_id = ? ORDER BY lingue_parlate_lin_id", new Object[] {  new Long(lingueParlateLinId) } );
	}

	/**
	 * Method 'StrutturaMessaggiDaoImpl'
	 * 
	 */
	public StrutturaMessaggiDaoImpl()
	{
	}

	/**
	 * Method 'StrutturaMessaggiDaoImpl'
	 * 
	 * @param userConn
	 */
	public StrutturaMessaggiDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "struttura_messaggi";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected StrutturaMessaggi fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			StrutturaMessaggi dto = new StrutturaMessaggi();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected StrutturaMessaggi[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			StrutturaMessaggi dto = new StrutturaMessaggi();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		StrutturaMessaggi ret[] = new StrutturaMessaggi[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(StrutturaMessaggi dto, ResultSet rs) throws SQLException
	{
		dto.setMesId( rs.getLong( COLUMN_MES_ID ) );
		dto.setMesStruttura( rs.getString( COLUMN_MES_STRUTTURA ) );
		dto.setMesOspite( rs.getString( COLUMN_MES_OSPITE ) );
		dto.setMesIndicazioni( rs.getString( COLUMN_MES_INDICAZIONI ) );
		dto.setMesValoreAgg( rs.getString( COLUMN_MES_VALORE_AGG ) );
		dto.setStrutturaStrId( rs.getLong( COLUMN_STRUTTURA_STR_ID ) );
		dto.setLingueParlateLinId( rs.getLong( COLUMN_LINGUE_PARLATE_LIN_ID ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(StrutturaMessaggi dto)
	{
	}

	/** 
	 * Returns all rows from the struttura_messaggi table that match the specified arbitrary SQL statement
	 */
	public StrutturaMessaggi[] findByDynamicSelect(String sql, Object[] sqlParams) throws StrutturaMessaggiDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaMessaggiDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the struttura_messaggi table that match the specified arbitrary SQL statement
	 */
	public StrutturaMessaggi[] findByDynamicWhere(String sql, Object[] sqlParams) throws StrutturaMessaggiDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaMessaggiDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
