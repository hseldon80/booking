/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.jdbc;

import com.mysecretwish.dao.*;
import com.mysecretwish.factory.*;
import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class StrutturaCondCancelDaoImpl extends AbstractDAO implements StrutturaCondCancelDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT scc_id, scc_canc_gratuita, scc_tempor_canc, scc_pag_anticip, scc_non_rimborsabile, scc_attivo, struttura_str_id, scc_tempo_prima, scc_add_oltre_limite, scc_add_mac_prese, scc_periodo_toll FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( scc_id, scc_canc_gratuita, scc_tempor_canc, scc_pag_anticip, scc_non_rimborsabile, scc_attivo, struttura_str_id, scc_tempo_prima, scc_add_oltre_limite, scc_add_mac_prese, scc_periodo_toll ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET scc_id = ?, scc_canc_gratuita = ?, scc_tempor_canc = ?, scc_pag_anticip = ?, scc_non_rimborsabile = ?, scc_attivo = ?, struttura_str_id = ?, scc_tempo_prima = ?, scc_add_oltre_limite = ?, scc_add_mac_prese = ?, scc_periodo_toll = ? WHERE scc_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE scc_id = ?";

	/** 
	 * Index of column scc_id
	 */
	protected static final int COLUMN_SCC_ID = 1;

	/** 
	 * Index of column scc_canc_gratuita
	 */
	protected static final int COLUMN_SCC_CANC_GRATUITA = 2;

	/** 
	 * Index of column scc_tempor_canc
	 */
	protected static final int COLUMN_SCC_TEMPOR_CANC = 3;

	/** 
	 * Index of column scc_pag_anticip
	 */
	protected static final int COLUMN_SCC_PAG_ANTICIP = 4;

	/** 
	 * Index of column scc_non_rimborsabile
	 */
	protected static final int COLUMN_SCC_NON_RIMBORSABILE = 5;

	/** 
	 * Index of column scc_attivo
	 */
	protected static final int COLUMN_SCC_ATTIVO = 6;

	/** 
	 * Index of column struttura_str_id
	 */
	protected static final int COLUMN_STRUTTURA_STR_ID = 7;

	/** 
	 * Index of column scc_tempo_prima
	 */
	protected static final int COLUMN_SCC_TEMPO_PRIMA = 8;

	/** 
	 * Index of column scc_add_oltre_limite
	 */
	protected static final int COLUMN_SCC_ADD_OLTRE_LIMITE = 9;

	/** 
	 * Index of column scc_add_mac_prese
	 */
	protected static final int COLUMN_SCC_ADD_MAC_PRESE = 10;

	/** 
	 * Index of column scc_periodo_toll
	 */
	protected static final int COLUMN_SCC_PERIODO_TOLL = 11;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 11;

	/** 
	 * Index of primary-key column scc_id
	 */
	protected static final int PK_COLUMN_SCC_ID = 1;

	/** 
	 * Inserts a new row in the struttura_cond_cancel table.
	 */
	public StrutturaCondCancelPk insert(StrutturaCondCancel dto) throws StrutturaCondCancelDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_strutture')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setSccId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getSccId() );
			stmt.setString( index++, dto.getSccCancGratuita() );
			stmt.setString( index++, dto.getSccTemporCanc() );
			stmt.setString( index++, dto.getSccPagAnticip() );
			stmt.setString( index++, dto.getSccNonRimborsabile() );
			stmt.setString( index++, dto.getSccAttivo() );
			stmt.setLong( index++, dto.getStrutturaStrId() );
			if (dto.isSccTempoPrimaNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getSccTempoPrima() );
			}
		
			if (dto.isSccAddOltreLimiteNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getSccAddOltreLimite() );
			}
		
			if (dto.isSccAddMacPreseNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getSccAddMacPrese() );
			}
		
			if (dto.isSccPeriodoTollNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getSccPeriodoToll() );
			}
		
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaCondCancelDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the struttura_cond_cancel table.
	 */
	public void update(StrutturaCondCancelPk pk, StrutturaCondCancel dto) throws StrutturaCondCancelDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getSccId() );
			stmt.setString( index++, dto.getSccCancGratuita() );
			stmt.setString( index++, dto.getSccTemporCanc() );
			stmt.setString( index++, dto.getSccPagAnticip() );
			stmt.setString( index++, dto.getSccNonRimborsabile() );
			stmt.setString( index++, dto.getSccAttivo() );
			stmt.setLong( index++, dto.getStrutturaStrId() );
			if (dto.isSccTempoPrimaNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getSccTempoPrima() );
			}
		
			if (dto.isSccAddOltreLimiteNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getSccAddOltreLimite() );
			}
		
			if (dto.isSccAddMacPreseNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getSccAddMacPrese() );
			}
		
			if (dto.isSccPeriodoTollNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getSccPeriodoToll() );
			}
		
			stmt.setLong( 12, pk.getSccId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaCondCancelDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the struttura_cond_cancel table.
	 */
	public void delete(StrutturaCondCancelPk pk) throws StrutturaCondCancelDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getSccId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaCondCancelDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the struttura_cond_cancel table that matches the specified primary-key value.
	 */
	public StrutturaCondCancel findByPrimaryKey(StrutturaCondCancelPk pk) throws StrutturaCondCancelDaoException
	{
		return findByPrimaryKey( pk.getSccId() );
	}

	/** 
	 * Returns all rows from the struttura_cond_cancel table that match the criteria 'scc_id = :sccId'.
	 */
	public StrutturaCondCancel findByPrimaryKey(long sccId) throws StrutturaCondCancelDaoException
	{
		StrutturaCondCancel ret[] = findByDynamicSelect( SQL_SELECT + " WHERE scc_id = ?", new Object[] {  new Long(sccId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the struttura_cond_cancel table that match the criteria ''.
	 */
	public StrutturaCondCancel[] findAll() throws StrutturaCondCancelDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY scc_id", null );
	}

	/** 
	 * Returns all rows from the struttura_cond_cancel table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaCondCancel[] findByStruttura(long strutturaStrId) throws StrutturaCondCancelDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_str_id = ?", new Object[] {  new Long(strutturaStrId) } );
	}

	/** 
	 * Returns all rows from the struttura_cond_cancel table that match the criteria 'scc_id = :sccId'.
	 */
	public StrutturaCondCancel[] findWhereSccIdEquals(long sccId) throws StrutturaCondCancelDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scc_id = ? ORDER BY scc_id", new Object[] {  new Long(sccId) } );
	}

	/** 
	 * Returns all rows from the struttura_cond_cancel table that match the criteria 'scc_canc_gratuita = :sccCancGratuita'.
	 */
	public StrutturaCondCancel[] findWhereSccCancGratuitaEquals(String sccCancGratuita) throws StrutturaCondCancelDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scc_canc_gratuita = ? ORDER BY scc_canc_gratuita", new Object[] { sccCancGratuita } );
	}

	/** 
	 * Returns all rows from the struttura_cond_cancel table that match the criteria 'scc_tempor_canc = :sccTemporCanc'.
	 */
	public StrutturaCondCancel[] findWhereSccTemporCancEquals(String sccTemporCanc) throws StrutturaCondCancelDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scc_tempor_canc = ? ORDER BY scc_tempor_canc", new Object[] { sccTemporCanc } );
	}

	/** 
	 * Returns all rows from the struttura_cond_cancel table that match the criteria 'scc_pag_anticip = :sccPagAnticip'.
	 */
	public StrutturaCondCancel[] findWhereSccPagAnticipEquals(String sccPagAnticip) throws StrutturaCondCancelDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scc_pag_anticip = ? ORDER BY scc_pag_anticip", new Object[] { sccPagAnticip } );
	}

	/** 
	 * Returns all rows from the struttura_cond_cancel table that match the criteria 'scc_non_rimborsabile = :sccNonRimborsabile'.
	 */
	public StrutturaCondCancel[] findWhereSccNonRimborsabileEquals(String sccNonRimborsabile) throws StrutturaCondCancelDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scc_non_rimborsabile = ? ORDER BY scc_non_rimborsabile", new Object[] { sccNonRimborsabile } );
	}

	/** 
	 * Returns all rows from the struttura_cond_cancel table that match the criteria 'scc_attivo = :sccAttivo'.
	 */
	public StrutturaCondCancel[] findWhereSccAttivoEquals(String sccAttivo) throws StrutturaCondCancelDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scc_attivo = ? ORDER BY scc_attivo", new Object[] { sccAttivo } );
	}

	/** 
	 * Returns all rows from the struttura_cond_cancel table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaCondCancel[] findWhereStrutturaStrIdEquals(long strutturaStrId) throws StrutturaCondCancelDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_str_id = ? ORDER BY struttura_str_id", new Object[] {  new Long(strutturaStrId) } );
	}

	/** 
	 * Returns all rows from the struttura_cond_cancel table that match the criteria 'scc_tempo_prima = :sccTempoPrima'.
	 */
	public StrutturaCondCancel[] findWhereSccTempoPrimaEquals(long sccTempoPrima) throws StrutturaCondCancelDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scc_tempo_prima = ? ORDER BY scc_tempo_prima", new Object[] {  new Long(sccTempoPrima) } );
	}

	/** 
	 * Returns all rows from the struttura_cond_cancel table that match the criteria 'scc_add_oltre_limite = :sccAddOltreLimite'.
	 */
	public StrutturaCondCancel[] findWhereSccAddOltreLimiteEquals(long sccAddOltreLimite) throws StrutturaCondCancelDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scc_add_oltre_limite = ? ORDER BY scc_add_oltre_limite", new Object[] {  new Long(sccAddOltreLimite) } );
	}

	/** 
	 * Returns all rows from the struttura_cond_cancel table that match the criteria 'scc_add_mac_prese = :sccAddMacPrese'.
	 */
	public StrutturaCondCancel[] findWhereSccAddMacPreseEquals(long sccAddMacPrese) throws StrutturaCondCancelDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scc_add_mac_prese = ? ORDER BY scc_add_mac_prese", new Object[] {  new Long(sccAddMacPrese) } );
	}

	/** 
	 * Returns all rows from the struttura_cond_cancel table that match the criteria 'scc_periodo_toll = :sccPeriodoToll'.
	 */
	public StrutturaCondCancel[] findWhereSccPeriodoTollEquals(long sccPeriodoToll) throws StrutturaCondCancelDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scc_periodo_toll = ? ORDER BY scc_periodo_toll", new Object[] {  new Long(sccPeriodoToll) } );
	}

	/**
	 * Method 'StrutturaCondCancelDaoImpl'
	 * 
	 */
	public StrutturaCondCancelDaoImpl()
	{
	}

	/**
	 * Method 'StrutturaCondCancelDaoImpl'
	 * 
	 * @param userConn
	 */
	public StrutturaCondCancelDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "struttura_cond_cancel";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected StrutturaCondCancel fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			StrutturaCondCancel dto = new StrutturaCondCancel();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected StrutturaCondCancel[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			StrutturaCondCancel dto = new StrutturaCondCancel();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		StrutturaCondCancel ret[] = new StrutturaCondCancel[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(StrutturaCondCancel dto, ResultSet rs) throws SQLException
	{
		dto.setSccId( rs.getLong( COLUMN_SCC_ID ) );
		dto.setSccCancGratuita( rs.getString( COLUMN_SCC_CANC_GRATUITA ) );
		dto.setSccTemporCanc( rs.getString( COLUMN_SCC_TEMPOR_CANC ) );
		dto.setSccPagAnticip( rs.getString( COLUMN_SCC_PAG_ANTICIP ) );
		dto.setSccNonRimborsabile( rs.getString( COLUMN_SCC_NON_RIMBORSABILE ) );
		dto.setSccAttivo( rs.getString( COLUMN_SCC_ATTIVO ) );
		dto.setStrutturaStrId( rs.getLong( COLUMN_STRUTTURA_STR_ID ) );
		dto.setSccTempoPrima( rs.getLong( COLUMN_SCC_TEMPO_PRIMA ) );
		if (rs.wasNull()) {
			dto.setSccTempoPrimaNull( true );
		}
		
		dto.setSccAddOltreLimite( rs.getLong( COLUMN_SCC_ADD_OLTRE_LIMITE ) );
		if (rs.wasNull()) {
			dto.setSccAddOltreLimiteNull( true );
		}
		
		dto.setSccAddMacPrese( rs.getLong( COLUMN_SCC_ADD_MAC_PRESE ) );
		if (rs.wasNull()) {
			dto.setSccAddMacPreseNull( true );
		}
		
		dto.setSccPeriodoToll( rs.getLong( COLUMN_SCC_PERIODO_TOLL ) );
		if (rs.wasNull()) {
			dto.setSccPeriodoTollNull( true );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(StrutturaCondCancel dto)
	{
	}

	/** 
	 * Returns all rows from the struttura_cond_cancel table that match the specified arbitrary SQL statement
	 */
	public StrutturaCondCancel[] findByDynamicSelect(String sql, Object[] sqlParams) throws StrutturaCondCancelDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaCondCancelDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the struttura_cond_cancel table that match the specified arbitrary SQL statement
	 */
	public StrutturaCondCancel[] findByDynamicWhere(String sql, Object[] sqlParams) throws StrutturaCondCancelDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaCondCancelDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
