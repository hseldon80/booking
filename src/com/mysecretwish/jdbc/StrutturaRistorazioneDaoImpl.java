/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.jdbc;

import com.mysecretwish.dao.*;
import com.mysecretwish.factory.*;
import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class StrutturaRistorazioneDaoImpl extends AbstractDAO implements StrutturaRistorazioneDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT sri_id, sri_pasti_bambini, sri_a_la_carte, sri_buffet_bambini, sri_buffet, sri_vini, sri_acqua, sri_snack_bar, sri_frutta, sri_spesa_dom, sri_cioccolatini, sri_barbecue, sri_dist_auto_bev, sri_serv_camera, sri_dit_auto_snack, sri_col_camera, sri_menu_diete, sri_nome_rist, sri_solo_ospiti, sri_prenotazione, sri_posti_aperto, sri_aperto_col, sri_aperto_brunch, sri_aperto_aperitivo, sri_aperto_hightea, sri_aperto_cena, sri_aperto_pranzo, struttura_str_id, sri_tipo_menu, sri_cucinia, sri_opioni_dietetiche, sri_atmosfera FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( sri_id, sri_pasti_bambini, sri_a_la_carte, sri_buffet_bambini, sri_buffet, sri_vini, sri_acqua, sri_snack_bar, sri_frutta, sri_spesa_dom, sri_cioccolatini, sri_barbecue, sri_dist_auto_bev, sri_serv_camera, sri_dit_auto_snack, sri_col_camera, sri_menu_diete, sri_nome_rist, sri_solo_ospiti, sri_prenotazione, sri_posti_aperto, sri_aperto_col, sri_aperto_brunch, sri_aperto_aperitivo, sri_aperto_hightea, sri_aperto_cena, sri_aperto_pranzo, struttura_str_id, sri_tipo_menu, sri_cucinia, sri_opioni_dietetiche, sri_atmosfera ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET sri_id = ?, sri_pasti_bambini = ?, sri_a_la_carte = ?, sri_buffet_bambini = ?, sri_buffet = ?, sri_vini = ?, sri_acqua = ?, sri_snack_bar = ?, sri_frutta = ?, sri_spesa_dom = ?, sri_cioccolatini = ?, sri_barbecue = ?, sri_dist_auto_bev = ?, sri_serv_camera = ?, sri_dit_auto_snack = ?, sri_col_camera = ?, sri_menu_diete = ?, sri_nome_rist = ?, sri_solo_ospiti = ?, sri_prenotazione = ?, sri_posti_aperto = ?, sri_aperto_col = ?, sri_aperto_brunch = ?, sri_aperto_aperitivo = ?, sri_aperto_hightea = ?, sri_aperto_cena = ?, sri_aperto_pranzo = ?, struttura_str_id = ?, sri_tipo_menu = ?, sri_cucinia = ?, sri_opioni_dietetiche = ?, sri_atmosfera = ? WHERE sri_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE sri_id = ?";

	/** 
	 * Index of column sri_id
	 */
	protected static final int COLUMN_SRI_ID = 1;

	/** 
	 * Index of column sri_pasti_bambini
	 */
	protected static final int COLUMN_SRI_PASTI_BAMBINI = 2;

	/** 
	 * Index of column sri_a_la_carte
	 */
	protected static final int COLUMN_SRI_A_LA_CARTE = 3;

	/** 
	 * Index of column sri_buffet_bambini
	 */
	protected static final int COLUMN_SRI_BUFFET_BAMBINI = 4;

	/** 
	 * Index of column sri_buffet
	 */
	protected static final int COLUMN_SRI_BUFFET = 5;

	/** 
	 * Index of column sri_vini
	 */
	protected static final int COLUMN_SRI_VINI = 6;

	/** 
	 * Index of column sri_acqua
	 */
	protected static final int COLUMN_SRI_ACQUA = 7;

	/** 
	 * Index of column sri_snack_bar
	 */
	protected static final int COLUMN_SRI_SNACK_BAR = 8;

	/** 
	 * Index of column sri_frutta
	 */
	protected static final int COLUMN_SRI_FRUTTA = 9;

	/** 
	 * Index of column sri_spesa_dom
	 */
	protected static final int COLUMN_SRI_SPESA_DOM = 10;

	/** 
	 * Index of column sri_cioccolatini
	 */
	protected static final int COLUMN_SRI_CIOCCOLATINI = 11;

	/** 
	 * Index of column sri_barbecue
	 */
	protected static final int COLUMN_SRI_BARBECUE = 12;

	/** 
	 * Index of column sri_dist_auto_bev
	 */
	protected static final int COLUMN_SRI_DIST_AUTO_BEV = 13;

	/** 
	 * Index of column sri_serv_camera
	 */
	protected static final int COLUMN_SRI_SERV_CAMERA = 14;

	/** 
	 * Index of column sri_dit_auto_snack
	 */
	protected static final int COLUMN_SRI_DIT_AUTO_SNACK = 15;

	/** 
	 * Index of column sri_col_camera
	 */
	protected static final int COLUMN_SRI_COL_CAMERA = 16;

	/** 
	 * Index of column sri_menu_diete
	 */
	protected static final int COLUMN_SRI_MENU_DIETE = 17;

	/** 
	 * Index of column sri_nome_rist
	 */
	protected static final int COLUMN_SRI_NOME_RIST = 18;

	/** 
	 * Index of column sri_solo_ospiti
	 */
	protected static final int COLUMN_SRI_SOLO_OSPITI = 19;

	/** 
	 * Index of column sri_prenotazione
	 */
	protected static final int COLUMN_SRI_PRENOTAZIONE = 20;

	/** 
	 * Index of column sri_posti_aperto
	 */
	protected static final int COLUMN_SRI_POSTI_APERTO = 21;

	/** 
	 * Index of column sri_aperto_col
	 */
	protected static final int COLUMN_SRI_APERTO_COL = 22;

	/** 
	 * Index of column sri_aperto_brunch
	 */
	protected static final int COLUMN_SRI_APERTO_BRUNCH = 23;

	/** 
	 * Index of column sri_aperto_aperitivo
	 */
	protected static final int COLUMN_SRI_APERTO_APERITIVO = 24;

	/** 
	 * Index of column sri_aperto_hightea
	 */
	protected static final int COLUMN_SRI_APERTO_HIGHTEA = 25;

	/** 
	 * Index of column sri_aperto_cena
	 */
	protected static final int COLUMN_SRI_APERTO_CENA = 26;

	/** 
	 * Index of column sri_aperto_pranzo
	 */
	protected static final int COLUMN_SRI_APERTO_PRANZO = 27;

	/** 
	 * Index of column struttura_str_id
	 */
	protected static final int COLUMN_STRUTTURA_STR_ID = 28;

	/** 
	 * Index of column sri_tipo_menu
	 */
	protected static final int COLUMN_SRI_TIPO_MENU = 29;

	/** 
	 * Index of column sri_cucinia
	 */
	protected static final int COLUMN_SRI_CUCINIA = 30;

	/** 
	 * Index of column sri_opioni_dietetiche
	 */
	protected static final int COLUMN_SRI_OPIONI_DIETETICHE = 31;

	/** 
	 * Index of column sri_atmosfera
	 */
	protected static final int COLUMN_SRI_ATMOSFERA = 32;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 32;

	/** 
	 * Index of primary-key column sri_id
	 */
	protected static final int PK_COLUMN_SRI_ID = 1;

	/** 
	 * Inserts a new row in the struttura_ristorazione table.
	 */
	public StrutturaRistorazionePk insert(StrutturaRistorazione dto) throws StrutturaRistorazioneDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_strutture')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setSriId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getSriId() );
			stmt.setString( index++, dto.getSriPastiBambini() );
			stmt.setString( index++, dto.getSriALaCarte() );
			stmt.setString( index++, dto.getSriBuffetBambini() );
			stmt.setString( index++, dto.getSriBuffet() );
			stmt.setString( index++, dto.getSriVini() );
			stmt.setString( index++, dto.getSriAcqua() );
			stmt.setString( index++, dto.getSriSnackBar() );
			stmt.setString( index++, dto.getSriFrutta() );
			stmt.setString( index++, dto.getSriSpesaDom() );
			stmt.setString( index++, dto.getSriCioccolatini() );
			stmt.setString( index++, dto.getSriBarbecue() );
			stmt.setString( index++, dto.getSriDistAutoBev() );
			stmt.setString( index++, dto.getSriServCamera() );
			stmt.setString( index++, dto.getSriDitAutoSnack() );
			stmt.setString( index++, dto.getSriColCamera() );
			stmt.setString( index++, dto.getSriMenuDiete() );
			stmt.setString( index++, dto.getSriNomeRist() );
			stmt.setString( index++, dto.getSriSoloOspiti() );
			stmt.setString( index++, dto.getSriPrenotazione() );
			stmt.setString( index++, dto.getSriPostiAperto() );
			stmt.setString( index++, dto.getSriApertoCol() );
			stmt.setString( index++, dto.getSriApertoBrunch() );
			stmt.setString( index++, dto.getSriApertoAperitivo() );
			stmt.setString( index++, dto.getSriApertoHightea() );
			stmt.setString( index++, dto.getSriApertoCena() );
			stmt.setString( index++, dto.getSriApertoPranzo() );
			stmt.setLong( index++, dto.getStrutturaStrId() );
			if (dto.isSriTipoMenuNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getSriTipoMenu() );
			}
		
			if (dto.isSriCuciniaNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getSriCucinia() );
			}
		
			if (dto.isSriOpioniDieteticheNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getSriOpioniDietetiche() );
			}
		
			if (dto.isSriAtmosferaNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getSriAtmosfera() );
			}
		
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaRistorazioneDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the struttura_ristorazione table.
	 */
	public void update(StrutturaRistorazionePk pk, StrutturaRistorazione dto) throws StrutturaRistorazioneDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getSriId() );
			stmt.setString( index++, dto.getSriPastiBambini() );
			stmt.setString( index++, dto.getSriALaCarte() );
			stmt.setString( index++, dto.getSriBuffetBambini() );
			stmt.setString( index++, dto.getSriBuffet() );
			stmt.setString( index++, dto.getSriVini() );
			stmt.setString( index++, dto.getSriAcqua() );
			stmt.setString( index++, dto.getSriSnackBar() );
			stmt.setString( index++, dto.getSriFrutta() );
			stmt.setString( index++, dto.getSriSpesaDom() );
			stmt.setString( index++, dto.getSriCioccolatini() );
			stmt.setString( index++, dto.getSriBarbecue() );
			stmt.setString( index++, dto.getSriDistAutoBev() );
			stmt.setString( index++, dto.getSriServCamera() );
			stmt.setString( index++, dto.getSriDitAutoSnack() );
			stmt.setString( index++, dto.getSriColCamera() );
			stmt.setString( index++, dto.getSriMenuDiete() );
			stmt.setString( index++, dto.getSriNomeRist() );
			stmt.setString( index++, dto.getSriSoloOspiti() );
			stmt.setString( index++, dto.getSriPrenotazione() );
			stmt.setString( index++, dto.getSriPostiAperto() );
			stmt.setString( index++, dto.getSriApertoCol() );
			stmt.setString( index++, dto.getSriApertoBrunch() );
			stmt.setString( index++, dto.getSriApertoAperitivo() );
			stmt.setString( index++, dto.getSriApertoHightea() );
			stmt.setString( index++, dto.getSriApertoCena() );
			stmt.setString( index++, dto.getSriApertoPranzo() );
			stmt.setLong( index++, dto.getStrutturaStrId() );
			if (dto.isSriTipoMenuNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getSriTipoMenu() );
			}
		
			if (dto.isSriCuciniaNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getSriCucinia() );
			}
		
			if (dto.isSriOpioniDieteticheNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getSriOpioniDietetiche() );
			}
		
			if (dto.isSriAtmosferaNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getSriAtmosfera() );
			}
		
			stmt.setLong( 33, pk.getSriId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaRistorazioneDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the struttura_ristorazione table.
	 */
	public void delete(StrutturaRistorazionePk pk) throws StrutturaRistorazioneDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getSriId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaRistorazioneDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the struttura_ristorazione table that matches the specified primary-key value.
	 */
	public StrutturaRistorazione findByPrimaryKey(StrutturaRistorazionePk pk) throws StrutturaRistorazioneDaoException
	{
		return findByPrimaryKey( pk.getSriId() );
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the criteria 'sri_id = :sriId'.
	 */
	public StrutturaRistorazione findByPrimaryKey(long sriId) throws StrutturaRistorazioneDaoException
	{
		StrutturaRistorazione ret[] = findByDynamicSelect( SQL_SELECT + " WHERE sri_id = ?", new Object[] {  new Long(sriId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the criteria ''.
	 */
	public StrutturaRistorazione[] findAll() throws StrutturaRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY sri_id", null );
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaRistorazione[] findByStruttura(long strutturaStrId) throws StrutturaRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_str_id = ?", new Object[] {  new Long(strutturaStrId) } );
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the criteria 'sri_id = :sriId'.
	 */
	public StrutturaRistorazione[] findWhereSriIdEquals(long sriId) throws StrutturaRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sri_id = ? ORDER BY sri_id", new Object[] {  new Long(sriId) } );
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the criteria 'sri_pasti_bambini = :sriPastiBambini'.
	 */
	public StrutturaRistorazione[] findWhereSriPastiBambiniEquals(String sriPastiBambini) throws StrutturaRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sri_pasti_bambini = ? ORDER BY sri_pasti_bambini", new Object[] { sriPastiBambini } );
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the criteria 'sri_a_la_carte = :sriALaCarte'.
	 */
	public StrutturaRistorazione[] findWhereSriALaCarteEquals(String sriALaCarte) throws StrutturaRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sri_a_la_carte = ? ORDER BY sri_a_la_carte", new Object[] { sriALaCarte } );
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the criteria 'sri_buffet_bambini = :sriBuffetBambini'.
	 */
	public StrutturaRistorazione[] findWhereSriBuffetBambiniEquals(String sriBuffetBambini) throws StrutturaRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sri_buffet_bambini = ? ORDER BY sri_buffet_bambini", new Object[] { sriBuffetBambini } );
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the criteria 'sri_buffet = :sriBuffet'.
	 */
	public StrutturaRistorazione[] findWhereSriBuffetEquals(String sriBuffet) throws StrutturaRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sri_buffet = ? ORDER BY sri_buffet", new Object[] { sriBuffet } );
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the criteria 'sri_vini = :sriVini'.
	 */
	public StrutturaRistorazione[] findWhereSriViniEquals(String sriVini) throws StrutturaRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sri_vini = ? ORDER BY sri_vini", new Object[] { sriVini } );
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the criteria 'sri_acqua = :sriAcqua'.
	 */
	public StrutturaRistorazione[] findWhereSriAcquaEquals(String sriAcqua) throws StrutturaRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sri_acqua = ? ORDER BY sri_acqua", new Object[] { sriAcqua } );
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the criteria 'sri_snack_bar = :sriSnackBar'.
	 */
	public StrutturaRistorazione[] findWhereSriSnackBarEquals(String sriSnackBar) throws StrutturaRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sri_snack_bar = ? ORDER BY sri_snack_bar", new Object[] { sriSnackBar } );
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the criteria 'sri_frutta = :sriFrutta'.
	 */
	public StrutturaRistorazione[] findWhereSriFruttaEquals(String sriFrutta) throws StrutturaRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sri_frutta = ? ORDER BY sri_frutta", new Object[] { sriFrutta } );
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the criteria 'sri_spesa_dom = :sriSpesaDom'.
	 */
	public StrutturaRistorazione[] findWhereSriSpesaDomEquals(String sriSpesaDom) throws StrutturaRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sri_spesa_dom = ? ORDER BY sri_spesa_dom", new Object[] { sriSpesaDom } );
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the criteria 'sri_cioccolatini = :sriCioccolatini'.
	 */
	public StrutturaRistorazione[] findWhereSriCioccolatiniEquals(String sriCioccolatini) throws StrutturaRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sri_cioccolatini = ? ORDER BY sri_cioccolatini", new Object[] { sriCioccolatini } );
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the criteria 'sri_barbecue = :sriBarbecue'.
	 */
	public StrutturaRistorazione[] findWhereSriBarbecueEquals(String sriBarbecue) throws StrutturaRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sri_barbecue = ? ORDER BY sri_barbecue", new Object[] { sriBarbecue } );
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the criteria 'sri_dist_auto_bev = :sriDistAutoBev'.
	 */
	public StrutturaRistorazione[] findWhereSriDistAutoBevEquals(String sriDistAutoBev) throws StrutturaRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sri_dist_auto_bev = ? ORDER BY sri_dist_auto_bev", new Object[] { sriDistAutoBev } );
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the criteria 'sri_serv_camera = :sriServCamera'.
	 */
	public StrutturaRistorazione[] findWhereSriServCameraEquals(String sriServCamera) throws StrutturaRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sri_serv_camera = ? ORDER BY sri_serv_camera", new Object[] { sriServCamera } );
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the criteria 'sri_dit_auto_snack = :sriDitAutoSnack'.
	 */
	public StrutturaRistorazione[] findWhereSriDitAutoSnackEquals(String sriDitAutoSnack) throws StrutturaRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sri_dit_auto_snack = ? ORDER BY sri_dit_auto_snack", new Object[] { sriDitAutoSnack } );
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the criteria 'sri_col_camera = :sriColCamera'.
	 */
	public StrutturaRistorazione[] findWhereSriColCameraEquals(String sriColCamera) throws StrutturaRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sri_col_camera = ? ORDER BY sri_col_camera", new Object[] { sriColCamera } );
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the criteria 'sri_menu_diete = :sriMenuDiete'.
	 */
	public StrutturaRistorazione[] findWhereSriMenuDieteEquals(String sriMenuDiete) throws StrutturaRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sri_menu_diete = ? ORDER BY sri_menu_diete", new Object[] { sriMenuDiete } );
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the criteria 'sri_nome_rist = :sriNomeRist'.
	 */
	public StrutturaRistorazione[] findWhereSriNomeRistEquals(String sriNomeRist) throws StrutturaRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sri_nome_rist = ? ORDER BY sri_nome_rist", new Object[] { sriNomeRist } );
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the criteria 'sri_solo_ospiti = :sriSoloOspiti'.
	 */
	public StrutturaRistorazione[] findWhereSriSoloOspitiEquals(String sriSoloOspiti) throws StrutturaRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sri_solo_ospiti = ? ORDER BY sri_solo_ospiti", new Object[] { sriSoloOspiti } );
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the criteria 'sri_prenotazione = :sriPrenotazione'.
	 */
	public StrutturaRistorazione[] findWhereSriPrenotazioneEquals(String sriPrenotazione) throws StrutturaRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sri_prenotazione = ? ORDER BY sri_prenotazione", new Object[] { sriPrenotazione } );
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the criteria 'sri_posti_aperto = :sriPostiAperto'.
	 */
	public StrutturaRistorazione[] findWhereSriPostiApertoEquals(String sriPostiAperto) throws StrutturaRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sri_posti_aperto = ? ORDER BY sri_posti_aperto", new Object[] { sriPostiAperto } );
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the criteria 'sri_aperto_col = :sriApertoCol'.
	 */
	public StrutturaRistorazione[] findWhereSriApertoColEquals(String sriApertoCol) throws StrutturaRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sri_aperto_col = ? ORDER BY sri_aperto_col", new Object[] { sriApertoCol } );
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the criteria 'sri_aperto_brunch = :sriApertoBrunch'.
	 */
	public StrutturaRistorazione[] findWhereSriApertoBrunchEquals(String sriApertoBrunch) throws StrutturaRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sri_aperto_brunch = ? ORDER BY sri_aperto_brunch", new Object[] { sriApertoBrunch } );
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the criteria 'sri_aperto_aperitivo = :sriApertoAperitivo'.
	 */
	public StrutturaRistorazione[] findWhereSriApertoAperitivoEquals(String sriApertoAperitivo) throws StrutturaRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sri_aperto_aperitivo = ? ORDER BY sri_aperto_aperitivo", new Object[] { sriApertoAperitivo } );
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the criteria 'sri_aperto_hightea = :sriApertoHightea'.
	 */
	public StrutturaRistorazione[] findWhereSriApertoHighteaEquals(String sriApertoHightea) throws StrutturaRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sri_aperto_hightea = ? ORDER BY sri_aperto_hightea", new Object[] { sriApertoHightea } );
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the criteria 'sri_aperto_cena = :sriApertoCena'.
	 */
	public StrutturaRistorazione[] findWhereSriApertoCenaEquals(String sriApertoCena) throws StrutturaRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sri_aperto_cena = ? ORDER BY sri_aperto_cena", new Object[] { sriApertoCena } );
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the criteria 'sri_aperto_pranzo = :sriApertoPranzo'.
	 */
	public StrutturaRistorazione[] findWhereSriApertoPranzoEquals(String sriApertoPranzo) throws StrutturaRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sri_aperto_pranzo = ? ORDER BY sri_aperto_pranzo", new Object[] { sriApertoPranzo } );
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaRistorazione[] findWhereStrutturaStrIdEquals(long strutturaStrId) throws StrutturaRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_str_id = ? ORDER BY struttura_str_id", new Object[] {  new Long(strutturaStrId) } );
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the criteria 'sri_tipo_menu = :sriTipoMenu'.
	 */
	public StrutturaRistorazione[] findWhereSriTipoMenuEquals(long sriTipoMenu) throws StrutturaRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sri_tipo_menu = ? ORDER BY sri_tipo_menu", new Object[] {  new Long(sriTipoMenu) } );
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the criteria 'sri_cucinia = :sriCucinia'.
	 */
	public StrutturaRistorazione[] findWhereSriCuciniaEquals(long sriCucinia) throws StrutturaRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sri_cucinia = ? ORDER BY sri_cucinia", new Object[] {  new Long(sriCucinia) } );
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the criteria 'sri_opioni_dietetiche = :sriOpioniDietetiche'.
	 */
	public StrutturaRistorazione[] findWhereSriOpioniDieteticheEquals(long sriOpioniDietetiche) throws StrutturaRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sri_opioni_dietetiche = ? ORDER BY sri_opioni_dietetiche", new Object[] {  new Long(sriOpioniDietetiche) } );
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the criteria 'sri_atmosfera = :sriAtmosfera'.
	 */
	public StrutturaRistorazione[] findWhereSriAtmosferaEquals(long sriAtmosfera) throws StrutturaRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sri_atmosfera = ? ORDER BY sri_atmosfera", new Object[] {  new Long(sriAtmosfera) } );
	}

	/**
	 * Method 'StrutturaRistorazioneDaoImpl'
	 * 
	 */
	public StrutturaRistorazioneDaoImpl()
	{
	}

	/**
	 * Method 'StrutturaRistorazioneDaoImpl'
	 * 
	 * @param userConn
	 */
	public StrutturaRistorazioneDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "struttura_ristorazione";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected StrutturaRistorazione fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			StrutturaRistorazione dto = new StrutturaRistorazione();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected StrutturaRistorazione[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			StrutturaRistorazione dto = new StrutturaRistorazione();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		StrutturaRistorazione ret[] = new StrutturaRistorazione[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(StrutturaRistorazione dto, ResultSet rs) throws SQLException
	{
		dto.setSriId( rs.getLong( COLUMN_SRI_ID ) );
		dto.setSriPastiBambini( rs.getString( COLUMN_SRI_PASTI_BAMBINI ) );
		dto.setSriALaCarte( rs.getString( COLUMN_SRI_A_LA_CARTE ) );
		dto.setSriBuffetBambini( rs.getString( COLUMN_SRI_BUFFET_BAMBINI ) );
		dto.setSriBuffet( rs.getString( COLUMN_SRI_BUFFET ) );
		dto.setSriVini( rs.getString( COLUMN_SRI_VINI ) );
		dto.setSriAcqua( rs.getString( COLUMN_SRI_ACQUA ) );
		dto.setSriSnackBar( rs.getString( COLUMN_SRI_SNACK_BAR ) );
		dto.setSriFrutta( rs.getString( COLUMN_SRI_FRUTTA ) );
		dto.setSriSpesaDom( rs.getString( COLUMN_SRI_SPESA_DOM ) );
		dto.setSriCioccolatini( rs.getString( COLUMN_SRI_CIOCCOLATINI ) );
		dto.setSriBarbecue( rs.getString( COLUMN_SRI_BARBECUE ) );
		dto.setSriDistAutoBev( rs.getString( COLUMN_SRI_DIST_AUTO_BEV ) );
		dto.setSriServCamera( rs.getString( COLUMN_SRI_SERV_CAMERA ) );
		dto.setSriDitAutoSnack( rs.getString( COLUMN_SRI_DIT_AUTO_SNACK ) );
		dto.setSriColCamera( rs.getString( COLUMN_SRI_COL_CAMERA ) );
		dto.setSriMenuDiete( rs.getString( COLUMN_SRI_MENU_DIETE ) );
		dto.setSriNomeRist( rs.getString( COLUMN_SRI_NOME_RIST ) );
		dto.setSriSoloOspiti( rs.getString( COLUMN_SRI_SOLO_OSPITI ) );
		dto.setSriPrenotazione( rs.getString( COLUMN_SRI_PRENOTAZIONE ) );
		dto.setSriPostiAperto( rs.getString( COLUMN_SRI_POSTI_APERTO ) );
		dto.setSriApertoCol( rs.getString( COLUMN_SRI_APERTO_COL ) );
		dto.setSriApertoBrunch( rs.getString( COLUMN_SRI_APERTO_BRUNCH ) );
		dto.setSriApertoAperitivo( rs.getString( COLUMN_SRI_APERTO_APERITIVO ) );
		dto.setSriApertoHightea( rs.getString( COLUMN_SRI_APERTO_HIGHTEA ) );
		dto.setSriApertoCena( rs.getString( COLUMN_SRI_APERTO_CENA ) );
		dto.setSriApertoPranzo( rs.getString( COLUMN_SRI_APERTO_PRANZO ) );
		dto.setStrutturaStrId( rs.getLong( COLUMN_STRUTTURA_STR_ID ) );
		dto.setSriTipoMenu( rs.getLong( COLUMN_SRI_TIPO_MENU ) );
		if (rs.wasNull()) {
			dto.setSriTipoMenuNull( true );
		}
		
		dto.setSriCucinia( rs.getLong( COLUMN_SRI_CUCINIA ) );
		if (rs.wasNull()) {
			dto.setSriCuciniaNull( true );
		}
		
		dto.setSriOpioniDietetiche( rs.getLong( COLUMN_SRI_OPIONI_DIETETICHE ) );
		if (rs.wasNull()) {
			dto.setSriOpioniDieteticheNull( true );
		}
		
		dto.setSriAtmosfera( rs.getLong( COLUMN_SRI_ATMOSFERA ) );
		if (rs.wasNull()) {
			dto.setSriAtmosferaNull( true );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(StrutturaRistorazione dto)
	{
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the specified arbitrary SQL statement
	 */
	public StrutturaRistorazione[] findByDynamicSelect(String sql, Object[] sqlParams) throws StrutturaRistorazioneDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaRistorazioneDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the struttura_ristorazione table that match the specified arbitrary SQL statement
	 */
	public StrutturaRistorazione[] findByDynamicWhere(String sql, Object[] sqlParams) throws StrutturaRistorazioneDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaRistorazioneDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
