/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.jdbc;

import com.mysecretwish.dao.*;
import com.mysecretwish.factory.*;
import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class CamereEstVistaDaoImpl extends AbstractDAO implements CamereEstVistaDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT sce_id, sce_balcone, sce_patio, sce_vista, sce_terrazza, sce_vista_citta, sce_vista_giard, sce_vista_lago, sce_vista_luogo, sce_vista_montagna, sce_piscina, sce_vista_fiume, sce_vista_mare, sce_vista_cortile, sce_vista_strada, camere_cam_id FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( sce_id, sce_balcone, sce_patio, sce_vista, sce_terrazza, sce_vista_citta, sce_vista_giard, sce_vista_lago, sce_vista_luogo, sce_vista_montagna, sce_piscina, sce_vista_fiume, sce_vista_mare, sce_vista_cortile, sce_vista_strada, camere_cam_id ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET sce_id = ?, sce_balcone = ?, sce_patio = ?, sce_vista = ?, sce_terrazza = ?, sce_vista_citta = ?, sce_vista_giard = ?, sce_vista_lago = ?, sce_vista_luogo = ?, sce_vista_montagna = ?, sce_piscina = ?, sce_vista_fiume = ?, sce_vista_mare = ?, sce_vista_cortile = ?, sce_vista_strada = ?, camere_cam_id = ? WHERE sce_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE sce_id = ?";

	/** 
	 * Index of column sce_id
	 */
	protected static final int COLUMN_SCE_ID = 1;

	/** 
	 * Index of column sce_balcone
	 */
	protected static final int COLUMN_SCE_BALCONE = 2;

	/** 
	 * Index of column sce_patio
	 */
	protected static final int COLUMN_SCE_PATIO = 3;

	/** 
	 * Index of column sce_vista
	 */
	protected static final int COLUMN_SCE_VISTA = 4;

	/** 
	 * Index of column sce_terrazza
	 */
	protected static final int COLUMN_SCE_TERRAZZA = 5;

	/** 
	 * Index of column sce_vista_citta
	 */
	protected static final int COLUMN_SCE_VISTA_CITTA = 6;

	/** 
	 * Index of column sce_vista_giard
	 */
	protected static final int COLUMN_SCE_VISTA_GIARD = 7;

	/** 
	 * Index of column sce_vista_lago
	 */
	protected static final int COLUMN_SCE_VISTA_LAGO = 8;

	/** 
	 * Index of column sce_vista_luogo
	 */
	protected static final int COLUMN_SCE_VISTA_LUOGO = 9;

	/** 
	 * Index of column sce_vista_montagna
	 */
	protected static final int COLUMN_SCE_VISTA_MONTAGNA = 10;

	/** 
	 * Index of column sce_piscina
	 */
	protected static final int COLUMN_SCE_PISCINA = 11;

	/** 
	 * Index of column sce_vista_fiume
	 */
	protected static final int COLUMN_SCE_VISTA_FIUME = 12;

	/** 
	 * Index of column sce_vista_mare
	 */
	protected static final int COLUMN_SCE_VISTA_MARE = 13;

	/** 
	 * Index of column sce_vista_cortile
	 */
	protected static final int COLUMN_SCE_VISTA_CORTILE = 14;

	/** 
	 * Index of column sce_vista_strada
	 */
	protected static final int COLUMN_SCE_VISTA_STRADA = 15;

	/** 
	 * Index of column camere_cam_id
	 */
	protected static final int COLUMN_CAMERE_CAM_ID = 16;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 16;

	/** 
	 * Index of primary-key column sce_id
	 */
	protected static final int PK_COLUMN_SCE_ID = 1;

	/** 
	 * Inserts a new row in the camere_est_vista table.
	 */
	public CamereEstVistaPk insert(CamereEstVista dto) throws CamereEstVistaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_camere')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setSceId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getSceId() );
			stmt.setString( index++, dto.getSceBalcone() );
			stmt.setString( index++, dto.getScePatio() );
			stmt.setString( index++, dto.getSceVista() );
			stmt.setString( index++, dto.getSceTerrazza() );
			stmt.setString( index++, dto.getSceVistaCitta() );
			stmt.setString( index++, dto.getSceVistaGiard() );
			stmt.setString( index++, dto.getSceVistaLago() );
			stmt.setString( index++, dto.getSceVistaLuogo() );
			stmt.setString( index++, dto.getSceVistaMontagna() );
			stmt.setString( index++, dto.getScePiscina() );
			stmt.setString( index++, dto.getSceVistaFiume() );
			stmt.setString( index++, dto.getSceVistaMare() );
			stmt.setString( index++, dto.getSceVistaCortile() );
			stmt.setString( index++, dto.getSceVistaStrada() );
			stmt.setLong( index++, dto.getCamereCamId() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CamereEstVistaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the camere_est_vista table.
	 */
	public void update(CamereEstVistaPk pk, CamereEstVista dto) throws CamereEstVistaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getSceId() );
			stmt.setString( index++, dto.getSceBalcone() );
			stmt.setString( index++, dto.getScePatio() );
			stmt.setString( index++, dto.getSceVista() );
			stmt.setString( index++, dto.getSceTerrazza() );
			stmt.setString( index++, dto.getSceVistaCitta() );
			stmt.setString( index++, dto.getSceVistaGiard() );
			stmt.setString( index++, dto.getSceVistaLago() );
			stmt.setString( index++, dto.getSceVistaLuogo() );
			stmt.setString( index++, dto.getSceVistaMontagna() );
			stmt.setString( index++, dto.getScePiscina() );
			stmt.setString( index++, dto.getSceVistaFiume() );
			stmt.setString( index++, dto.getSceVistaMare() );
			stmt.setString( index++, dto.getSceVistaCortile() );
			stmt.setString( index++, dto.getSceVistaStrada() );
			stmt.setLong( index++, dto.getCamereCamId() );
			stmt.setLong( 17, pk.getSceId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CamereEstVistaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the camere_est_vista table.
	 */
	public void delete(CamereEstVistaPk pk) throws CamereEstVistaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getSceId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CamereEstVistaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the camere_est_vista table that matches the specified primary-key value.
	 */
	public CamereEstVista findByPrimaryKey(CamereEstVistaPk pk) throws CamereEstVistaDaoException
	{
		return findByPrimaryKey( pk.getSceId() );
	}

	/** 
	 * Returns all rows from the camere_est_vista table that match the criteria 'sce_id = :sceId'.
	 */
	public CamereEstVista findByPrimaryKey(long sceId) throws CamereEstVistaDaoException
	{
		CamereEstVista ret[] = findByDynamicSelect( SQL_SELECT + " WHERE sce_id = ?", new Object[] {  new Long(sceId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the camere_est_vista table that match the criteria ''.
	 */
	public CamereEstVista[] findAll() throws CamereEstVistaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY sce_id", null );
	}

	/** 
	 * Returns all rows from the camere_est_vista table that match the criteria 'camere_cam_id = :camereCamId'.
	 */
	public CamereEstVista[] findByCamere(long camereCamId) throws CamereEstVistaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE camere_cam_id = ?", new Object[] {  new Long(camereCamId) } );
	}

	/** 
	 * Returns all rows from the camere_est_vista table that match the criteria 'sce_id = :sceId'.
	 */
	public CamereEstVista[] findWhereSceIdEquals(long sceId) throws CamereEstVistaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sce_id = ? ORDER BY sce_id", new Object[] {  new Long(sceId) } );
	}

	/** 
	 * Returns all rows from the camere_est_vista table that match the criteria 'sce_balcone = :sceBalcone'.
	 */
	public CamereEstVista[] findWhereSceBalconeEquals(String sceBalcone) throws CamereEstVistaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sce_balcone = ? ORDER BY sce_balcone", new Object[] { sceBalcone } );
	}

	/** 
	 * Returns all rows from the camere_est_vista table that match the criteria 'sce_patio = :scePatio'.
	 */
	public CamereEstVista[] findWhereScePatioEquals(String scePatio) throws CamereEstVistaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sce_patio = ? ORDER BY sce_patio", new Object[] { scePatio } );
	}

	/** 
	 * Returns all rows from the camere_est_vista table that match the criteria 'sce_vista = :sceVista'.
	 */
	public CamereEstVista[] findWhereSceVistaEquals(String sceVista) throws CamereEstVistaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sce_vista = ? ORDER BY sce_vista", new Object[] { sceVista } );
	}

	/** 
	 * Returns all rows from the camere_est_vista table that match the criteria 'sce_terrazza = :sceTerrazza'.
	 */
	public CamereEstVista[] findWhereSceTerrazzaEquals(String sceTerrazza) throws CamereEstVistaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sce_terrazza = ? ORDER BY sce_terrazza", new Object[] { sceTerrazza } );
	}

	/** 
	 * Returns all rows from the camere_est_vista table that match the criteria 'sce_vista_citta = :sceVistaCitta'.
	 */
	public CamereEstVista[] findWhereSceVistaCittaEquals(String sceVistaCitta) throws CamereEstVistaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sce_vista_citta = ? ORDER BY sce_vista_citta", new Object[] { sceVistaCitta } );
	}

	/** 
	 * Returns all rows from the camere_est_vista table that match the criteria 'sce_vista_giard = :sceVistaGiard'.
	 */
	public CamereEstVista[] findWhereSceVistaGiardEquals(String sceVistaGiard) throws CamereEstVistaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sce_vista_giard = ? ORDER BY sce_vista_giard", new Object[] { sceVistaGiard } );
	}

	/** 
	 * Returns all rows from the camere_est_vista table that match the criteria 'sce_vista_lago = :sceVistaLago'.
	 */
	public CamereEstVista[] findWhereSceVistaLagoEquals(String sceVistaLago) throws CamereEstVistaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sce_vista_lago = ? ORDER BY sce_vista_lago", new Object[] { sceVistaLago } );
	}

	/** 
	 * Returns all rows from the camere_est_vista table that match the criteria 'sce_vista_luogo = :sceVistaLuogo'.
	 */
	public CamereEstVista[] findWhereSceVistaLuogoEquals(String sceVistaLuogo) throws CamereEstVistaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sce_vista_luogo = ? ORDER BY sce_vista_luogo", new Object[] { sceVistaLuogo } );
	}

	/** 
	 * Returns all rows from the camere_est_vista table that match the criteria 'sce_vista_montagna = :sceVistaMontagna'.
	 */
	public CamereEstVista[] findWhereSceVistaMontagnaEquals(String sceVistaMontagna) throws CamereEstVistaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sce_vista_montagna = ? ORDER BY sce_vista_montagna", new Object[] { sceVistaMontagna } );
	}

	/** 
	 * Returns all rows from the camere_est_vista table that match the criteria 'sce_piscina = :scePiscina'.
	 */
	public CamereEstVista[] findWhereScePiscinaEquals(String scePiscina) throws CamereEstVistaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sce_piscina = ? ORDER BY sce_piscina", new Object[] { scePiscina } );
	}

	/** 
	 * Returns all rows from the camere_est_vista table that match the criteria 'sce_vista_fiume = :sceVistaFiume'.
	 */
	public CamereEstVista[] findWhereSceVistaFiumeEquals(String sceVistaFiume) throws CamereEstVistaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sce_vista_fiume = ? ORDER BY sce_vista_fiume", new Object[] { sceVistaFiume } );
	}

	/** 
	 * Returns all rows from the camere_est_vista table that match the criteria 'sce_vista_mare = :sceVistaMare'.
	 */
	public CamereEstVista[] findWhereSceVistaMareEquals(String sceVistaMare) throws CamereEstVistaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sce_vista_mare = ? ORDER BY sce_vista_mare", new Object[] { sceVistaMare } );
	}

	/** 
	 * Returns all rows from the camere_est_vista table that match the criteria 'sce_vista_cortile = :sceVistaCortile'.
	 */
	public CamereEstVista[] findWhereSceVistaCortileEquals(String sceVistaCortile) throws CamereEstVistaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sce_vista_cortile = ? ORDER BY sce_vista_cortile", new Object[] { sceVistaCortile } );
	}

	/** 
	 * Returns all rows from the camere_est_vista table that match the criteria 'sce_vista_strada = :sceVistaStrada'.
	 */
	public CamereEstVista[] findWhereSceVistaStradaEquals(String sceVistaStrada) throws CamereEstVistaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sce_vista_strada = ? ORDER BY sce_vista_strada", new Object[] { sceVistaStrada } );
	}

	/** 
	 * Returns all rows from the camere_est_vista table that match the criteria 'camere_cam_id = :camereCamId'.
	 */
	public CamereEstVista[] findWhereCamereCamIdEquals(long camereCamId) throws CamereEstVistaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE camere_cam_id = ? ORDER BY camere_cam_id", new Object[] {  new Long(camereCamId) } );
	}

	/**
	 * Method 'CamereEstVistaDaoImpl'
	 * 
	 */
	public CamereEstVistaDaoImpl()
	{
	}

	/**
	 * Method 'CamereEstVistaDaoImpl'
	 * 
	 * @param userConn
	 */
	public CamereEstVistaDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "camere_est_vista";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected CamereEstVista fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			CamereEstVista dto = new CamereEstVista();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected CamereEstVista[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			CamereEstVista dto = new CamereEstVista();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		CamereEstVista ret[] = new CamereEstVista[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(CamereEstVista dto, ResultSet rs) throws SQLException
	{
		dto.setSceId( rs.getLong( COLUMN_SCE_ID ) );
		dto.setSceBalcone( rs.getString( COLUMN_SCE_BALCONE ) );
		dto.setScePatio( rs.getString( COLUMN_SCE_PATIO ) );
		dto.setSceVista( rs.getString( COLUMN_SCE_VISTA ) );
		dto.setSceTerrazza( rs.getString( COLUMN_SCE_TERRAZZA ) );
		dto.setSceVistaCitta( rs.getString( COLUMN_SCE_VISTA_CITTA ) );
		dto.setSceVistaGiard( rs.getString( COLUMN_SCE_VISTA_GIARD ) );
		dto.setSceVistaLago( rs.getString( COLUMN_SCE_VISTA_LAGO ) );
		dto.setSceVistaLuogo( rs.getString( COLUMN_SCE_VISTA_LUOGO ) );
		dto.setSceVistaMontagna( rs.getString( COLUMN_SCE_VISTA_MONTAGNA ) );
		dto.setScePiscina( rs.getString( COLUMN_SCE_PISCINA ) );
		dto.setSceVistaFiume( rs.getString( COLUMN_SCE_VISTA_FIUME ) );
		dto.setSceVistaMare( rs.getString( COLUMN_SCE_VISTA_MARE ) );
		dto.setSceVistaCortile( rs.getString( COLUMN_SCE_VISTA_CORTILE ) );
		dto.setSceVistaStrada( rs.getString( COLUMN_SCE_VISTA_STRADA ) );
		dto.setCamereCamId( rs.getLong( COLUMN_CAMERE_CAM_ID ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(CamereEstVista dto)
	{
	}

	/** 
	 * Returns all rows from the camere_est_vista table that match the specified arbitrary SQL statement
	 */
	public CamereEstVista[] findByDynamicSelect(String sql, Object[] sqlParams) throws CamereEstVistaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CamereEstVistaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the camere_est_vista table that match the specified arbitrary SQL statement
	 */
	public CamereEstVista[] findByDynamicWhere(String sql, Object[] sqlParams) throws CamereEstVistaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CamereEstVistaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
