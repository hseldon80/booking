/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.jdbc;

import com.mysecretwish.dao.*;
import com.mysecretwish.factory.*;
import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class StrutturaSpaBenessereDaoImpl extends AbstractDAO implements StrutturaSpaBenessereDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ssp_id, ssp_spa_ben, ssp_costo, ssp_sauna, ssp_hammam, ssp_vasca_idro, ssp_palestra, ssp_solarium, ssp_vasca_term, ssp_massaggi, ssp_costo_mass, ssp_mass_schiena, ssp_mass_collo, ssp_mass_testa, ssp_mass_coppia, ssp_mass_corpo, ssp_mass_mani, ssp_vasca_com, ssp_vasca_aperto, struttura_str_id FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ssp_id, ssp_spa_ben, ssp_costo, ssp_sauna, ssp_hammam, ssp_vasca_idro, ssp_palestra, ssp_solarium, ssp_vasca_term, ssp_massaggi, ssp_costo_mass, ssp_mass_schiena, ssp_mass_collo, ssp_mass_testa, ssp_mass_coppia, ssp_mass_corpo, ssp_mass_mani, ssp_vasca_com, ssp_vasca_aperto, struttura_str_id ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ssp_id = ?, ssp_spa_ben = ?, ssp_costo = ?, ssp_sauna = ?, ssp_hammam = ?, ssp_vasca_idro = ?, ssp_palestra = ?, ssp_solarium = ?, ssp_vasca_term = ?, ssp_massaggi = ?, ssp_costo_mass = ?, ssp_mass_schiena = ?, ssp_mass_collo = ?, ssp_mass_testa = ?, ssp_mass_coppia = ?, ssp_mass_corpo = ?, ssp_mass_mani = ?, ssp_vasca_com = ?, ssp_vasca_aperto = ?, struttura_str_id = ? WHERE ssp_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ssp_id = ?";

	/** 
	 * Index of column ssp_id
	 */
	protected static final int COLUMN_SSP_ID = 1;

	/** 
	 * Index of column ssp_spa_ben
	 */
	protected static final int COLUMN_SSP_SPA_BEN = 2;

	/** 
	 * Index of column ssp_costo
	 */
	protected static final int COLUMN_SSP_COSTO = 3;

	/** 
	 * Index of column ssp_sauna
	 */
	protected static final int COLUMN_SSP_SAUNA = 4;

	/** 
	 * Index of column ssp_hammam
	 */
	protected static final int COLUMN_SSP_HAMMAM = 5;

	/** 
	 * Index of column ssp_vasca_idro
	 */
	protected static final int COLUMN_SSP_VASCA_IDRO = 6;

	/** 
	 * Index of column ssp_palestra
	 */
	protected static final int COLUMN_SSP_PALESTRA = 7;

	/** 
	 * Index of column ssp_solarium
	 */
	protected static final int COLUMN_SSP_SOLARIUM = 8;

	/** 
	 * Index of column ssp_vasca_term
	 */
	protected static final int COLUMN_SSP_VASCA_TERM = 9;

	/** 
	 * Index of column ssp_massaggi
	 */
	protected static final int COLUMN_SSP_MASSAGGI = 10;

	/** 
	 * Index of column ssp_costo_mass
	 */
	protected static final int COLUMN_SSP_COSTO_MASS = 11;

	/** 
	 * Index of column ssp_mass_schiena
	 */
	protected static final int COLUMN_SSP_MASS_SCHIENA = 12;

	/** 
	 * Index of column ssp_mass_collo
	 */
	protected static final int COLUMN_SSP_MASS_COLLO = 13;

	/** 
	 * Index of column ssp_mass_testa
	 */
	protected static final int COLUMN_SSP_MASS_TESTA = 14;

	/** 
	 * Index of column ssp_mass_coppia
	 */
	protected static final int COLUMN_SSP_MASS_COPPIA = 15;

	/** 
	 * Index of column ssp_mass_corpo
	 */
	protected static final int COLUMN_SSP_MASS_CORPO = 16;

	/** 
	 * Index of column ssp_mass_mani
	 */
	protected static final int COLUMN_SSP_MASS_MANI = 17;

	/** 
	 * Index of column ssp_vasca_com
	 */
	protected static final int COLUMN_SSP_VASCA_COM = 18;

	/** 
	 * Index of column ssp_vasca_aperto
	 */
	protected static final int COLUMN_SSP_VASCA_APERTO = 19;

	/** 
	 * Index of column struttura_str_id
	 */
	protected static final int COLUMN_STRUTTURA_STR_ID = 20;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 20;

	/** 
	 * Index of primary-key column ssp_id
	 */
	protected static final int PK_COLUMN_SSP_ID = 1;

	/** 
	 * Inserts a new row in the struttura_spa_benessere table.
	 */
	public StrutturaSpaBenesserePk insert(StrutturaSpaBenessere dto) throws StrutturaSpaBenessereDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_strutture')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setSspId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getSspId() );
			stmt.setString( index++, dto.getSspSpaBen() );
			stmt.setFloat( index++, dto.getSspCosto() );
			stmt.setString( index++, dto.getSspSauna() );
			stmt.setString( index++, dto.getSspHammam() );
			stmt.setString( index++, dto.getSspVascaIdro() );
			stmt.setString( index++, dto.getSspPalestra() );
			stmt.setString( index++, dto.getSspSolarium() );
			stmt.setString( index++, dto.getSspVascaTerm() );
			stmt.setString( index++, dto.getSspMassaggi() );
			stmt.setFloat( index++, dto.getSspCostoMass() );
			stmt.setString( index++, dto.getSspMassSchiena() );
			stmt.setString( index++, dto.getSspMassCollo() );
			stmt.setString( index++, dto.getSspMassTesta() );
			stmt.setString( index++, dto.getSspMassCoppia() );
			stmt.setString( index++, dto.getSspMassCorpo() );
			stmt.setString( index++, dto.getSspMassMani() );
			stmt.setString( index++, dto.getSspVascaCom() );
			stmt.setString( index++, dto.getSspVascaAperto() );
			stmt.setLong( index++, dto.getStrutturaStrId() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaSpaBenessereDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the struttura_spa_benessere table.
	 */
	public void update(StrutturaSpaBenesserePk pk, StrutturaSpaBenessere dto) throws StrutturaSpaBenessereDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getSspId() );
			stmt.setString( index++, dto.getSspSpaBen() );
			stmt.setFloat( index++, dto.getSspCosto() );
			stmt.setString( index++, dto.getSspSauna() );
			stmt.setString( index++, dto.getSspHammam() );
			stmt.setString( index++, dto.getSspVascaIdro() );
			stmt.setString( index++, dto.getSspPalestra() );
			stmt.setString( index++, dto.getSspSolarium() );
			stmt.setString( index++, dto.getSspVascaTerm() );
			stmt.setString( index++, dto.getSspMassaggi() );
			stmt.setFloat( index++, dto.getSspCostoMass() );
			stmt.setString( index++, dto.getSspMassSchiena() );
			stmt.setString( index++, dto.getSspMassCollo() );
			stmt.setString( index++, dto.getSspMassTesta() );
			stmt.setString( index++, dto.getSspMassCoppia() );
			stmt.setString( index++, dto.getSspMassCorpo() );
			stmt.setString( index++, dto.getSspMassMani() );
			stmt.setString( index++, dto.getSspVascaCom() );
			stmt.setString( index++, dto.getSspVascaAperto() );
			stmt.setLong( index++, dto.getStrutturaStrId() );
			stmt.setLong( 21, pk.getSspId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaSpaBenessereDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the struttura_spa_benessere table.
	 */
	public void delete(StrutturaSpaBenesserePk pk) throws StrutturaSpaBenessereDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getSspId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaSpaBenessereDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the struttura_spa_benessere table that matches the specified primary-key value.
	 */
	public StrutturaSpaBenessere findByPrimaryKey(StrutturaSpaBenesserePk pk) throws StrutturaSpaBenessereDaoException
	{
		return findByPrimaryKey( pk.getSspId() );
	}

	/** 
	 * Returns all rows from the struttura_spa_benessere table that match the criteria 'ssp_id = :sspId'.
	 */
	public StrutturaSpaBenessere findByPrimaryKey(long sspId) throws StrutturaSpaBenessereDaoException
	{
		StrutturaSpaBenessere ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ssp_id = ?", new Object[] {  new Long(sspId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the struttura_spa_benessere table that match the criteria ''.
	 */
	public StrutturaSpaBenessere[] findAll() throws StrutturaSpaBenessereDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ssp_id", null );
	}

	/** 
	 * Returns all rows from the struttura_spa_benessere table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaSpaBenessere[] findByStruttura(long strutturaStrId) throws StrutturaSpaBenessereDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_str_id = ?", new Object[] {  new Long(strutturaStrId) } );
	}

	/** 
	 * Returns all rows from the struttura_spa_benessere table that match the criteria 'ssp_id = :sspId'.
	 */
	public StrutturaSpaBenessere[] findWhereSspIdEquals(long sspId) throws StrutturaSpaBenessereDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssp_id = ? ORDER BY ssp_id", new Object[] {  new Long(sspId) } );
	}

	/** 
	 * Returns all rows from the struttura_spa_benessere table that match the criteria 'ssp_spa_ben = :sspSpaBen'.
	 */
	public StrutturaSpaBenessere[] findWhereSspSpaBenEquals(String sspSpaBen) throws StrutturaSpaBenessereDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssp_spa_ben = ? ORDER BY ssp_spa_ben", new Object[] { sspSpaBen } );
	}

	/** 
	 * Returns all rows from the struttura_spa_benessere table that match the criteria 'ssp_costo = :sspCosto'.
	 */
	public StrutturaSpaBenessere[] findWhereSspCostoEquals(float sspCosto) throws StrutturaSpaBenessereDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssp_costo = ? ORDER BY ssp_costo", new Object[] {  new Float(sspCosto) } );
	}

	/** 
	 * Returns all rows from the struttura_spa_benessere table that match the criteria 'ssp_sauna = :sspSauna'.
	 */
	public StrutturaSpaBenessere[] findWhereSspSaunaEquals(String sspSauna) throws StrutturaSpaBenessereDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssp_sauna = ? ORDER BY ssp_sauna", new Object[] { sspSauna } );
	}

	/** 
	 * Returns all rows from the struttura_spa_benessere table that match the criteria 'ssp_hammam = :sspHammam'.
	 */
	public StrutturaSpaBenessere[] findWhereSspHammamEquals(String sspHammam) throws StrutturaSpaBenessereDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssp_hammam = ? ORDER BY ssp_hammam", new Object[] { sspHammam } );
	}

	/** 
	 * Returns all rows from the struttura_spa_benessere table that match the criteria 'ssp_vasca_idro = :sspVascaIdro'.
	 */
	public StrutturaSpaBenessere[] findWhereSspVascaIdroEquals(String sspVascaIdro) throws StrutturaSpaBenessereDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssp_vasca_idro = ? ORDER BY ssp_vasca_idro", new Object[] { sspVascaIdro } );
	}

	/** 
	 * Returns all rows from the struttura_spa_benessere table that match the criteria 'ssp_palestra = :sspPalestra'.
	 */
	public StrutturaSpaBenessere[] findWhereSspPalestraEquals(String sspPalestra) throws StrutturaSpaBenessereDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssp_palestra = ? ORDER BY ssp_palestra", new Object[] { sspPalestra } );
	}

	/** 
	 * Returns all rows from the struttura_spa_benessere table that match the criteria 'ssp_solarium = :sspSolarium'.
	 */
	public StrutturaSpaBenessere[] findWhereSspSolariumEquals(String sspSolarium) throws StrutturaSpaBenessereDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssp_solarium = ? ORDER BY ssp_solarium", new Object[] { sspSolarium } );
	}

	/** 
	 * Returns all rows from the struttura_spa_benessere table that match the criteria 'ssp_vasca_term = :sspVascaTerm'.
	 */
	public StrutturaSpaBenessere[] findWhereSspVascaTermEquals(String sspVascaTerm) throws StrutturaSpaBenessereDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssp_vasca_term = ? ORDER BY ssp_vasca_term", new Object[] { sspVascaTerm } );
	}

	/** 
	 * Returns all rows from the struttura_spa_benessere table that match the criteria 'ssp_massaggi = :sspMassaggi'.
	 */
	public StrutturaSpaBenessere[] findWhereSspMassaggiEquals(String sspMassaggi) throws StrutturaSpaBenessereDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssp_massaggi = ? ORDER BY ssp_massaggi", new Object[] { sspMassaggi } );
	}

	/** 
	 * Returns all rows from the struttura_spa_benessere table that match the criteria 'ssp_costo_mass = :sspCostoMass'.
	 */
	public StrutturaSpaBenessere[] findWhereSspCostoMassEquals(float sspCostoMass) throws StrutturaSpaBenessereDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssp_costo_mass = ? ORDER BY ssp_costo_mass", new Object[] {  new Float(sspCostoMass) } );
	}

	/** 
	 * Returns all rows from the struttura_spa_benessere table that match the criteria 'ssp_mass_schiena = :sspMassSchiena'.
	 */
	public StrutturaSpaBenessere[] findWhereSspMassSchienaEquals(String sspMassSchiena) throws StrutturaSpaBenessereDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssp_mass_schiena = ? ORDER BY ssp_mass_schiena", new Object[] { sspMassSchiena } );
	}

	/** 
	 * Returns all rows from the struttura_spa_benessere table that match the criteria 'ssp_mass_collo = :sspMassCollo'.
	 */
	public StrutturaSpaBenessere[] findWhereSspMassColloEquals(String sspMassCollo) throws StrutturaSpaBenessereDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssp_mass_collo = ? ORDER BY ssp_mass_collo", new Object[] { sspMassCollo } );
	}

	/** 
	 * Returns all rows from the struttura_spa_benessere table that match the criteria 'ssp_mass_testa = :sspMassTesta'.
	 */
	public StrutturaSpaBenessere[] findWhereSspMassTestaEquals(String sspMassTesta) throws StrutturaSpaBenessereDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssp_mass_testa = ? ORDER BY ssp_mass_testa", new Object[] { sspMassTesta } );
	}

	/** 
	 * Returns all rows from the struttura_spa_benessere table that match the criteria 'ssp_mass_coppia = :sspMassCoppia'.
	 */
	public StrutturaSpaBenessere[] findWhereSspMassCoppiaEquals(String sspMassCoppia) throws StrutturaSpaBenessereDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssp_mass_coppia = ? ORDER BY ssp_mass_coppia", new Object[] { sspMassCoppia } );
	}

	/** 
	 * Returns all rows from the struttura_spa_benessere table that match the criteria 'ssp_mass_corpo = :sspMassCorpo'.
	 */
	public StrutturaSpaBenessere[] findWhereSspMassCorpoEquals(String sspMassCorpo) throws StrutturaSpaBenessereDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssp_mass_corpo = ? ORDER BY ssp_mass_corpo", new Object[] { sspMassCorpo } );
	}

	/** 
	 * Returns all rows from the struttura_spa_benessere table that match the criteria 'ssp_mass_mani = :sspMassMani'.
	 */
	public StrutturaSpaBenessere[] findWhereSspMassManiEquals(String sspMassMani) throws StrutturaSpaBenessereDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssp_mass_mani = ? ORDER BY ssp_mass_mani", new Object[] { sspMassMani } );
	}

	/** 
	 * Returns all rows from the struttura_spa_benessere table that match the criteria 'ssp_vasca_com = :sspVascaCom'.
	 */
	public StrutturaSpaBenessere[] findWhereSspVascaComEquals(String sspVascaCom) throws StrutturaSpaBenessereDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssp_vasca_com = ? ORDER BY ssp_vasca_com", new Object[] { sspVascaCom } );
	}

	/** 
	 * Returns all rows from the struttura_spa_benessere table that match the criteria 'ssp_vasca_aperto = :sspVascaAperto'.
	 */
	public StrutturaSpaBenessere[] findWhereSspVascaApertoEquals(String sspVascaAperto) throws StrutturaSpaBenessereDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssp_vasca_aperto = ? ORDER BY ssp_vasca_aperto", new Object[] { sspVascaAperto } );
	}

	/** 
	 * Returns all rows from the struttura_spa_benessere table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaSpaBenessere[] findWhereStrutturaStrIdEquals(long strutturaStrId) throws StrutturaSpaBenessereDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_str_id = ? ORDER BY struttura_str_id", new Object[] {  new Long(strutturaStrId) } );
	}

	/**
	 * Method 'StrutturaSpaBenessereDaoImpl'
	 * 
	 */
	public StrutturaSpaBenessereDaoImpl()
	{
	}

	/**
	 * Method 'StrutturaSpaBenessereDaoImpl'
	 * 
	 * @param userConn
	 */
	public StrutturaSpaBenessereDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "struttura_spa_benessere";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected StrutturaSpaBenessere fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			StrutturaSpaBenessere dto = new StrutturaSpaBenessere();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected StrutturaSpaBenessere[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			StrutturaSpaBenessere dto = new StrutturaSpaBenessere();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		StrutturaSpaBenessere ret[] = new StrutturaSpaBenessere[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(StrutturaSpaBenessere dto, ResultSet rs) throws SQLException
	{
		dto.setSspId( rs.getLong( COLUMN_SSP_ID ) );
		dto.setSspSpaBen( rs.getString( COLUMN_SSP_SPA_BEN ) );
		dto.setSspCosto( rs.getFloat( COLUMN_SSP_COSTO ) );
		dto.setSspSauna( rs.getString( COLUMN_SSP_SAUNA ) );
		dto.setSspHammam( rs.getString( COLUMN_SSP_HAMMAM ) );
		dto.setSspVascaIdro( rs.getString( COLUMN_SSP_VASCA_IDRO ) );
		dto.setSspPalestra( rs.getString( COLUMN_SSP_PALESTRA ) );
		dto.setSspSolarium( rs.getString( COLUMN_SSP_SOLARIUM ) );
		dto.setSspVascaTerm( rs.getString( COLUMN_SSP_VASCA_TERM ) );
		dto.setSspMassaggi( rs.getString( COLUMN_SSP_MASSAGGI ) );
		dto.setSspCostoMass( rs.getFloat( COLUMN_SSP_COSTO_MASS ) );
		dto.setSspMassSchiena( rs.getString( COLUMN_SSP_MASS_SCHIENA ) );
		dto.setSspMassCollo( rs.getString( COLUMN_SSP_MASS_COLLO ) );
		dto.setSspMassTesta( rs.getString( COLUMN_SSP_MASS_TESTA ) );
		dto.setSspMassCoppia( rs.getString( COLUMN_SSP_MASS_COPPIA ) );
		dto.setSspMassCorpo( rs.getString( COLUMN_SSP_MASS_CORPO ) );
		dto.setSspMassMani( rs.getString( COLUMN_SSP_MASS_MANI ) );
		dto.setSspVascaCom( rs.getString( COLUMN_SSP_VASCA_COM ) );
		dto.setSspVascaAperto( rs.getString( COLUMN_SSP_VASCA_APERTO ) );
		dto.setStrutturaStrId( rs.getLong( COLUMN_STRUTTURA_STR_ID ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(StrutturaSpaBenessere dto)
	{
	}

	/** 
	 * Returns all rows from the struttura_spa_benessere table that match the specified arbitrary SQL statement
	 */
	public StrutturaSpaBenessere[] findByDynamicSelect(String sql, Object[] sqlParams) throws StrutturaSpaBenessereDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaSpaBenessereDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the struttura_spa_benessere table that match the specified arbitrary SQL statement
	 */
	public StrutturaSpaBenessere[] findByDynamicWhere(String sql, Object[] sqlParams) throws StrutturaSpaBenessereDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaSpaBenessereDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
