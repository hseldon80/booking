/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.jdbc;

import com.mysecretwish.dao.*;
import com.mysecretwish.factory.*;
import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class CamereDaoImpl extends AbstractDAO implements CamereDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT cam_id, cam_nome, cam_capienza, struttura_str_id, cam_dimensione, tipologia_camere_id, cam_dimensione_um, cam_fumatori FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( cam_id, cam_nome, cam_capienza, struttura_str_id, cam_dimensione, tipologia_camere_id, cam_dimensione_um, cam_fumatori ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET cam_id = ?, cam_nome = ?, cam_capienza = ?, struttura_str_id = ?, cam_dimensione = ?, tipologia_camere_id = ?, cam_dimensione_um = ?, cam_fumatori = ? WHERE cam_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE cam_id = ?";

	/** 
	 * Index of column cam_id
	 */
	protected static final int COLUMN_CAM_ID = 1;

	/** 
	 * Index of column cam_nome
	 */
	protected static final int COLUMN_CAM_NOME = 2;

	/** 
	 * Index of column cam_capienza
	 */
	protected static final int COLUMN_CAM_CAPIENZA = 3;

	/** 
	 * Index of column struttura_str_id
	 */
	protected static final int COLUMN_STRUTTURA_STR_ID = 4;

	/** 
	 * Index of column cam_dimensione
	 */
	protected static final int COLUMN_CAM_DIMENSIONE = 5;

	/** 
	 * Index of column tipologia_camere_id
	 */
	protected static final int COLUMN_TIPOLOGIA_CAMERE_ID = 6;

	/** 
	 * Index of column cam_dimensione_um
	 */
	protected static final int COLUMN_CAM_DIMENSIONE_UM = 7;

	/** 
	 * Index of column cam_fumatori
	 */
	protected static final int COLUMN_CAM_FUMATORI = 8;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 8;

	/** 
	 * Index of primary-key column cam_id
	 */
	protected static final int PK_COLUMN_CAM_ID = 1;

	/** 
	 * Inserts a new row in the camere table.
	 */
	public CamerePk insert(Camere dto) throws CamereDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_camere')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setCamId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getCamId() );
			stmt.setString( index++, dto.getCamNome() );
			stmt.setInt( index++, dto.getCamCapienza() );
			stmt.setLong( index++, dto.getStrutturaStrId() );
			if (dto.isCamDimensioneNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCamDimensione() );
			}
		
			stmt.setLong( index++, dto.getTipologiaCamereId() );
			if (dto.isCamDimensioneUmNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getCamDimensioneUm() );
			}
		
			stmt.setString( index++, dto.getCamFumatori() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CamereDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the camere table.
	 */
	public void update(CamerePk pk, Camere dto) throws CamereDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getCamId() );
			stmt.setString( index++, dto.getCamNome() );
			stmt.setInt( index++, dto.getCamCapienza() );
			stmt.setLong( index++, dto.getStrutturaStrId() );
			if (dto.isCamDimensioneNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCamDimensione() );
			}
		
			stmt.setLong( index++, dto.getTipologiaCamereId() );
			if (dto.isCamDimensioneUmNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getCamDimensioneUm() );
			}
		
			stmt.setString( index++, dto.getCamFumatori() );
			stmt.setLong( 9, pk.getCamId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CamereDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the camere table.
	 */
	public void delete(CamerePk pk) throws CamereDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getCamId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CamereDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the camere table that matches the specified primary-key value.
	 */
	public Camere findByPrimaryKey(CamerePk pk) throws CamereDaoException
	{
		return findByPrimaryKey( pk.getCamId() );
	}

	/** 
	 * Returns all rows from the camere table that match the criteria 'cam_id = :camId'.
	 */
	public Camere findByPrimaryKey(long camId) throws CamereDaoException
	{
		Camere ret[] = findByDynamicSelect( SQL_SELECT + " WHERE cam_id = ?", new Object[] {  new Long(camId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the camere table that match the criteria ''.
	 */
	public Camere[] findAll() throws CamereDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY cam_id", null );
	}

	/** 
	 * Returns all rows from the camere table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public Camere[] findByStruttura(long strutturaStrId) throws CamereDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_str_id = ?", new Object[] {  new Long(strutturaStrId) } );
	}

	/** 
	 * Returns all rows from the camere table that match the criteria 'tipologia_camere_id = :tipologiaCamereId'.
	 */
	public Camere[] findByTipologiaCamere(long tipologiaCamereId) throws CamereDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE tipologia_camere_id = ?", new Object[] {  new Long(tipologiaCamereId) } );
	}

	/** 
	 * Returns all rows from the camere table that match the criteria 'cam_id = :camId'.
	 */
	public Camere[] findWhereCamIdEquals(long camId) throws CamereDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE cam_id = ? ORDER BY cam_id", new Object[] {  new Long(camId) } );
	}

	/** 
	 * Returns all rows from the camere table that match the criteria 'cam_nome = :camNome'.
	 */
	public Camere[] findWhereCamNomeEquals(String camNome) throws CamereDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE cam_nome = ? ORDER BY cam_nome", new Object[] { camNome } );
	}

	/** 
	 * Returns all rows from the camere table that match the criteria 'cam_capienza = :camCapienza'.
	 */
	public Camere[] findWhereCamCapienzaEquals(int camCapienza) throws CamereDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE cam_capienza = ? ORDER BY cam_capienza", new Object[] {  new Integer(camCapienza) } );
	}

	/** 
	 * Returns all rows from the camere table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public Camere[] findWhereStrutturaStrIdEquals(long strutturaStrId) throws CamereDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_str_id = ? ORDER BY struttura_str_id", new Object[] {  new Long(strutturaStrId) } );
	}

	/** 
	 * Returns all rows from the camere table that match the criteria 'cam_dimensione = :camDimensione'.
	 */
	public Camere[] findWhereCamDimensioneEquals(int camDimensione) throws CamereDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE cam_dimensione = ? ORDER BY cam_dimensione", new Object[] {  new Integer(camDimensione) } );
	}

	/** 
	 * Returns all rows from the camere table that match the criteria 'tipologia_camere_id = :tipologiaCamereId'.
	 */
	public Camere[] findWhereTipologiaCamereIdEquals(long tipologiaCamereId) throws CamereDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE tipologia_camere_id = ? ORDER BY tipologia_camere_id", new Object[] {  new Long(tipologiaCamereId) } );
	}

	/** 
	 * Returns all rows from the camere table that match the criteria 'cam_dimensione_um = :camDimensioneUm'.
	 */
	public Camere[] findWhereCamDimensioneUmEquals(long camDimensioneUm) throws CamereDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE cam_dimensione_um = ? ORDER BY cam_dimensione_um", new Object[] {  new Long(camDimensioneUm) } );
	}

	/** 
	 * Returns all rows from the camere table that match the criteria 'cam_fumatori = :camFumatori'.
	 */
	public Camere[] findWhereCamFumatoriEquals(String camFumatori) throws CamereDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE cam_fumatori = ? ORDER BY cam_fumatori", new Object[] { camFumatori } );
	}

	/**
	 * Method 'CamereDaoImpl'
	 * 
	 */
	public CamereDaoImpl()
	{
	}

	/**
	 * Method 'CamereDaoImpl'
	 * 
	 * @param userConn
	 */
	public CamereDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "camere";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Camere fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Camere dto = new Camere();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Camere[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Camere dto = new Camere();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Camere ret[] = new Camere[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Camere dto, ResultSet rs) throws SQLException
	{
		dto.setCamId( rs.getLong( COLUMN_CAM_ID ) );
		dto.setCamNome( rs.getString( COLUMN_CAM_NOME ) );
		dto.setCamCapienza( rs.getInt( COLUMN_CAM_CAPIENZA ) );
		dto.setStrutturaStrId( rs.getLong( COLUMN_STRUTTURA_STR_ID ) );
		dto.setCamDimensione( rs.getInt( COLUMN_CAM_DIMENSIONE ) );
		if (rs.wasNull()) {
			dto.setCamDimensioneNull( true );
		}
		
		dto.setTipologiaCamereId( rs.getLong( COLUMN_TIPOLOGIA_CAMERE_ID ) );
		dto.setCamDimensioneUm( rs.getLong( COLUMN_CAM_DIMENSIONE_UM ) );
		if (rs.wasNull()) {
			dto.setCamDimensioneUmNull( true );
		}
		
		dto.setCamFumatori( rs.getString( COLUMN_CAM_FUMATORI ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Camere dto)
	{
	}

	/** 
	 * Returns all rows from the camere table that match the specified arbitrary SQL statement
	 */
	public Camere[] findByDynamicSelect(String sql, Object[] sqlParams) throws CamereDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CamereDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the camere table that match the specified arbitrary SQL statement
	 */
	public Camere[] findByDynamicWhere(String sql, Object[] sqlParams) throws CamereDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CamereDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
