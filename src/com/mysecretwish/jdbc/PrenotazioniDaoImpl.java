/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.jdbc;

import com.mysecretwish.dao.*;
import com.mysecretwish.factory.*;
import java.util.Date;
import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class PrenotazioniDaoImpl extends AbstractDAO implements PrenotazioniDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT pre_id, pre_numero, pre_data, pre_num_adulti, pre_num_bamb, pre_checkout, pre_prezzo, pre_commissioni, pre_checkin, preventivi_pre_id, utente_ute_id, camere_cam_id FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( pre_id, pre_numero, pre_data, pre_num_adulti, pre_num_bamb, pre_checkout, pre_prezzo, pre_commissioni, pre_checkin, preventivi_pre_id, utente_ute_id, camere_cam_id ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET pre_id = ?, pre_numero = ?, pre_data = ?, pre_num_adulti = ?, pre_num_bamb = ?, pre_checkout = ?, pre_prezzo = ?, pre_commissioni = ?, pre_checkin = ?, preventivi_pre_id = ?, utente_ute_id = ?, camere_cam_id = ? WHERE pre_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE pre_id = ?";

	/** 
	 * Index of column pre_id
	 */
	protected static final int COLUMN_PRE_ID = 1;

	/** 
	 * Index of column pre_numero
	 */
	protected static final int COLUMN_PRE_NUMERO = 2;

	/** 
	 * Index of column pre_data
	 */
	protected static final int COLUMN_PRE_DATA = 3;

	/** 
	 * Index of column pre_num_adulti
	 */
	protected static final int COLUMN_PRE_NUM_ADULTI = 4;

	/** 
	 * Index of column pre_num_bamb
	 */
	protected static final int COLUMN_PRE_NUM_BAMB = 5;

	/** 
	 * Index of column pre_checkout
	 */
	protected static final int COLUMN_PRE_CHECKOUT = 6;

	/** 
	 * Index of column pre_prezzo
	 */
	protected static final int COLUMN_PRE_PREZZO = 7;

	/** 
	 * Index of column pre_commissioni
	 */
	protected static final int COLUMN_PRE_COMMISSIONI = 8;

	/** 
	 * Index of column pre_checkin
	 */
	protected static final int COLUMN_PRE_CHECKIN = 9;

	/** 
	 * Index of column preventivi_pre_id
	 */
	protected static final int COLUMN_PREVENTIVI_PRE_ID = 10;

	/** 
	 * Index of column utente_ute_id
	 */
	protected static final int COLUMN_UTENTE_UTE_ID = 11;

	/** 
	 * Index of column camere_cam_id
	 */
	protected static final int COLUMN_CAMERE_CAM_ID = 12;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 12;

	/** 
	 * Index of primary-key column pre_id
	 */
	protected static final int PK_COLUMN_PRE_ID = 1;

	/** 
	 * Inserts a new row in the prenotazioni table.
	 */
	public PrenotazioniPk insert(Prenotazioni dto) throws PrenotazioniDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_prenotazioni')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setPreId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getPreId() );
			stmt.setString( index++, dto.getPreNumero() );
			stmt.setDate(index++, dto.getPreData()==null ? null : new java.sql.Date( dto.getPreData().getTime() ) );
			stmt.setInt( index++, dto.getPreNumAdulti() );
			stmt.setInt( index++, dto.getPreNumBamb() );
			stmt.setDate(index++, dto.getPreCheckout()==null ? null : new java.sql.Date( dto.getPreCheckout().getTime() ) );
			stmt.setFloat( index++, dto.getPrePrezzo() );
			if (dto.isPreCommissioniNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getPreCommissioni() );
			}
		
			stmt.setDate(index++, dto.getPreCheckin()==null ? null : new java.sql.Date( dto.getPreCheckin().getTime() ) );
			stmt.setLong( index++, dto.getPreventiviPreId() );
			stmt.setLong( index++, dto.getUtenteUteId() );
			stmt.setLong( index++, dto.getCamereCamId() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PrenotazioniDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the prenotazioni table.
	 */
	public void update(PrenotazioniPk pk, Prenotazioni dto) throws PrenotazioniDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getPreId() );
			stmt.setString( index++, dto.getPreNumero() );
			stmt.setDate(index++, dto.getPreData()==null ? null : new java.sql.Date( dto.getPreData().getTime() ) );
			stmt.setInt( index++, dto.getPreNumAdulti() );
			stmt.setInt( index++, dto.getPreNumBamb() );
			stmt.setDate(index++, dto.getPreCheckout()==null ? null : new java.sql.Date( dto.getPreCheckout().getTime() ) );
			stmt.setFloat( index++, dto.getPrePrezzo() );
			if (dto.isPreCommissioniNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getPreCommissioni() );
			}
		
			stmt.setDate(index++, dto.getPreCheckin()==null ? null : new java.sql.Date( dto.getPreCheckin().getTime() ) );
			stmt.setLong( index++, dto.getPreventiviPreId() );
			stmt.setLong( index++, dto.getUtenteUteId() );
			stmt.setLong( index++, dto.getCamereCamId() );
			stmt.setLong( 13, pk.getPreId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PrenotazioniDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the prenotazioni table.
	 */
	public void delete(PrenotazioniPk pk) throws PrenotazioniDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getPreId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PrenotazioniDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the prenotazioni table that matches the specified primary-key value.
	 */
	public Prenotazioni findByPrimaryKey(PrenotazioniPk pk) throws PrenotazioniDaoException
	{
		return findByPrimaryKey( pk.getPreId() );
	}

	/** 
	 * Returns all rows from the prenotazioni table that match the criteria 'pre_id = :preId'.
	 */
	public Prenotazioni findByPrimaryKey(long preId) throws PrenotazioniDaoException
	{
		Prenotazioni ret[] = findByDynamicSelect( SQL_SELECT + " WHERE pre_id = ?", new Object[] {  new Long(preId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the prenotazioni table that match the criteria 'struttura_camere_cam_id = :strutturaCamereCamId'.
	 */
	public Prenotazioni[] findByStrutturaCamere(int strutturaCamereCamId) throws PrenotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_camere_cam_id = ?", new Object[] {  new Integer(strutturaCamereCamId) } );
	}

	/** 
	 * Returns all rows from the prenotazioni table that match the criteria 'struttura_camere_cam_id = :strutturaCamereCamId'.
	 */
	public Prenotazioni[] findWhereStrutturaCamereCamIdEquals(int strutturaCamereCamId) throws PrenotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_camere_cam_id = ? ORDER BY struttura_camere_cam_id", new Object[] {  new Integer(strutturaCamereCamId) } );
	}

	/** 
	 * Returns all rows from the prenotazioni table that match the criteria ''.
	 */
	public Prenotazioni[] findAll() throws PrenotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY pre_id", null );
	}

	/** 
	 * Returns all rows from the prenotazioni table that match the criteria 'camere_cam_id = :camereCamId'.
	 */
	public Prenotazioni[] findByCamere(long camereCamId) throws PrenotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE camere_cam_id = ?", new Object[] {  new Long(camereCamId) } );
	}

	/** 
	 * Returns all rows from the prenotazioni table that match the criteria 'preventivi_pre_id = :preventiviPreId'.
	 */
	public Prenotazioni[] findByPreventivi(long preventiviPreId) throws PrenotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE preventivi_pre_id = ?", new Object[] {  new Long(preventiviPreId) } );
	}

	/** 
	 * Returns all rows from the prenotazioni table that match the criteria 'utente_ute_id = :utenteUteId'.
	 */
	public Prenotazioni[] findByUtente(long utenteUteId) throws PrenotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE utente_ute_id = ?", new Object[] {  new Long(utenteUteId) } );
	}

	/** 
	 * Returns all rows from the prenotazioni table that match the criteria 'pre_id = :preId'.
	 */
	public Prenotazioni[] findWherePreIdEquals(long preId) throws PrenotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pre_id = ? ORDER BY pre_id", new Object[] {  new Long(preId) } );
	}

	/** 
	 * Returns all rows from the prenotazioni table that match the criteria 'pre_numero = :preNumero'.
	 */
	public Prenotazioni[] findWherePreNumeroEquals(String preNumero) throws PrenotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pre_numero = ? ORDER BY pre_numero", new Object[] { preNumero } );
	}

	/** 
	 * Returns all rows from the prenotazioni table that match the criteria 'pre_data = :preData'.
	 */
	public Prenotazioni[] findWherePreDataEquals(Date preData) throws PrenotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pre_data = ? ORDER BY pre_data", new Object[] { preData==null ? null : new java.sql.Date( preData.getTime() ) } );
	}

	/** 
	 * Returns all rows from the prenotazioni table that match the criteria 'pre_num_adulti = :preNumAdulti'.
	 */
	public Prenotazioni[] findWherePreNumAdultiEquals(int preNumAdulti) throws PrenotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pre_num_adulti = ? ORDER BY pre_num_adulti", new Object[] {  new Integer(preNumAdulti) } );
	}

	/** 
	 * Returns all rows from the prenotazioni table that match the criteria 'pre_num_bamb = :preNumBamb'.
	 */
	public Prenotazioni[] findWherePreNumBambEquals(int preNumBamb) throws PrenotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pre_num_bamb = ? ORDER BY pre_num_bamb", new Object[] {  new Integer(preNumBamb) } );
	}

	/** 
	 * Returns all rows from the prenotazioni table that match the criteria 'pre_checkout = :preCheckout'.
	 */
	public Prenotazioni[] findWherePreCheckoutEquals(Date preCheckout) throws PrenotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pre_checkout = ? ORDER BY pre_checkout", new Object[] { preCheckout==null ? null : new java.sql.Date( preCheckout.getTime() ) } );
	}

	/** 
	 * Returns all rows from the prenotazioni table that match the criteria 'pre_prezzo = :prePrezzo'.
	 */
	public Prenotazioni[] findWherePrePrezzoEquals(float prePrezzo) throws PrenotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pre_prezzo = ? ORDER BY pre_prezzo", new Object[] {  new Float(prePrezzo) } );
	}

	/** 
	 * Returns all rows from the prenotazioni table that match the criteria 'pre_commissioni = :preCommissioni'.
	 */
	public Prenotazioni[] findWherePreCommissioniEquals(float preCommissioni) throws PrenotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pre_commissioni = ? ORDER BY pre_commissioni", new Object[] {  new Float(preCommissioni) } );
	}

	/** 
	 * Returns all rows from the prenotazioni table that match the criteria 'pre_checkin = :preCheckin'.
	 */
	public Prenotazioni[] findWherePreCheckinEquals(Date preCheckin) throws PrenotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pre_checkin = ? ORDER BY pre_checkin", new Object[] { preCheckin==null ? null : new java.sql.Date( preCheckin.getTime() ) } );
	}

	/** 
	 * Returns all rows from the prenotazioni table that match the criteria 'preventivi_pre_id = :preventiviPreId'.
	 */
	public Prenotazioni[] findWherePreventiviPreIdEquals(long preventiviPreId) throws PrenotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE preventivi_pre_id = ? ORDER BY preventivi_pre_id", new Object[] {  new Long(preventiviPreId) } );
	}

	/** 
	 * Returns all rows from the prenotazioni table that match the criteria 'utente_ute_id = :utenteUteId'.
	 */
	public Prenotazioni[] findWhereUtenteUteIdEquals(long utenteUteId) throws PrenotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE utente_ute_id = ? ORDER BY utente_ute_id", new Object[] {  new Long(utenteUteId) } );
	}

	/** 
	 * Returns all rows from the prenotazioni table that match the criteria 'camere_cam_id = :camereCamId'.
	 */
	public Prenotazioni[] findWhereCamereCamIdEquals(long camereCamId) throws PrenotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE camere_cam_id = ? ORDER BY camere_cam_id", new Object[] {  new Long(camereCamId) } );
	}

	/**
	 * Method 'PrenotazioniDaoImpl'
	 * 
	 */
	public PrenotazioniDaoImpl()
	{
	}

	/**
	 * Method 'PrenotazioniDaoImpl'
	 * 
	 * @param userConn
	 */
	public PrenotazioniDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "prenotazioni";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Prenotazioni fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Prenotazioni dto = new Prenotazioni();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Prenotazioni[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Prenotazioni dto = new Prenotazioni();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Prenotazioni ret[] = new Prenotazioni[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Prenotazioni dto, ResultSet rs) throws SQLException
	{
		dto.setPreId( rs.getLong( COLUMN_PRE_ID ) );
		dto.setPreNumero( rs.getString( COLUMN_PRE_NUMERO ) );
		dto.setPreData( rs.getDate(COLUMN_PRE_DATA ) );
		dto.setPreNumAdulti( rs.getInt( COLUMN_PRE_NUM_ADULTI ) );
		dto.setPreNumBamb( rs.getInt( COLUMN_PRE_NUM_BAMB ) );
		dto.setPreCheckout( rs.getDate(COLUMN_PRE_CHECKOUT ) );
		dto.setPrePrezzo( rs.getFloat( COLUMN_PRE_PREZZO ) );
		dto.setPreCommissioni( rs.getFloat( COLUMN_PRE_COMMISSIONI ) );
		if (rs.wasNull()) {
			dto.setPreCommissioniNull( true );
		}
		
		dto.setPreCheckin( rs.getDate(COLUMN_PRE_CHECKIN ) );
		dto.setPreventiviPreId( rs.getLong( COLUMN_PREVENTIVI_PRE_ID ) );
		dto.setUtenteUteId( rs.getLong( COLUMN_UTENTE_UTE_ID ) );
		dto.setCamereCamId( rs.getLong( COLUMN_CAMERE_CAM_ID ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Prenotazioni dto)
	{
	}

	/** 
	 * Returns all rows from the prenotazioni table that match the specified arbitrary SQL statement
	 */
	public Prenotazioni[] findByDynamicSelect(String sql, Object[] sqlParams) throws PrenotazioniDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PrenotazioniDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the prenotazioni table that match the specified arbitrary SQL statement
	 */
	public Prenotazioni[] findByDynamicWhere(String sql, Object[] sqlParams) throws PrenotazioniDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PrenotazioniDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
