/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.jdbc;

import com.mysecretwish.dao.*;
import com.mysecretwish.factory.*;
import java.util.Date;
import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class StrutturaRestrizioniDaoImpl extends AbstractDAO implements StrutturaRestrizioniDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT res_id, res_data_inizio, res_data_fine, res_lunedi, res_martedi, res_mercoledi, res_giovedi, res_venerdi, res_sabato, res_domenica, res_soggiorno_minimo, res_chiuso_arrivo, res_chiuso_partenza, categorie_cat_id, tipologia_camere_tpc_id, struttura_str_id FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( res_id, res_data_inizio, res_data_fine, res_lunedi, res_martedi, res_mercoledi, res_giovedi, res_venerdi, res_sabato, res_domenica, res_soggiorno_minimo, res_chiuso_arrivo, res_chiuso_partenza, categorie_cat_id, tipologia_camere_tpc_id, struttura_str_id ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET res_id = ?, res_data_inizio = ?, res_data_fine = ?, res_lunedi = ?, res_martedi = ?, res_mercoledi = ?, res_giovedi = ?, res_venerdi = ?, res_sabato = ?, res_domenica = ?, res_soggiorno_minimo = ?, res_chiuso_arrivo = ?, res_chiuso_partenza = ?, categorie_cat_id = ?, tipologia_camere_tpc_id = ?, struttura_str_id = ? WHERE res_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE res_id = ?";

	/** 
	 * Index of column res_id
	 */
	protected static final int COLUMN_RES_ID = 1;

	/** 
	 * Index of column res_data_inizio
	 */
	protected static final int COLUMN_RES_DATA_INIZIO = 2;

	/** 
	 * Index of column res_data_fine
	 */
	protected static final int COLUMN_RES_DATA_FINE = 3;

	/** 
	 * Index of column res_lunedi
	 */
	protected static final int COLUMN_RES_LUNEDI = 4;

	/** 
	 * Index of column res_martedi
	 */
	protected static final int COLUMN_RES_MARTEDI = 5;

	/** 
	 * Index of column res_mercoledi
	 */
	protected static final int COLUMN_RES_MERCOLEDI = 6;

	/** 
	 * Index of column res_giovedi
	 */
	protected static final int COLUMN_RES_GIOVEDI = 7;

	/** 
	 * Index of column res_venerdi
	 */
	protected static final int COLUMN_RES_VENERDI = 8;

	/** 
	 * Index of column res_sabato
	 */
	protected static final int COLUMN_RES_SABATO = 9;

	/** 
	 * Index of column res_domenica
	 */
	protected static final int COLUMN_RES_DOMENICA = 10;

	/** 
	 * Index of column res_soggiorno_minimo
	 */
	protected static final int COLUMN_RES_SOGGIORNO_MINIMO = 11;

	/** 
	 * Index of column res_chiuso_arrivo
	 */
	protected static final int COLUMN_RES_CHIUSO_ARRIVO = 12;

	/** 
	 * Index of column res_chiuso_partenza
	 */
	protected static final int COLUMN_RES_CHIUSO_PARTENZA = 13;

	/** 
	 * Index of column categorie_cat_id
	 */
	protected static final int COLUMN_CATEGORIE_CAT_ID = 14;

	/** 
	 * Index of column tipologia_camere_tpc_id
	 */
	protected static final int COLUMN_TIPOLOGIA_CAMERE_TPC_ID = 15;

	/** 
	 * Index of column struttura_str_id
	 */
	protected static final int COLUMN_STRUTTURA_STR_ID = 16;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 16;

	/** 
	 * Index of primary-key column res_id
	 */
	protected static final int PK_COLUMN_RES_ID = 1;

	/** 
	 * Inserts a new row in the struttura_restrizioni table.
	 */
	public StrutturaRestrizioniPk insert(StrutturaRestrizioni dto) throws StrutturaRestrizioniDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_strutture')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setResId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getResId() );
			stmt.setDate(index++, dto.getResDataInizio()==null ? null : new java.sql.Date( dto.getResDataInizio().getTime() ) );
			stmt.setDate(index++, dto.getResDataFine()==null ? null : new java.sql.Date( dto.getResDataFine().getTime() ) );
			stmt.setString( index++, dto.getResLunedi() );
			stmt.setString( index++, dto.getResMartedi() );
			stmt.setString( index++, dto.getResMercoledi() );
			stmt.setString( index++, dto.getResGiovedi() );
			stmt.setString( index++, dto.getResVenerdi() );
			stmt.setString( index++, dto.getResSabato() );
			stmt.setString( index++, dto.getResDomenica() );
			if (dto.isResSoggiornoMinimoNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getResSoggiornoMinimo() );
			}
		
			stmt.setString( index++, dto.getResChiusoArrivo() );
			stmt.setString( index++, dto.getResChiusoPartenza() );
			stmt.setLong( index++, dto.getCategorieCatId() );
			stmt.setLong( index++, dto.getTipologiaCamereTpcId() );
			stmt.setLong( index++, dto.getStrutturaStrId() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaRestrizioniDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the struttura_restrizioni table.
	 */
	public void update(StrutturaRestrizioniPk pk, StrutturaRestrizioni dto) throws StrutturaRestrizioniDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getResId() );
			stmt.setDate(index++, dto.getResDataInizio()==null ? null : new java.sql.Date( dto.getResDataInizio().getTime() ) );
			stmt.setDate(index++, dto.getResDataFine()==null ? null : new java.sql.Date( dto.getResDataFine().getTime() ) );
			stmt.setString( index++, dto.getResLunedi() );
			stmt.setString( index++, dto.getResMartedi() );
			stmt.setString( index++, dto.getResMercoledi() );
			stmt.setString( index++, dto.getResGiovedi() );
			stmt.setString( index++, dto.getResVenerdi() );
			stmt.setString( index++, dto.getResSabato() );
			stmt.setString( index++, dto.getResDomenica() );
			if (dto.isResSoggiornoMinimoNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getResSoggiornoMinimo() );
			}
		
			stmt.setString( index++, dto.getResChiusoArrivo() );
			stmt.setString( index++, dto.getResChiusoPartenza() );
			stmt.setLong( index++, dto.getCategorieCatId() );
			stmt.setLong( index++, dto.getTipologiaCamereTpcId() );
			stmt.setLong( index++, dto.getStrutturaStrId() );
			stmt.setLong( 17, pk.getResId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaRestrizioniDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the struttura_restrizioni table.
	 */
	public void delete(StrutturaRestrizioniPk pk) throws StrutturaRestrizioniDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getResId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaRestrizioniDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the struttura_restrizioni table that matches the specified primary-key value.
	 */
	public StrutturaRestrizioni findByPrimaryKey(StrutturaRestrizioniPk pk) throws StrutturaRestrizioniDaoException
	{
		return findByPrimaryKey( pk.getResId() );
	}

	/** 
	 * Returns all rows from the struttura_restrizioni table that match the criteria 'res_id = :resId'.
	 */
	public StrutturaRestrizioni findByPrimaryKey(long resId) throws StrutturaRestrizioniDaoException
	{
		StrutturaRestrizioni ret[] = findByDynamicSelect( SQL_SELECT + " WHERE res_id = ?", new Object[] {  new Long(resId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the struttura_restrizioni table that match the criteria ''.
	 */
	public StrutturaRestrizioni[] findAll() throws StrutturaRestrizioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY res_id", null );
	}

	/** 
	 * Returns all rows from the struttura_restrizioni table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaRestrizioni[] findByStruttura(long strutturaStrId) throws StrutturaRestrizioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_str_id = ?", new Object[] {  new Long(strutturaStrId) } );
	}

	/** 
	 * Returns all rows from the struttura_restrizioni table that match the criteria 'tipologia_camere_tpc_id = :tipologiaCamereTpcId'.
	 */
	public StrutturaRestrizioni[] findByTipologiaCamere(long tipologiaCamereTpcId) throws StrutturaRestrizioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE tipologia_camere_tpc_id = ?", new Object[] {  new Long(tipologiaCamereTpcId) } );
	}

	/** 
	 * Returns all rows from the struttura_restrizioni table that match the criteria 'res_id = :resId'.
	 */
	public StrutturaRestrizioni[] findWhereResIdEquals(long resId) throws StrutturaRestrizioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE res_id = ? ORDER BY res_id", new Object[] {  new Long(resId) } );
	}

	/** 
	 * Returns all rows from the struttura_restrizioni table that match the criteria 'res_data_inizio = :resDataInizio'.
	 */
	public StrutturaRestrizioni[] findWhereResDataInizioEquals(Date resDataInizio) throws StrutturaRestrizioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE res_data_inizio = ? ORDER BY res_data_inizio", new Object[] { resDataInizio==null ? null : new java.sql.Date( resDataInizio.getTime() ) } );
	}

	/** 
	 * Returns all rows from the struttura_restrizioni table that match the criteria 'res_data_fine = :resDataFine'.
	 */
	public StrutturaRestrizioni[] findWhereResDataFineEquals(Date resDataFine) throws StrutturaRestrizioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE res_data_fine = ? ORDER BY res_data_fine", new Object[] { resDataFine==null ? null : new java.sql.Date( resDataFine.getTime() ) } );
	}

	/** 
	 * Returns all rows from the struttura_restrizioni table that match the criteria 'res_lunedi = :resLunedi'.
	 */
	public StrutturaRestrizioni[] findWhereResLunediEquals(String resLunedi) throws StrutturaRestrizioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE res_lunedi = ? ORDER BY res_lunedi", new Object[] { resLunedi } );
	}

	/** 
	 * Returns all rows from the struttura_restrizioni table that match the criteria 'res_martedi = :resMartedi'.
	 */
	public StrutturaRestrizioni[] findWhereResMartediEquals(String resMartedi) throws StrutturaRestrizioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE res_martedi = ? ORDER BY res_martedi", new Object[] { resMartedi } );
	}

	/** 
	 * Returns all rows from the struttura_restrizioni table that match the criteria 'res_mercoledi = :resMercoledi'.
	 */
	public StrutturaRestrizioni[] findWhereResMercolediEquals(String resMercoledi) throws StrutturaRestrizioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE res_mercoledi = ? ORDER BY res_mercoledi", new Object[] { resMercoledi } );
	}

	/** 
	 * Returns all rows from the struttura_restrizioni table that match the criteria 'res_giovedi = :resGiovedi'.
	 */
	public StrutturaRestrizioni[] findWhereResGiovediEquals(String resGiovedi) throws StrutturaRestrizioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE res_giovedi = ? ORDER BY res_giovedi", new Object[] { resGiovedi } );
	}

	/** 
	 * Returns all rows from the struttura_restrizioni table that match the criteria 'res_venerdi = :resVenerdi'.
	 */
	public StrutturaRestrizioni[] findWhereResVenerdiEquals(String resVenerdi) throws StrutturaRestrizioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE res_venerdi = ? ORDER BY res_venerdi", new Object[] { resVenerdi } );
	}

	/** 
	 * Returns all rows from the struttura_restrizioni table that match the criteria 'res_sabato = :resSabato'.
	 */
	public StrutturaRestrizioni[] findWhereResSabatoEquals(String resSabato) throws StrutturaRestrizioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE res_sabato = ? ORDER BY res_sabato", new Object[] { resSabato } );
	}

	/** 
	 * Returns all rows from the struttura_restrizioni table that match the criteria 'res_domenica = :resDomenica'.
	 */
	public StrutturaRestrizioni[] findWhereResDomenicaEquals(String resDomenica) throws StrutturaRestrizioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE res_domenica = ? ORDER BY res_domenica", new Object[] { resDomenica } );
	}

	/** 
	 * Returns all rows from the struttura_restrizioni table that match the criteria 'res_soggiorno_minimo = :resSoggiornoMinimo'.
	 */
	public StrutturaRestrizioni[] findWhereResSoggiornoMinimoEquals(int resSoggiornoMinimo) throws StrutturaRestrizioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE res_soggiorno_minimo = ? ORDER BY res_soggiorno_minimo", new Object[] {  new Integer(resSoggiornoMinimo) } );
	}

	/** 
	 * Returns all rows from the struttura_restrizioni table that match the criteria 'res_chiuso_arrivo = :resChiusoArrivo'.
	 */
	public StrutturaRestrizioni[] findWhereResChiusoArrivoEquals(String resChiusoArrivo) throws StrutturaRestrizioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE res_chiuso_arrivo = ? ORDER BY res_chiuso_arrivo", new Object[] { resChiusoArrivo } );
	}

	/** 
	 * Returns all rows from the struttura_restrizioni table that match the criteria 'res_chiuso_partenza = :resChiusoPartenza'.
	 */
	public StrutturaRestrizioni[] findWhereResChiusoPartenzaEquals(String resChiusoPartenza) throws StrutturaRestrizioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE res_chiuso_partenza = ? ORDER BY res_chiuso_partenza", new Object[] { resChiusoPartenza } );
	}

	/** 
	 * Returns all rows from the struttura_restrizioni table that match the criteria 'categorie_cat_id = :categorieCatId'.
	 */
	public StrutturaRestrizioni[] findWhereCategorieCatIdEquals(long categorieCatId) throws StrutturaRestrizioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE categorie_cat_id = ? ORDER BY categorie_cat_id", new Object[] {  new Long(categorieCatId) } );
	}

	/** 
	 * Returns all rows from the struttura_restrizioni table that match the criteria 'tipologia_camere_tpc_id = :tipologiaCamereTpcId'.
	 */
	public StrutturaRestrizioni[] findWhereTipologiaCamereTpcIdEquals(long tipologiaCamereTpcId) throws StrutturaRestrizioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE tipologia_camere_tpc_id = ? ORDER BY tipologia_camere_tpc_id", new Object[] {  new Long(tipologiaCamereTpcId) } );
	}

	/** 
	 * Returns all rows from the struttura_restrizioni table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaRestrizioni[] findWhereStrutturaStrIdEquals(long strutturaStrId) throws StrutturaRestrizioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_str_id = ? ORDER BY struttura_str_id", new Object[] {  new Long(strutturaStrId) } );
	}

	/**
	 * Method 'StrutturaRestrizioniDaoImpl'
	 * 
	 */
	public StrutturaRestrizioniDaoImpl()
	{
	}

	/**
	 * Method 'StrutturaRestrizioniDaoImpl'
	 * 
	 * @param userConn
	 */
	public StrutturaRestrizioniDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "struttura_restrizioni";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected StrutturaRestrizioni fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			StrutturaRestrizioni dto = new StrutturaRestrizioni();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected StrutturaRestrizioni[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			StrutturaRestrizioni dto = new StrutturaRestrizioni();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		StrutturaRestrizioni ret[] = new StrutturaRestrizioni[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(StrutturaRestrizioni dto, ResultSet rs) throws SQLException
	{
		dto.setResId( rs.getLong( COLUMN_RES_ID ) );
		dto.setResDataInizio( rs.getDate(COLUMN_RES_DATA_INIZIO ) );
		dto.setResDataFine( rs.getDate(COLUMN_RES_DATA_FINE ) );
		dto.setResLunedi( rs.getString( COLUMN_RES_LUNEDI ) );
		dto.setResMartedi( rs.getString( COLUMN_RES_MARTEDI ) );
		dto.setResMercoledi( rs.getString( COLUMN_RES_MERCOLEDI ) );
		dto.setResGiovedi( rs.getString( COLUMN_RES_GIOVEDI ) );
		dto.setResVenerdi( rs.getString( COLUMN_RES_VENERDI ) );
		dto.setResSabato( rs.getString( COLUMN_RES_SABATO ) );
		dto.setResDomenica( rs.getString( COLUMN_RES_DOMENICA ) );
		dto.setResSoggiornoMinimo( rs.getInt( COLUMN_RES_SOGGIORNO_MINIMO ) );
		if (rs.wasNull()) {
			dto.setResSoggiornoMinimoNull( true );
		}
		
		dto.setResChiusoArrivo( rs.getString( COLUMN_RES_CHIUSO_ARRIVO ) );
		dto.setResChiusoPartenza( rs.getString( COLUMN_RES_CHIUSO_PARTENZA ) );
		dto.setCategorieCatId( rs.getLong( COLUMN_CATEGORIE_CAT_ID ) );
		dto.setTipologiaCamereTpcId( rs.getLong( COLUMN_TIPOLOGIA_CAMERE_TPC_ID ) );
		dto.setStrutturaStrId( rs.getLong( COLUMN_STRUTTURA_STR_ID ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(StrutturaRestrizioni dto)
	{
	}

	/** 
	 * Returns all rows from the struttura_restrizioni table that match the specified arbitrary SQL statement
	 */
	public StrutturaRestrizioni[] findByDynamicSelect(String sql, Object[] sqlParams) throws StrutturaRestrizioniDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaRestrizioniDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the struttura_restrizioni table that match the specified arbitrary SQL statement
	 */
	public StrutturaRestrizioni[] findByDynamicWhere(String sql, Object[] sqlParams) throws StrutturaRestrizioniDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaRestrizioniDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
