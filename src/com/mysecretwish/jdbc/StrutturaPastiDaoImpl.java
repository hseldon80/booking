/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.jdbc;

import com.mysecretwish.dao.*;
import com.mysecretwish.factory.*;
import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class StrutturaPastiDaoImpl extends AbstractDAO implements StrutturaPastiDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT spa_id, spa_offre_col_pra_cen, spa_colazione_inclusa, spa_vendo_pasti_online, spe_prezzo_col_online, spe_prezzo_par_online, spe_prezzo_cen_online, spa_col_americana, spa_col_senza_glutine, spa_col_vegetariana, spa_col_asiatica, spa_col_halal, spa_col_vegana, spa_col_buffet, spa_col_italiana, spa_col_inglese, spa_col_continentale, spa_col_koser, struttura_str_id FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( spa_id, spa_offre_col_pra_cen, spa_colazione_inclusa, spa_vendo_pasti_online, spe_prezzo_col_online, spe_prezzo_par_online, spe_prezzo_cen_online, spa_col_americana, spa_col_senza_glutine, spa_col_vegetariana, spa_col_asiatica, spa_col_halal, spa_col_vegana, spa_col_buffet, spa_col_italiana, spa_col_inglese, spa_col_continentale, spa_col_koser, struttura_str_id ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET spa_id = ?, spa_offre_col_pra_cen = ?, spa_colazione_inclusa = ?, spa_vendo_pasti_online = ?, spe_prezzo_col_online = ?, spe_prezzo_par_online = ?, spe_prezzo_cen_online = ?, spa_col_americana = ?, spa_col_senza_glutine = ?, spa_col_vegetariana = ?, spa_col_asiatica = ?, spa_col_halal = ?, spa_col_vegana = ?, spa_col_buffet = ?, spa_col_italiana = ?, spa_col_inglese = ?, spa_col_continentale = ?, spa_col_koser = ?, struttura_str_id = ? WHERE spa_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE spa_id = ?";

	/** 
	 * Index of column spa_id
	 */
	protected static final int COLUMN_SPA_ID = 1;

	/** 
	 * Index of column spa_offre_col_pra_cen
	 */
	protected static final int COLUMN_SPA_OFFRE_COL_PRA_CEN = 2;

	/** 
	 * Index of column spa_colazione_inclusa
	 */
	protected static final int COLUMN_SPA_COLAZIONE_INCLUSA = 3;

	/** 
	 * Index of column spa_vendo_pasti_online
	 */
	protected static final int COLUMN_SPA_VENDO_PASTI_ONLINE = 4;

	/** 
	 * Index of column spe_prezzo_col_online
	 */
	protected static final int COLUMN_SPE_PREZZO_COL_ONLINE = 5;

	/** 
	 * Index of column spe_prezzo_par_online
	 */
	protected static final int COLUMN_SPE_PREZZO_PAR_ONLINE = 6;

	/** 
	 * Index of column spe_prezzo_cen_online
	 */
	protected static final int COLUMN_SPE_PREZZO_CEN_ONLINE = 7;

	/** 
	 * Index of column spa_col_americana
	 */
	protected static final int COLUMN_SPA_COL_AMERICANA = 8;

	/** 
	 * Index of column spa_col_senza_glutine
	 */
	protected static final int COLUMN_SPA_COL_SENZA_GLUTINE = 9;

	/** 
	 * Index of column spa_col_vegetariana
	 */
	protected static final int COLUMN_SPA_COL_VEGETARIANA = 10;

	/** 
	 * Index of column spa_col_asiatica
	 */
	protected static final int COLUMN_SPA_COL_ASIATICA = 11;

	/** 
	 * Index of column spa_col_halal
	 */
	protected static final int COLUMN_SPA_COL_HALAL = 12;

	/** 
	 * Index of column spa_col_vegana
	 */
	protected static final int COLUMN_SPA_COL_VEGANA = 13;

	/** 
	 * Index of column spa_col_buffet
	 */
	protected static final int COLUMN_SPA_COL_BUFFET = 14;

	/** 
	 * Index of column spa_col_italiana
	 */
	protected static final int COLUMN_SPA_COL_ITALIANA = 15;

	/** 
	 * Index of column spa_col_inglese
	 */
	protected static final int COLUMN_SPA_COL_INGLESE = 16;

	/** 
	 * Index of column spa_col_continentale
	 */
	protected static final int COLUMN_SPA_COL_CONTINENTALE = 17;

	/** 
	 * Index of column spa_col_koser
	 */
	protected static final int COLUMN_SPA_COL_KOSER = 18;

	/** 
	 * Index of column struttura_str_id
	 */
	protected static final int COLUMN_STRUTTURA_STR_ID = 19;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 19;

	/** 
	 * Index of primary-key column spa_id
	 */
	protected static final int PK_COLUMN_SPA_ID = 1;

	/** 
	 * Inserts a new row in the struttura_pasti table.
	 */
	public StrutturaPastiPk insert(StrutturaPasti dto) throws StrutturaPastiDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_strutture')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setSpaId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getSpaId() );
			stmt.setString( index++, dto.getSpaOffreColPraCen() );
			stmt.setString( index++, dto.getSpaColazioneInclusa() );
			stmt.setString( index++, dto.getSpaVendoPastiOnline() );
			if (dto.isSpePrezzoColOnlineNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getSpePrezzoColOnline() );
			}
		
			if (dto.isSpePrezzoParOnlineNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getSpePrezzoParOnline() );
			}
		
			if (dto.isSpePrezzoCenOnlineNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getSpePrezzoCenOnline() );
			}
		
			stmt.setString( index++, dto.getSpaColAmericana() );
			stmt.setString( index++, dto.getSpaColSenzaGlutine() );
			stmt.setString( index++, dto.getSpaColVegetariana() );
			stmt.setString( index++, dto.getSpaColAsiatica() );
			stmt.setString( index++, dto.getSpaColHalal() );
			stmt.setString( index++, dto.getSpaColVegana() );
			stmt.setString( index++, dto.getSpaColBuffet() );
			stmt.setString( index++, dto.getSpaColItaliana() );
			stmt.setString( index++, dto.getSpaColInglese() );
			stmt.setString( index++, dto.getSpaColContinentale() );
			stmt.setString( index++, dto.getSpaColKoser() );
			stmt.setLong( index++, dto.getStrutturaStrId() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaPastiDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the struttura_pasti table.
	 */
	public void update(StrutturaPastiPk pk, StrutturaPasti dto) throws StrutturaPastiDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getSpaId() );
			stmt.setString( index++, dto.getSpaOffreColPraCen() );
			stmt.setString( index++, dto.getSpaColazioneInclusa() );
			stmt.setString( index++, dto.getSpaVendoPastiOnline() );
			if (dto.isSpePrezzoColOnlineNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getSpePrezzoColOnline() );
			}
		
			if (dto.isSpePrezzoParOnlineNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getSpePrezzoParOnline() );
			}
		
			if (dto.isSpePrezzoCenOnlineNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getSpePrezzoCenOnline() );
			}
		
			stmt.setString( index++, dto.getSpaColAmericana() );
			stmt.setString( index++, dto.getSpaColSenzaGlutine() );
			stmt.setString( index++, dto.getSpaColVegetariana() );
			stmt.setString( index++, dto.getSpaColAsiatica() );
			stmt.setString( index++, dto.getSpaColHalal() );
			stmt.setString( index++, dto.getSpaColVegana() );
			stmt.setString( index++, dto.getSpaColBuffet() );
			stmt.setString( index++, dto.getSpaColItaliana() );
			stmt.setString( index++, dto.getSpaColInglese() );
			stmt.setString( index++, dto.getSpaColContinentale() );
			stmt.setString( index++, dto.getSpaColKoser() );
			stmt.setLong( index++, dto.getStrutturaStrId() );
			stmt.setLong( 20, pk.getSpaId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaPastiDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the struttura_pasti table.
	 */
	public void delete(StrutturaPastiPk pk) throws StrutturaPastiDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getSpaId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaPastiDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the struttura_pasti table that matches the specified primary-key value.
	 */
	public StrutturaPasti findByPrimaryKey(StrutturaPastiPk pk) throws StrutturaPastiDaoException
	{
		return findByPrimaryKey( pk.getSpaId() );
	}

	/** 
	 * Returns all rows from the struttura_pasti table that match the criteria 'spa_id = :spaId'.
	 */
	public StrutturaPasti findByPrimaryKey(long spaId) throws StrutturaPastiDaoException
	{
		StrutturaPasti ret[] = findByDynamicSelect( SQL_SELECT + " WHERE spa_id = ?", new Object[] {  new Long(spaId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the struttura_pasti table that match the criteria ''.
	 */
	public StrutturaPasti[] findAll() throws StrutturaPastiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY spa_id", null );
	}

	/** 
	 * Returns all rows from the struttura_pasti table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaPasti[] findByStruttura(long strutturaStrId) throws StrutturaPastiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_str_id = ?", new Object[] {  new Long(strutturaStrId) } );
	}

	/** 
	 * Returns all rows from the struttura_pasti table that match the criteria 'spa_id = :spaId'.
	 */
	public StrutturaPasti[] findWhereSpaIdEquals(long spaId) throws StrutturaPastiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spa_id = ? ORDER BY spa_id", new Object[] {  new Long(spaId) } );
	}

	/** 
	 * Returns all rows from the struttura_pasti table that match the criteria 'spa_offre_col_pra_cen = :spaOffreColPraCen'.
	 */
	public StrutturaPasti[] findWhereSpaOffreColPraCenEquals(String spaOffreColPraCen) throws StrutturaPastiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spa_offre_col_pra_cen = ? ORDER BY spa_offre_col_pra_cen", new Object[] { spaOffreColPraCen } );
	}

	/** 
	 * Returns all rows from the struttura_pasti table that match the criteria 'spa_colazione_inclusa = :spaColazioneInclusa'.
	 */
	public StrutturaPasti[] findWhereSpaColazioneInclusaEquals(String spaColazioneInclusa) throws StrutturaPastiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spa_colazione_inclusa = ? ORDER BY spa_colazione_inclusa", new Object[] { spaColazioneInclusa } );
	}

	/** 
	 * Returns all rows from the struttura_pasti table that match the criteria 'spa_vendo_pasti_online = :spaVendoPastiOnline'.
	 */
	public StrutturaPasti[] findWhereSpaVendoPastiOnlineEquals(String spaVendoPastiOnline) throws StrutturaPastiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spa_vendo_pasti_online = ? ORDER BY spa_vendo_pasti_online", new Object[] { spaVendoPastiOnline } );
	}

	/** 
	 * Returns all rows from the struttura_pasti table that match the criteria 'spe_prezzo_col_online = :spePrezzoColOnline'.
	 */
	public StrutturaPasti[] findWhereSpePrezzoColOnlineEquals(float spePrezzoColOnline) throws StrutturaPastiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spe_prezzo_col_online = ? ORDER BY spe_prezzo_col_online", new Object[] {  new Float(spePrezzoColOnline) } );
	}

	/** 
	 * Returns all rows from the struttura_pasti table that match the criteria 'spe_prezzo_par_online = :spePrezzoParOnline'.
	 */
	public StrutturaPasti[] findWhereSpePrezzoParOnlineEquals(float spePrezzoParOnline) throws StrutturaPastiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spe_prezzo_par_online = ? ORDER BY spe_prezzo_par_online", new Object[] {  new Float(spePrezzoParOnline) } );
	}

	/** 
	 * Returns all rows from the struttura_pasti table that match the criteria 'spe_prezzo_cen_online = :spePrezzoCenOnline'.
	 */
	public StrutturaPasti[] findWhereSpePrezzoCenOnlineEquals(float spePrezzoCenOnline) throws StrutturaPastiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spe_prezzo_cen_online = ? ORDER BY spe_prezzo_cen_online", new Object[] {  new Float(spePrezzoCenOnline) } );
	}

	/** 
	 * Returns all rows from the struttura_pasti table that match the criteria 'spa_col_americana = :spaColAmericana'.
	 */
	public StrutturaPasti[] findWhereSpaColAmericanaEquals(String spaColAmericana) throws StrutturaPastiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spa_col_americana = ? ORDER BY spa_col_americana", new Object[] { spaColAmericana } );
	}

	/** 
	 * Returns all rows from the struttura_pasti table that match the criteria 'spa_col_senza_glutine = :spaColSenzaGlutine'.
	 */
	public StrutturaPasti[] findWhereSpaColSenzaGlutineEquals(String spaColSenzaGlutine) throws StrutturaPastiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spa_col_senza_glutine = ? ORDER BY spa_col_senza_glutine", new Object[] { spaColSenzaGlutine } );
	}

	/** 
	 * Returns all rows from the struttura_pasti table that match the criteria 'spa_col_vegetariana = :spaColVegetariana'.
	 */
	public StrutturaPasti[] findWhereSpaColVegetarianaEquals(String spaColVegetariana) throws StrutturaPastiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spa_col_vegetariana = ? ORDER BY spa_col_vegetariana", new Object[] { spaColVegetariana } );
	}

	/** 
	 * Returns all rows from the struttura_pasti table that match the criteria 'spa_col_asiatica = :spaColAsiatica'.
	 */
	public StrutturaPasti[] findWhereSpaColAsiaticaEquals(String spaColAsiatica) throws StrutturaPastiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spa_col_asiatica = ? ORDER BY spa_col_asiatica", new Object[] { spaColAsiatica } );
	}

	/** 
	 * Returns all rows from the struttura_pasti table that match the criteria 'spa_col_halal = :spaColHalal'.
	 */
	public StrutturaPasti[] findWhereSpaColHalalEquals(String spaColHalal) throws StrutturaPastiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spa_col_halal = ? ORDER BY spa_col_halal", new Object[] { spaColHalal } );
	}

	/** 
	 * Returns all rows from the struttura_pasti table that match the criteria 'spa_col_vegana = :spaColVegana'.
	 */
	public StrutturaPasti[] findWhereSpaColVeganaEquals(String spaColVegana) throws StrutturaPastiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spa_col_vegana = ? ORDER BY spa_col_vegana", new Object[] { spaColVegana } );
	}

	/** 
	 * Returns all rows from the struttura_pasti table that match the criteria 'spa_col_buffet = :spaColBuffet'.
	 */
	public StrutturaPasti[] findWhereSpaColBuffetEquals(String spaColBuffet) throws StrutturaPastiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spa_col_buffet = ? ORDER BY spa_col_buffet", new Object[] { spaColBuffet } );
	}

	/** 
	 * Returns all rows from the struttura_pasti table that match the criteria 'spa_col_italiana = :spaColItaliana'.
	 */
	public StrutturaPasti[] findWhereSpaColItalianaEquals(String spaColItaliana) throws StrutturaPastiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spa_col_italiana = ? ORDER BY spa_col_italiana", new Object[] { spaColItaliana } );
	}

	/** 
	 * Returns all rows from the struttura_pasti table that match the criteria 'spa_col_inglese = :spaColInglese'.
	 */
	public StrutturaPasti[] findWhereSpaColIngleseEquals(String spaColInglese) throws StrutturaPastiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spa_col_inglese = ? ORDER BY spa_col_inglese", new Object[] { spaColInglese } );
	}

	/** 
	 * Returns all rows from the struttura_pasti table that match the criteria 'spa_col_continentale = :spaColContinentale'.
	 */
	public StrutturaPasti[] findWhereSpaColContinentaleEquals(String spaColContinentale) throws StrutturaPastiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spa_col_continentale = ? ORDER BY spa_col_continentale", new Object[] { spaColContinentale } );
	}

	/** 
	 * Returns all rows from the struttura_pasti table that match the criteria 'spa_col_koser = :spaColKoser'.
	 */
	public StrutturaPasti[] findWhereSpaColKoserEquals(String spaColKoser) throws StrutturaPastiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spa_col_koser = ? ORDER BY spa_col_koser", new Object[] { spaColKoser } );
	}

	/** 
	 * Returns all rows from the struttura_pasti table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaPasti[] findWhereStrutturaStrIdEquals(long strutturaStrId) throws StrutturaPastiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_str_id = ? ORDER BY struttura_str_id", new Object[] {  new Long(strutturaStrId) } );
	}

	/**
	 * Method 'StrutturaPastiDaoImpl'
	 * 
	 */
	public StrutturaPastiDaoImpl()
	{
	}

	/**
	 * Method 'StrutturaPastiDaoImpl'
	 * 
	 * @param userConn
	 */
	public StrutturaPastiDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "struttura_pasti";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected StrutturaPasti fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			StrutturaPasti dto = new StrutturaPasti();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected StrutturaPasti[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			StrutturaPasti dto = new StrutturaPasti();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		StrutturaPasti ret[] = new StrutturaPasti[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(StrutturaPasti dto, ResultSet rs) throws SQLException
	{
		dto.setSpaId( rs.getLong( COLUMN_SPA_ID ) );
		dto.setSpaOffreColPraCen( rs.getString( COLUMN_SPA_OFFRE_COL_PRA_CEN ) );
		dto.setSpaColazioneInclusa( rs.getString( COLUMN_SPA_COLAZIONE_INCLUSA ) );
		dto.setSpaVendoPastiOnline( rs.getString( COLUMN_SPA_VENDO_PASTI_ONLINE ) );
		dto.setSpePrezzoColOnline( rs.getFloat( COLUMN_SPE_PREZZO_COL_ONLINE ) );
		if (rs.wasNull()) {
			dto.setSpePrezzoColOnlineNull( true );
		}
		
		dto.setSpePrezzoParOnline( rs.getFloat( COLUMN_SPE_PREZZO_PAR_ONLINE ) );
		if (rs.wasNull()) {
			dto.setSpePrezzoParOnlineNull( true );
		}
		
		dto.setSpePrezzoCenOnline( rs.getFloat( COLUMN_SPE_PREZZO_CEN_ONLINE ) );
		if (rs.wasNull()) {
			dto.setSpePrezzoCenOnlineNull( true );
		}
		
		dto.setSpaColAmericana( rs.getString( COLUMN_SPA_COL_AMERICANA ) );
		dto.setSpaColSenzaGlutine( rs.getString( COLUMN_SPA_COL_SENZA_GLUTINE ) );
		dto.setSpaColVegetariana( rs.getString( COLUMN_SPA_COL_VEGETARIANA ) );
		dto.setSpaColAsiatica( rs.getString( COLUMN_SPA_COL_ASIATICA ) );
		dto.setSpaColHalal( rs.getString( COLUMN_SPA_COL_HALAL ) );
		dto.setSpaColVegana( rs.getString( COLUMN_SPA_COL_VEGANA ) );
		dto.setSpaColBuffet( rs.getString( COLUMN_SPA_COL_BUFFET ) );
		dto.setSpaColItaliana( rs.getString( COLUMN_SPA_COL_ITALIANA ) );
		dto.setSpaColInglese( rs.getString( COLUMN_SPA_COL_INGLESE ) );
		dto.setSpaColContinentale( rs.getString( COLUMN_SPA_COL_CONTINENTALE ) );
		dto.setSpaColKoser( rs.getString( COLUMN_SPA_COL_KOSER ) );
		dto.setStrutturaStrId( rs.getLong( COLUMN_STRUTTURA_STR_ID ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(StrutturaPasti dto)
	{
	}

	/** 
	 * Returns all rows from the struttura_pasti table that match the specified arbitrary SQL statement
	 */
	public StrutturaPasti[] findByDynamicSelect(String sql, Object[] sqlParams) throws StrutturaPastiDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaPastiDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the struttura_pasti table that match the specified arbitrary SQL statement
	 */
	public StrutturaPasti[] findByDynamicWhere(String sql, Object[] sqlParams) throws StrutturaPastiDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaPastiDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
