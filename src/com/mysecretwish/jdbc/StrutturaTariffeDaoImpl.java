/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.jdbc;

import com.mysecretwish.dao.*;
import com.mysecretwish.factory.*;
import java.util.Date;
import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class StrutturaTariffeDaoImpl extends AbstractDAO implements StrutturaTariffeDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT tar_id, tar_data_inizio, tar_data_fine, tar_lunedi, tar_martedi, tar_mercoledi, tar_giovedi, tar_venerdi, tar_sabato, tar_domenica, tar_tariffa_uso_sing, tar_tariffa_minima, tar_tariffa_standard, struttura_str_id, categorie_cat_id, tipologia_camere_tpc_id FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( tar_id, tar_data_inizio, tar_data_fine, tar_lunedi, tar_martedi, tar_mercoledi, tar_giovedi, tar_venerdi, tar_sabato, tar_domenica, tar_tariffa_uso_sing, tar_tariffa_minima, tar_tariffa_standard, struttura_str_id, categorie_cat_id, tipologia_camere_tpc_id ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET tar_id = ?, tar_data_inizio = ?, tar_data_fine = ?, tar_lunedi = ?, tar_martedi = ?, tar_mercoledi = ?, tar_giovedi = ?, tar_venerdi = ?, tar_sabato = ?, tar_domenica = ?, tar_tariffa_uso_sing = ?, tar_tariffa_minima = ?, tar_tariffa_standard = ?, struttura_str_id = ?, categorie_cat_id = ?, tipologia_camere_tpc_id = ? WHERE tar_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE tar_id = ?";

	/** 
	 * Index of column tar_id
	 */
	protected static final int COLUMN_TAR_ID = 1;

	/** 
	 * Index of column tar_data_inizio
	 */
	protected static final int COLUMN_TAR_DATA_INIZIO = 2;

	/** 
	 * Index of column tar_data_fine
	 */
	protected static final int COLUMN_TAR_DATA_FINE = 3;

	/** 
	 * Index of column tar_lunedi
	 */
	protected static final int COLUMN_TAR_LUNEDI = 4;

	/** 
	 * Index of column tar_martedi
	 */
	protected static final int COLUMN_TAR_MARTEDI = 5;

	/** 
	 * Index of column tar_mercoledi
	 */
	protected static final int COLUMN_TAR_MERCOLEDI = 6;

	/** 
	 * Index of column tar_giovedi
	 */
	protected static final int COLUMN_TAR_GIOVEDI = 7;

	/** 
	 * Index of column tar_venerdi
	 */
	protected static final int COLUMN_TAR_VENERDI = 8;

	/** 
	 * Index of column tar_sabato
	 */
	protected static final int COLUMN_TAR_SABATO = 9;

	/** 
	 * Index of column tar_domenica
	 */
	protected static final int COLUMN_TAR_DOMENICA = 10;

	/** 
	 * Index of column tar_tariffa_uso_sing
	 */
	protected static final int COLUMN_TAR_TARIFFA_USO_SING = 11;

	/** 
	 * Index of column tar_tariffa_minima
	 */
	protected static final int COLUMN_TAR_TARIFFA_MINIMA = 12;

	/** 
	 * Index of column tar_tariffa_standard
	 */
	protected static final int COLUMN_TAR_TARIFFA_STANDARD = 13;

	/** 
	 * Index of column struttura_str_id
	 */
	protected static final int COLUMN_STRUTTURA_STR_ID = 14;

	/** 
	 * Index of column categorie_cat_id
	 */
	protected static final int COLUMN_CATEGORIE_CAT_ID = 15;

	/** 
	 * Index of column tipologia_camere_tpc_id
	 */
	protected static final int COLUMN_TIPOLOGIA_CAMERE_TPC_ID = 16;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 16;

	/** 
	 * Index of primary-key column tar_id
	 */
	protected static final int PK_COLUMN_TAR_ID = 1;

	/** 
	 * Inserts a new row in the struttura_tariffe table.
	 */
	public StrutturaTariffePk insert(StrutturaTariffe dto) throws StrutturaTariffeDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_strutture')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setTarId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getTarId() );
			stmt.setDate(index++, dto.getTarDataInizio()==null ? null : new java.sql.Date( dto.getTarDataInizio().getTime() ) );
			stmt.setDate(index++, dto.getTarDataFine()==null ? null : new java.sql.Date( dto.getTarDataFine().getTime() ) );
			stmt.setString( index++, dto.getTarLunedi() );
			stmt.setString( index++, dto.getTarMartedi() );
			stmt.setString( index++, dto.getTarMercoledi() );
			stmt.setString( index++, dto.getTarGiovedi() );
			stmt.setString( index++, dto.getTarVenerdi() );
			stmt.setString( index++, dto.getTarSabato() );
			stmt.setString( index++, dto.getTarDomenica() );
			if (dto.isTarTariffaUsoSingNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getTarTariffaUsoSing() );
			}
		
			if (dto.isTarTariffaMinimaNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getTarTariffaMinima() );
			}
		
			if (dto.isTarTariffaStandardNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getTarTariffaStandard() );
			}
		
			stmt.setLong( index++, dto.getStrutturaStrId() );
			stmt.setLong( index++, dto.getCategorieCatId() );
			stmt.setLong( index++, dto.getTipologiaCamereTpcId() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaTariffeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the struttura_tariffe table.
	 */
	public void update(StrutturaTariffePk pk, StrutturaTariffe dto) throws StrutturaTariffeDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getTarId() );
			stmt.setDate(index++, dto.getTarDataInizio()==null ? null : new java.sql.Date( dto.getTarDataInizio().getTime() ) );
			stmt.setDate(index++, dto.getTarDataFine()==null ? null : new java.sql.Date( dto.getTarDataFine().getTime() ) );
			stmt.setString( index++, dto.getTarLunedi() );
			stmt.setString( index++, dto.getTarMartedi() );
			stmt.setString( index++, dto.getTarMercoledi() );
			stmt.setString( index++, dto.getTarGiovedi() );
			stmt.setString( index++, dto.getTarVenerdi() );
			stmt.setString( index++, dto.getTarSabato() );
			stmt.setString( index++, dto.getTarDomenica() );
			if (dto.isTarTariffaUsoSingNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getTarTariffaUsoSing() );
			}
		
			if (dto.isTarTariffaMinimaNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getTarTariffaMinima() );
			}
		
			if (dto.isTarTariffaStandardNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getTarTariffaStandard() );
			}
		
			stmt.setLong( index++, dto.getStrutturaStrId() );
			stmt.setLong( index++, dto.getCategorieCatId() );
			stmt.setLong( index++, dto.getTipologiaCamereTpcId() );
			stmt.setLong( 17, pk.getTarId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaTariffeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the struttura_tariffe table.
	 */
	public void delete(StrutturaTariffePk pk) throws StrutturaTariffeDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getTarId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaTariffeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the struttura_tariffe table that matches the specified primary-key value.
	 */
	public StrutturaTariffe findByPrimaryKey(StrutturaTariffePk pk) throws StrutturaTariffeDaoException
	{
		return findByPrimaryKey( pk.getTarId() );
	}

	/** 
	 * Returns all rows from the struttura_tariffe table that match the criteria 'tar_id = :tarId'.
	 */
	public StrutturaTariffe findByPrimaryKey(long tarId) throws StrutturaTariffeDaoException
	{
		StrutturaTariffe ret[] = findByDynamicSelect( SQL_SELECT + " WHERE tar_id = ?", new Object[] {  new Long(tarId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the struttura_tariffe table that match the criteria ''.
	 */
	public StrutturaTariffe[] findAll() throws StrutturaTariffeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY tar_id", null );
	}

	/** 
	 * Returns all rows from the struttura_tariffe table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaTariffe[] findByStruttura(long strutturaStrId) throws StrutturaTariffeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_str_id = ?", new Object[] {  new Long(strutturaStrId) } );
	}

	/** 
	 * Returns all rows from the struttura_tariffe table that match the criteria 'tipologia_camere_tpc_id = :tipologiaCamereTpcId'.
	 */
	public StrutturaTariffe[] findByTipologiaCamere(long tipologiaCamereTpcId) throws StrutturaTariffeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE tipologia_camere_tpc_id = ?", new Object[] {  new Long(tipologiaCamereTpcId) } );
	}

	/** 
	 * Returns all rows from the struttura_tariffe table that match the criteria 'tar_id = :tarId'.
	 */
	public StrutturaTariffe[] findWhereTarIdEquals(long tarId) throws StrutturaTariffeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE tar_id = ? ORDER BY tar_id", new Object[] {  new Long(tarId) } );
	}

	/** 
	 * Returns all rows from the struttura_tariffe table that match the criteria 'tar_data_inizio = :tarDataInizio'.
	 */
	public StrutturaTariffe[] findWhereTarDataInizioEquals(Date tarDataInizio) throws StrutturaTariffeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE tar_data_inizio = ? ORDER BY tar_data_inizio", new Object[] { tarDataInizio==null ? null : new java.sql.Date( tarDataInizio.getTime() ) } );
	}

	/** 
	 * Returns all rows from the struttura_tariffe table that match the criteria 'tar_data_fine = :tarDataFine'.
	 */
	public StrutturaTariffe[] findWhereTarDataFineEquals(Date tarDataFine) throws StrutturaTariffeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE tar_data_fine = ? ORDER BY tar_data_fine", new Object[] { tarDataFine==null ? null : new java.sql.Date( tarDataFine.getTime() ) } );
	}

	/** 
	 * Returns all rows from the struttura_tariffe table that match the criteria 'tar_lunedi = :tarLunedi'.
	 */
	public StrutturaTariffe[] findWhereTarLunediEquals(String tarLunedi) throws StrutturaTariffeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE tar_lunedi = ? ORDER BY tar_lunedi", new Object[] { tarLunedi } );
	}

	/** 
	 * Returns all rows from the struttura_tariffe table that match the criteria 'tar_martedi = :tarMartedi'.
	 */
	public StrutturaTariffe[] findWhereTarMartediEquals(String tarMartedi) throws StrutturaTariffeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE tar_martedi = ? ORDER BY tar_martedi", new Object[] { tarMartedi } );
	}

	/** 
	 * Returns all rows from the struttura_tariffe table that match the criteria 'tar_mercoledi = :tarMercoledi'.
	 */
	public StrutturaTariffe[] findWhereTarMercolediEquals(String tarMercoledi) throws StrutturaTariffeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE tar_mercoledi = ? ORDER BY tar_mercoledi", new Object[] { tarMercoledi } );
	}

	/** 
	 * Returns all rows from the struttura_tariffe table that match the criteria 'tar_giovedi = :tarGiovedi'.
	 */
	public StrutturaTariffe[] findWhereTarGiovediEquals(String tarGiovedi) throws StrutturaTariffeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE tar_giovedi = ? ORDER BY tar_giovedi", new Object[] { tarGiovedi } );
	}

	/** 
	 * Returns all rows from the struttura_tariffe table that match the criteria 'tar_venerdi = :tarVenerdi'.
	 */
	public StrutturaTariffe[] findWhereTarVenerdiEquals(String tarVenerdi) throws StrutturaTariffeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE tar_venerdi = ? ORDER BY tar_venerdi", new Object[] { tarVenerdi } );
	}

	/** 
	 * Returns all rows from the struttura_tariffe table that match the criteria 'tar_sabato = :tarSabato'.
	 */
	public StrutturaTariffe[] findWhereTarSabatoEquals(String tarSabato) throws StrutturaTariffeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE tar_sabato = ? ORDER BY tar_sabato", new Object[] { tarSabato } );
	}

	/** 
	 * Returns all rows from the struttura_tariffe table that match the criteria 'tar_domenica = :tarDomenica'.
	 */
	public StrutturaTariffe[] findWhereTarDomenicaEquals(String tarDomenica) throws StrutturaTariffeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE tar_domenica = ? ORDER BY tar_domenica", new Object[] { tarDomenica } );
	}

	/** 
	 * Returns all rows from the struttura_tariffe table that match the criteria 'tar_tariffa_uso_sing = :tarTariffaUsoSing'.
	 */
	public StrutturaTariffe[] findWhereTarTariffaUsoSingEquals(float tarTariffaUsoSing) throws StrutturaTariffeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE tar_tariffa_uso_sing = ? ORDER BY tar_tariffa_uso_sing", new Object[] {  new Float(tarTariffaUsoSing) } );
	}

	/** 
	 * Returns all rows from the struttura_tariffe table that match the criteria 'tar_tariffa_minima = :tarTariffaMinima'.
	 */
	public StrutturaTariffe[] findWhereTarTariffaMinimaEquals(float tarTariffaMinima) throws StrutturaTariffeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE tar_tariffa_minima = ? ORDER BY tar_tariffa_minima", new Object[] {  new Float(tarTariffaMinima) } );
	}

	/** 
	 * Returns all rows from the struttura_tariffe table that match the criteria 'tar_tariffa_standard = :tarTariffaStandard'.
	 */
	public StrutturaTariffe[] findWhereTarTariffaStandardEquals(float tarTariffaStandard) throws StrutturaTariffeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE tar_tariffa_standard = ? ORDER BY tar_tariffa_standard", new Object[] {  new Float(tarTariffaStandard) } );
	}

	/** 
	 * Returns all rows from the struttura_tariffe table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaTariffe[] findWhereStrutturaStrIdEquals(long strutturaStrId) throws StrutturaTariffeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_str_id = ? ORDER BY struttura_str_id", new Object[] {  new Long(strutturaStrId) } );
	}

	/** 
	 * Returns all rows from the struttura_tariffe table that match the criteria 'categorie_cat_id = :categorieCatId'.
	 */
	public StrutturaTariffe[] findWhereCategorieCatIdEquals(long categorieCatId) throws StrutturaTariffeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE categorie_cat_id = ? ORDER BY categorie_cat_id", new Object[] {  new Long(categorieCatId) } );
	}

	/** 
	 * Returns all rows from the struttura_tariffe table that match the criteria 'tipologia_camere_tpc_id = :tipologiaCamereTpcId'.
	 */
	public StrutturaTariffe[] findWhereTipologiaCamereTpcIdEquals(long tipologiaCamereTpcId) throws StrutturaTariffeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE tipologia_camere_tpc_id = ? ORDER BY tipologia_camere_tpc_id", new Object[] {  new Long(tipologiaCamereTpcId) } );
	}

	/**
	 * Method 'StrutturaTariffeDaoImpl'
	 * 
	 */
	public StrutturaTariffeDaoImpl()
	{
	}

	/**
	 * Method 'StrutturaTariffeDaoImpl'
	 * 
	 * @param userConn
	 */
	public StrutturaTariffeDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "struttura_tariffe";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected StrutturaTariffe fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			StrutturaTariffe dto = new StrutturaTariffe();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected StrutturaTariffe[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			StrutturaTariffe dto = new StrutturaTariffe();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		StrutturaTariffe ret[] = new StrutturaTariffe[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(StrutturaTariffe dto, ResultSet rs) throws SQLException
	{
		dto.setTarId( rs.getLong( COLUMN_TAR_ID ) );
		dto.setTarDataInizio( rs.getDate(COLUMN_TAR_DATA_INIZIO ) );
		dto.setTarDataFine( rs.getDate(COLUMN_TAR_DATA_FINE ) );
		dto.setTarLunedi( rs.getString( COLUMN_TAR_LUNEDI ) );
		dto.setTarMartedi( rs.getString( COLUMN_TAR_MARTEDI ) );
		dto.setTarMercoledi( rs.getString( COLUMN_TAR_MERCOLEDI ) );
		dto.setTarGiovedi( rs.getString( COLUMN_TAR_GIOVEDI ) );
		dto.setTarVenerdi( rs.getString( COLUMN_TAR_VENERDI ) );
		dto.setTarSabato( rs.getString( COLUMN_TAR_SABATO ) );
		dto.setTarDomenica( rs.getString( COLUMN_TAR_DOMENICA ) );
		dto.setTarTariffaUsoSing( rs.getFloat( COLUMN_TAR_TARIFFA_USO_SING ) );
		if (rs.wasNull()) {
			dto.setTarTariffaUsoSingNull( true );
		}
		
		dto.setTarTariffaMinima( rs.getFloat( COLUMN_TAR_TARIFFA_MINIMA ) );
		if (rs.wasNull()) {
			dto.setTarTariffaMinimaNull( true );
		}
		
		dto.setTarTariffaStandard( rs.getFloat( COLUMN_TAR_TARIFFA_STANDARD ) );
		if (rs.wasNull()) {
			dto.setTarTariffaStandardNull( true );
		}
		
		dto.setStrutturaStrId( rs.getLong( COLUMN_STRUTTURA_STR_ID ) );
		dto.setCategorieCatId( rs.getLong( COLUMN_CATEGORIE_CAT_ID ) );
		dto.setTipologiaCamereTpcId( rs.getLong( COLUMN_TIPOLOGIA_CAMERE_TPC_ID ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(StrutturaTariffe dto)
	{
	}

	/** 
	 * Returns all rows from the struttura_tariffe table that match the specified arbitrary SQL statement
	 */
	public StrutturaTariffe[] findByDynamicSelect(String sql, Object[] sqlParams) throws StrutturaTariffeDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaTariffeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the struttura_tariffe table that match the specified arbitrary SQL statement
	 */
	public StrutturaTariffe[] findByDynamicWhere(String sql, Object[] sqlParams) throws StrutturaTariffeDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaTariffeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
