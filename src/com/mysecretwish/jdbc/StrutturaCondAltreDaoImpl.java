/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.jdbc;

import com.mysecretwish.dao.*;
import com.mysecretwish.factory.*;
import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class StrutturaCondAltreDaoImpl extends AbstractDAO implements StrutturaCondAltreDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT sca_id, sca_ospita_bamb, sca_bamb_in_letti, sca_letti_agg, scp_checkin_dalle, scp_checkin_alle, scp_checkout_dalle, scp_checkout_alle, sca_pren_no_indirizzo, sca_pren_no_tel, struttura_str_id, scp_internet, scp_parcheggio, scp_animali FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( sca_id, sca_ospita_bamb, sca_bamb_in_letti, sca_letti_agg, scp_checkin_dalle, scp_checkin_alle, scp_checkout_dalle, scp_checkout_alle, sca_pren_no_indirizzo, sca_pren_no_tel, struttura_str_id, scp_internet, scp_parcheggio, scp_animali ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET sca_id = ?, sca_ospita_bamb = ?, sca_bamb_in_letti = ?, sca_letti_agg = ?, scp_checkin_dalle = ?, scp_checkin_alle = ?, scp_checkout_dalle = ?, scp_checkout_alle = ?, sca_pren_no_indirizzo = ?, sca_pren_no_tel = ?, struttura_str_id = ?, scp_internet = ?, scp_parcheggio = ?, scp_animali = ? WHERE sca_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE sca_id = ?";

	/** 
	 * Index of column sca_id
	 */
	protected static final int COLUMN_SCA_ID = 1;

	/** 
	 * Index of column sca_ospita_bamb
	 */
	protected static final int COLUMN_SCA_OSPITA_BAMB = 2;

	/** 
	 * Index of column sca_bamb_in_letti
	 */
	protected static final int COLUMN_SCA_BAMB_IN_LETTI = 3;

	/** 
	 * Index of column sca_letti_agg
	 */
	protected static final int COLUMN_SCA_LETTI_AGG = 4;

	/** 
	 * Index of column scp_checkin_dalle
	 */
	protected static final int COLUMN_SCP_CHECKIN_DALLE = 5;

	/** 
	 * Index of column scp_checkin_alle
	 */
	protected static final int COLUMN_SCP_CHECKIN_ALLE = 6;

	/** 
	 * Index of column scp_checkout_dalle
	 */
	protected static final int COLUMN_SCP_CHECKOUT_DALLE = 7;

	/** 
	 * Index of column scp_checkout_alle
	 */
	protected static final int COLUMN_SCP_CHECKOUT_ALLE = 8;

	/** 
	 * Index of column sca_pren_no_indirizzo
	 */
	protected static final int COLUMN_SCA_PREN_NO_INDIRIZZO = 9;

	/** 
	 * Index of column sca_pren_no_tel
	 */
	protected static final int COLUMN_SCA_PREN_NO_TEL = 10;

	/** 
	 * Index of column struttura_str_id
	 */
	protected static final int COLUMN_STRUTTURA_STR_ID = 11;

	/** 
	 * Index of column scp_internet
	 */
	protected static final int COLUMN_SCP_INTERNET = 12;

	/** 
	 * Index of column scp_parcheggio
	 */
	protected static final int COLUMN_SCP_PARCHEGGIO = 13;

	/** 
	 * Index of column scp_animali
	 */
	protected static final int COLUMN_SCP_ANIMALI = 14;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 14;

	/** 
	 * Index of primary-key column sca_id
	 */
	protected static final int PK_COLUMN_SCA_ID = 1;

	/** 
	 * Inserts a new row in the struttura_cond_altre table.
	 */
	public StrutturaCondAltrePk insert(StrutturaCondAltre dto) throws StrutturaCondAltreDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_strutture')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setScaId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getScaId() );
			stmt.setString( index++, dto.getScaOspitaBamb() );
			stmt.setString( index++, dto.getScaBambInLetti() );
			stmt.setString( index++, dto.getScaLettiAgg() );
			stmt.setString( index++, dto.getScpCheckinDalle() );
			stmt.setString( index++, dto.getScpCheckinAlle() );
			stmt.setString( index++, dto.getScpCheckoutDalle() );
			stmt.setString( index++, dto.getScpCheckoutAlle() );
			stmt.setString( index++, dto.getScaPrenNoIndirizzo() );
			stmt.setString( index++, dto.getScaPrenNoTel() );
			stmt.setLong( index++, dto.getStrutturaStrId() );
			if (dto.isScpInternetNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getScpInternet() );
			}
		
			if (dto.isScpParcheggioNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getScpParcheggio() );
			}
		
			if (dto.isScpAnimaliNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getScpAnimali() );
			}
		
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaCondAltreDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the struttura_cond_altre table.
	 */
	public void update(StrutturaCondAltrePk pk, StrutturaCondAltre dto) throws StrutturaCondAltreDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getScaId() );
			stmt.setString( index++, dto.getScaOspitaBamb() );
			stmt.setString( index++, dto.getScaBambInLetti() );
			stmt.setString( index++, dto.getScaLettiAgg() );
			stmt.setString( index++, dto.getScpCheckinDalle() );
			stmt.setString( index++, dto.getScpCheckinAlle() );
			stmt.setString( index++, dto.getScpCheckoutDalle() );
			stmt.setString( index++, dto.getScpCheckoutAlle() );
			stmt.setString( index++, dto.getScaPrenNoIndirizzo() );
			stmt.setString( index++, dto.getScaPrenNoTel() );
			stmt.setLong( index++, dto.getStrutturaStrId() );
			if (dto.isScpInternetNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getScpInternet() );
			}
		
			if (dto.isScpParcheggioNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getScpParcheggio() );
			}
		
			if (dto.isScpAnimaliNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getScpAnimali() );
			}
		
			stmt.setLong( 15, pk.getScaId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaCondAltreDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the struttura_cond_altre table.
	 */
	public void delete(StrutturaCondAltrePk pk) throws StrutturaCondAltreDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getScaId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaCondAltreDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the struttura_cond_altre table that matches the specified primary-key value.
	 */
	public StrutturaCondAltre findByPrimaryKey(StrutturaCondAltrePk pk) throws StrutturaCondAltreDaoException
	{
		return findByPrimaryKey( pk.getScaId() );
	}

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the criteria 'sca_id = :scaId'.
	 */
	public StrutturaCondAltre findByPrimaryKey(long scaId) throws StrutturaCondAltreDaoException
	{
		StrutturaCondAltre ret[] = findByDynamicSelect( SQL_SELECT + " WHERE sca_id = ?", new Object[] {  new Long(scaId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the criteria ''.
	 */
	public StrutturaCondAltre[] findAll() throws StrutturaCondAltreDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY sca_id", null );
	}

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaCondAltre[] findByStruttura(long strutturaStrId) throws StrutturaCondAltreDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_str_id = ?", new Object[] {  new Long(strutturaStrId) } );
	}

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the criteria 'sca_id = :scaId'.
	 */
	public StrutturaCondAltre[] findWhereScaIdEquals(long scaId) throws StrutturaCondAltreDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sca_id = ? ORDER BY sca_id", new Object[] {  new Long(scaId) } );
	}

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the criteria 'sca_ospita_bamb = :scaOspitaBamb'.
	 */
	public StrutturaCondAltre[] findWhereScaOspitaBambEquals(String scaOspitaBamb) throws StrutturaCondAltreDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sca_ospita_bamb = ? ORDER BY sca_ospita_bamb", new Object[] { scaOspitaBamb } );
	}

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the criteria 'sca_bamb_in_letti = :scaBambInLetti'.
	 */
	public StrutturaCondAltre[] findWhereScaBambInLettiEquals(String scaBambInLetti) throws StrutturaCondAltreDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sca_bamb_in_letti = ? ORDER BY sca_bamb_in_letti", new Object[] { scaBambInLetti } );
	}

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the criteria 'sca_letti_agg = :scaLettiAgg'.
	 */
	public StrutturaCondAltre[] findWhereScaLettiAggEquals(String scaLettiAgg) throws StrutturaCondAltreDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sca_letti_agg = ? ORDER BY sca_letti_agg", new Object[] { scaLettiAgg } );
	}

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the criteria 'scp_checkin_dalle = :scpCheckinDalle'.
	 */
	public StrutturaCondAltre[] findWhereScpCheckinDalleEquals(String scpCheckinDalle) throws StrutturaCondAltreDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scp_checkin_dalle = ? ORDER BY scp_checkin_dalle", new Object[] { scpCheckinDalle } );
	}

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the criteria 'scp_checkin_alle = :scpCheckinAlle'.
	 */
	public StrutturaCondAltre[] findWhereScpCheckinAlleEquals(String scpCheckinAlle) throws StrutturaCondAltreDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scp_checkin_alle = ? ORDER BY scp_checkin_alle", new Object[] { scpCheckinAlle } );
	}

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the criteria 'scp_checkout_dalle = :scpCheckoutDalle'.
	 */
	public StrutturaCondAltre[] findWhereScpCheckoutDalleEquals(String scpCheckoutDalle) throws StrutturaCondAltreDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scp_checkout_dalle = ? ORDER BY scp_checkout_dalle", new Object[] { scpCheckoutDalle } );
	}

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the criteria 'scp_checkout_alle = :scpCheckoutAlle'.
	 */
	public StrutturaCondAltre[] findWhereScpCheckoutAlleEquals(String scpCheckoutAlle) throws StrutturaCondAltreDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scp_checkout_alle = ? ORDER BY scp_checkout_alle", new Object[] { scpCheckoutAlle } );
	}

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the criteria 'sca_pren_no_indirizzo = :scaPrenNoIndirizzo'.
	 */
	public StrutturaCondAltre[] findWhereScaPrenNoIndirizzoEquals(String scaPrenNoIndirizzo) throws StrutturaCondAltreDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sca_pren_no_indirizzo = ? ORDER BY sca_pren_no_indirizzo", new Object[] { scaPrenNoIndirizzo } );
	}

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the criteria 'sca_pren_no_tel = :scaPrenNoTel'.
	 */
	public StrutturaCondAltre[] findWhereScaPrenNoTelEquals(String scaPrenNoTel) throws StrutturaCondAltreDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sca_pren_no_tel = ? ORDER BY sca_pren_no_tel", new Object[] { scaPrenNoTel } );
	}

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaCondAltre[] findWhereStrutturaStrIdEquals(long strutturaStrId) throws StrutturaCondAltreDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_str_id = ? ORDER BY struttura_str_id", new Object[] {  new Long(strutturaStrId) } );
	}

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the criteria 'scp_internet = :scpInternet'.
	 */
	public StrutturaCondAltre[] findWhereScpInternetEquals(long scpInternet) throws StrutturaCondAltreDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scp_internet = ? ORDER BY scp_internet", new Object[] {  new Long(scpInternet) } );
	}

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the criteria 'scp_parcheggio = :scpParcheggio'.
	 */
	public StrutturaCondAltre[] findWhereScpParcheggioEquals(long scpParcheggio) throws StrutturaCondAltreDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scp_parcheggio = ? ORDER BY scp_parcheggio", new Object[] {  new Long(scpParcheggio) } );
	}

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the criteria 'scp_animali = :scpAnimali'.
	 */
	public StrutturaCondAltre[] findWhereScpAnimaliEquals(long scpAnimali) throws StrutturaCondAltreDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scp_animali = ? ORDER BY scp_animali", new Object[] {  new Long(scpAnimali) } );
	}

	/**
	 * Method 'StrutturaCondAltreDaoImpl'
	 * 
	 */
	public StrutturaCondAltreDaoImpl()
	{
	}

	/**
	 * Method 'StrutturaCondAltreDaoImpl'
	 * 
	 * @param userConn
	 */
	public StrutturaCondAltreDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "struttura_cond_altre";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected StrutturaCondAltre fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			StrutturaCondAltre dto = new StrutturaCondAltre();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected StrutturaCondAltre[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			StrutturaCondAltre dto = new StrutturaCondAltre();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		StrutturaCondAltre ret[] = new StrutturaCondAltre[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(StrutturaCondAltre dto, ResultSet rs) throws SQLException
	{
		dto.setScaId( rs.getLong( COLUMN_SCA_ID ) );
		dto.setScaOspitaBamb( rs.getString( COLUMN_SCA_OSPITA_BAMB ) );
		dto.setScaBambInLetti( rs.getString( COLUMN_SCA_BAMB_IN_LETTI ) );
		dto.setScaLettiAgg( rs.getString( COLUMN_SCA_LETTI_AGG ) );
		dto.setScpCheckinDalle( rs.getString( COLUMN_SCP_CHECKIN_DALLE ) );
		dto.setScpCheckinAlle( rs.getString( COLUMN_SCP_CHECKIN_ALLE ) );
		dto.setScpCheckoutDalle( rs.getString( COLUMN_SCP_CHECKOUT_DALLE ) );
		dto.setScpCheckoutAlle( rs.getString( COLUMN_SCP_CHECKOUT_ALLE ) );
		dto.setScaPrenNoIndirizzo( rs.getString( COLUMN_SCA_PREN_NO_INDIRIZZO ) );
		dto.setScaPrenNoTel( rs.getString( COLUMN_SCA_PREN_NO_TEL ) );
		dto.setStrutturaStrId( rs.getLong( COLUMN_STRUTTURA_STR_ID ) );
		dto.setScpInternet( rs.getLong( COLUMN_SCP_INTERNET ) );
		if (rs.wasNull()) {
			dto.setScpInternetNull( true );
		}
		
		dto.setScpParcheggio( rs.getLong( COLUMN_SCP_PARCHEGGIO ) );
		if (rs.wasNull()) {
			dto.setScpParcheggioNull( true );
		}
		
		dto.setScpAnimali( rs.getLong( COLUMN_SCP_ANIMALI ) );
		if (rs.wasNull()) {
			dto.setScpAnimaliNull( true );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(StrutturaCondAltre dto)
	{
	}

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the specified arbitrary SQL statement
	 */
	public StrutturaCondAltre[] findByDynamicSelect(String sql, Object[] sqlParams) throws StrutturaCondAltreDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaCondAltreDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the struttura_cond_altre table that match the specified arbitrary SQL statement
	 */
	public StrutturaCondAltre[] findByDynamicWhere(String sql, Object[] sqlParams) throws StrutturaCondAltreDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaCondAltreDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
