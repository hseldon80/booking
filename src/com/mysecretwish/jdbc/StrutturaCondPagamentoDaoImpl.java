/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.jdbc;

import com.mysecretwish.dao.*;
import com.mysecretwish.factory.*;
import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class StrutturaCondPagamentoDaoImpl extends AbstractDAO implements StrutturaCondPagamentoDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT scp_id, scp_accetta_carte, scp_american_express, scp_mastercard, scp_jcb, scp_discover, scp_cartasi, scp_unionpay, scp_visa, scp_maestro, scp_diners, scp_pin, scp_pren_no_carta_connaz, scp_pag_online, scp_attivo, struttura_str_id, scp_imp_last_minut FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( scp_id, scp_accetta_carte, scp_american_express, scp_mastercard, scp_jcb, scp_discover, scp_cartasi, scp_unionpay, scp_visa, scp_maestro, scp_diners, scp_pin, scp_pren_no_carta_connaz, scp_pag_online, scp_attivo, struttura_str_id, scp_imp_last_minut ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET scp_id = ?, scp_accetta_carte = ?, scp_american_express = ?, scp_mastercard = ?, scp_jcb = ?, scp_discover = ?, scp_cartasi = ?, scp_unionpay = ?, scp_visa = ?, scp_maestro = ?, scp_diners = ?, scp_pin = ?, scp_pren_no_carta_connaz = ?, scp_pag_online = ?, scp_attivo = ?, struttura_str_id = ?, scp_imp_last_minut = ? WHERE scp_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE scp_id = ?";

	/** 
	 * Index of column scp_id
	 */
	protected static final int COLUMN_SCP_ID = 1;

	/** 
	 * Index of column scp_accetta_carte
	 */
	protected static final int COLUMN_SCP_ACCETTA_CARTE = 2;

	/** 
	 * Index of column scp_american_express
	 */
	protected static final int COLUMN_SCP_AMERICAN_EXPRESS = 3;

	/** 
	 * Index of column scp_mastercard
	 */
	protected static final int COLUMN_SCP_MASTERCARD = 4;

	/** 
	 * Index of column scp_jcb
	 */
	protected static final int COLUMN_SCP_JCB = 5;

	/** 
	 * Index of column scp_discover
	 */
	protected static final int COLUMN_SCP_DISCOVER = 6;

	/** 
	 * Index of column scp_cartasi
	 */
	protected static final int COLUMN_SCP_CARTASI = 7;

	/** 
	 * Index of column scp_unionpay
	 */
	protected static final int COLUMN_SCP_UNIONPAY = 8;

	/** 
	 * Index of column scp_visa
	 */
	protected static final int COLUMN_SCP_VISA = 9;

	/** 
	 * Index of column scp_maestro
	 */
	protected static final int COLUMN_SCP_MAESTRO = 10;

	/** 
	 * Index of column scp_diners
	 */
	protected static final int COLUMN_SCP_DINERS = 11;

	/** 
	 * Index of column scp_pin
	 */
	protected static final int COLUMN_SCP_PIN = 12;

	/** 
	 * Index of column scp_pren_no_carta_connaz
	 */
	protected static final int COLUMN_SCP_PREN_NO_CARTA_CONNAZ = 13;

	/** 
	 * Index of column scp_pag_online
	 */
	protected static final int COLUMN_SCP_PAG_ONLINE = 14;

	/** 
	 * Index of column scp_attivo
	 */
	protected static final int COLUMN_SCP_ATTIVO = 15;

	/** 
	 * Index of column struttura_str_id
	 */
	protected static final int COLUMN_STRUTTURA_STR_ID = 16;

	/** 
	 * Index of column scp_imp_last_minut
	 */
	protected static final int COLUMN_SCP_IMP_LAST_MINUT = 17;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 17;

	/** 
	 * Index of primary-key column scp_id
	 */
	protected static final int PK_COLUMN_SCP_ID = 1;

	/** 
	 * Inserts a new row in the struttura_cond_pagamento table.
	 */
	public StrutturaCondPagamentoPk insert(StrutturaCondPagamento dto) throws StrutturaCondPagamentoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_strutture')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setScpId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getScpId() );
			stmt.setString( index++, dto.getScpAccettaCarte() );
			stmt.setString( index++, dto.getScpAmericanExpress() );
			stmt.setString( index++, dto.getScpMastercard() );
			stmt.setString( index++, dto.getScpJcb() );
			stmt.setString( index++, dto.getScpDiscover() );
			stmt.setString( index++, dto.getScpCartasi() );
			stmt.setString( index++, dto.getScpUnionpay() );
			stmt.setString( index++, dto.getScpVisa() );
			stmt.setString( index++, dto.getScpMaestro() );
			stmt.setString( index++, dto.getScpDiners() );
			stmt.setString( index++, dto.getScpPin() );
			stmt.setString( index++, dto.getScpPrenNoCartaConnaz() );
			stmt.setString( index++, dto.getScpPagOnline() );
			stmt.setString( index++, dto.getScpAttivo() );
			stmt.setLong( index++, dto.getStrutturaStrId() );
			if (dto.isScpImpLastMinutNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getScpImpLastMinut() );
			}
		
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaCondPagamentoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the struttura_cond_pagamento table.
	 */
	public void update(StrutturaCondPagamentoPk pk, StrutturaCondPagamento dto) throws StrutturaCondPagamentoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getScpId() );
			stmt.setString( index++, dto.getScpAccettaCarte() );
			stmt.setString( index++, dto.getScpAmericanExpress() );
			stmt.setString( index++, dto.getScpMastercard() );
			stmt.setString( index++, dto.getScpJcb() );
			stmt.setString( index++, dto.getScpDiscover() );
			stmt.setString( index++, dto.getScpCartasi() );
			stmt.setString( index++, dto.getScpUnionpay() );
			stmt.setString( index++, dto.getScpVisa() );
			stmt.setString( index++, dto.getScpMaestro() );
			stmt.setString( index++, dto.getScpDiners() );
			stmt.setString( index++, dto.getScpPin() );
			stmt.setString( index++, dto.getScpPrenNoCartaConnaz() );
			stmt.setString( index++, dto.getScpPagOnline() );
			stmt.setString( index++, dto.getScpAttivo() );
			stmt.setLong( index++, dto.getStrutturaStrId() );
			if (dto.isScpImpLastMinutNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getScpImpLastMinut() );
			}
		
			stmt.setLong( 18, pk.getScpId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaCondPagamentoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the struttura_cond_pagamento table.
	 */
	public void delete(StrutturaCondPagamentoPk pk) throws StrutturaCondPagamentoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getScpId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaCondPagamentoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the struttura_cond_pagamento table that matches the specified primary-key value.
	 */
	public StrutturaCondPagamento findByPrimaryKey(StrutturaCondPagamentoPk pk) throws StrutturaCondPagamentoDaoException
	{
		return findByPrimaryKey( pk.getScpId() );
	}

	/** 
	 * Returns all rows from the struttura_cond_pagamento table that match the criteria 'scp_id = :scpId'.
	 */
	public StrutturaCondPagamento findByPrimaryKey(long scpId) throws StrutturaCondPagamentoDaoException
	{
		StrutturaCondPagamento ret[] = findByDynamicSelect( SQL_SELECT + " WHERE scp_id = ?", new Object[] {  new Long(scpId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the struttura_cond_pagamento table that match the criteria ''.
	 */
	public StrutturaCondPagamento[] findAll() throws StrutturaCondPagamentoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY scp_id", null );
	}

	/** 
	 * Returns all rows from the struttura_cond_pagamento table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaCondPagamento[] findByStruttura(long strutturaStrId) throws StrutturaCondPagamentoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_str_id = ?", new Object[] {  new Long(strutturaStrId) } );
	}

	/** 
	 * Returns all rows from the struttura_cond_pagamento table that match the criteria 'scp_id = :scpId'.
	 */
	public StrutturaCondPagamento[] findWhereScpIdEquals(long scpId) throws StrutturaCondPagamentoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scp_id = ? ORDER BY scp_id", new Object[] {  new Long(scpId) } );
	}

	/** 
	 * Returns all rows from the struttura_cond_pagamento table that match the criteria 'scp_accetta_carte = :scpAccettaCarte'.
	 */
	public StrutturaCondPagamento[] findWhereScpAccettaCarteEquals(String scpAccettaCarte) throws StrutturaCondPagamentoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scp_accetta_carte = ? ORDER BY scp_accetta_carte", new Object[] { scpAccettaCarte } );
	}

	/** 
	 * Returns all rows from the struttura_cond_pagamento table that match the criteria 'scp_american_express = :scpAmericanExpress'.
	 */
	public StrutturaCondPagamento[] findWhereScpAmericanExpressEquals(String scpAmericanExpress) throws StrutturaCondPagamentoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scp_american_express = ? ORDER BY scp_american_express", new Object[] { scpAmericanExpress } );
	}

	/** 
	 * Returns all rows from the struttura_cond_pagamento table that match the criteria 'scp_mastercard = :scpMastercard'.
	 */
	public StrutturaCondPagamento[] findWhereScpMastercardEquals(String scpMastercard) throws StrutturaCondPagamentoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scp_mastercard = ? ORDER BY scp_mastercard", new Object[] { scpMastercard } );
	}

	/** 
	 * Returns all rows from the struttura_cond_pagamento table that match the criteria 'scp_jcb = :scpJcb'.
	 */
	public StrutturaCondPagamento[] findWhereScpJcbEquals(String scpJcb) throws StrutturaCondPagamentoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scp_jcb = ? ORDER BY scp_jcb", new Object[] { scpJcb } );
	}

	/** 
	 * Returns all rows from the struttura_cond_pagamento table that match the criteria 'scp_discover = :scpDiscover'.
	 */
	public StrutturaCondPagamento[] findWhereScpDiscoverEquals(String scpDiscover) throws StrutturaCondPagamentoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scp_discover = ? ORDER BY scp_discover", new Object[] { scpDiscover } );
	}

	/** 
	 * Returns all rows from the struttura_cond_pagamento table that match the criteria 'scp_cartasi = :scpCartasi'.
	 */
	public StrutturaCondPagamento[] findWhereScpCartasiEquals(String scpCartasi) throws StrutturaCondPagamentoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scp_cartasi = ? ORDER BY scp_cartasi", new Object[] { scpCartasi } );
	}

	/** 
	 * Returns all rows from the struttura_cond_pagamento table that match the criteria 'scp_unionpay = :scpUnionpay'.
	 */
	public StrutturaCondPagamento[] findWhereScpUnionpayEquals(String scpUnionpay) throws StrutturaCondPagamentoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scp_unionpay = ? ORDER BY scp_unionpay", new Object[] { scpUnionpay } );
	}

	/** 
	 * Returns all rows from the struttura_cond_pagamento table that match the criteria 'scp_visa = :scpVisa'.
	 */
	public StrutturaCondPagamento[] findWhereScpVisaEquals(String scpVisa) throws StrutturaCondPagamentoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scp_visa = ? ORDER BY scp_visa", new Object[] { scpVisa } );
	}

	/** 
	 * Returns all rows from the struttura_cond_pagamento table that match the criteria 'scp_maestro = :scpMaestro'.
	 */
	public StrutturaCondPagamento[] findWhereScpMaestroEquals(String scpMaestro) throws StrutturaCondPagamentoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scp_maestro = ? ORDER BY scp_maestro", new Object[] { scpMaestro } );
	}

	/** 
	 * Returns all rows from the struttura_cond_pagamento table that match the criteria 'scp_diners = :scpDiners'.
	 */
	public StrutturaCondPagamento[] findWhereScpDinersEquals(String scpDiners) throws StrutturaCondPagamentoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scp_diners = ? ORDER BY scp_diners", new Object[] { scpDiners } );
	}

	/** 
	 * Returns all rows from the struttura_cond_pagamento table that match the criteria 'scp_pin = :scpPin'.
	 */
	public StrutturaCondPagamento[] findWhereScpPinEquals(String scpPin) throws StrutturaCondPagamentoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scp_pin = ? ORDER BY scp_pin", new Object[] { scpPin } );
	}

	/** 
	 * Returns all rows from the struttura_cond_pagamento table that match the criteria 'scp_pren_no_carta_connaz = :scpPrenNoCartaConnaz'.
	 */
	public StrutturaCondPagamento[] findWhereScpPrenNoCartaConnazEquals(String scpPrenNoCartaConnaz) throws StrutturaCondPagamentoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scp_pren_no_carta_connaz = ? ORDER BY scp_pren_no_carta_connaz", new Object[] { scpPrenNoCartaConnaz } );
	}

	/** 
	 * Returns all rows from the struttura_cond_pagamento table that match the criteria 'scp_pag_online = :scpPagOnline'.
	 */
	public StrutturaCondPagamento[] findWhereScpPagOnlineEquals(String scpPagOnline) throws StrutturaCondPagamentoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scp_pag_online = ? ORDER BY scp_pag_online", new Object[] { scpPagOnline } );
	}

	/** 
	 * Returns all rows from the struttura_cond_pagamento table that match the criteria 'scp_attivo = :scpAttivo'.
	 */
	public StrutturaCondPagamento[] findWhereScpAttivoEquals(String scpAttivo) throws StrutturaCondPagamentoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scp_attivo = ? ORDER BY scp_attivo", new Object[] { scpAttivo } );
	}

	/** 
	 * Returns all rows from the struttura_cond_pagamento table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaCondPagamento[] findWhereStrutturaStrIdEquals(long strutturaStrId) throws StrutturaCondPagamentoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_str_id = ? ORDER BY struttura_str_id", new Object[] {  new Long(strutturaStrId) } );
	}

	/** 
	 * Returns all rows from the struttura_cond_pagamento table that match the criteria 'scp_imp_last_minut = :scpImpLastMinut'.
	 */
	public StrutturaCondPagamento[] findWhereScpImpLastMinutEquals(long scpImpLastMinut) throws StrutturaCondPagamentoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scp_imp_last_minut = ? ORDER BY scp_imp_last_minut", new Object[] {  new Long(scpImpLastMinut) } );
	}

	/**
	 * Method 'StrutturaCondPagamentoDaoImpl'
	 * 
	 */
	public StrutturaCondPagamentoDaoImpl()
	{
	}

	/**
	 * Method 'StrutturaCondPagamentoDaoImpl'
	 * 
	 * @param userConn
	 */
	public StrutturaCondPagamentoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "struttura_cond_pagamento";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected StrutturaCondPagamento fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			StrutturaCondPagamento dto = new StrutturaCondPagamento();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected StrutturaCondPagamento[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			StrutturaCondPagamento dto = new StrutturaCondPagamento();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		StrutturaCondPagamento ret[] = new StrutturaCondPagamento[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(StrutturaCondPagamento dto, ResultSet rs) throws SQLException
	{
		dto.setScpId( rs.getLong( COLUMN_SCP_ID ) );
		dto.setScpAccettaCarte( rs.getString( COLUMN_SCP_ACCETTA_CARTE ) );
		dto.setScpAmericanExpress( rs.getString( COLUMN_SCP_AMERICAN_EXPRESS ) );
		dto.setScpMastercard( rs.getString( COLUMN_SCP_MASTERCARD ) );
		dto.setScpJcb( rs.getString( COLUMN_SCP_JCB ) );
		dto.setScpDiscover( rs.getString( COLUMN_SCP_DISCOVER ) );
		dto.setScpCartasi( rs.getString( COLUMN_SCP_CARTASI ) );
		dto.setScpUnionpay( rs.getString( COLUMN_SCP_UNIONPAY ) );
		dto.setScpVisa( rs.getString( COLUMN_SCP_VISA ) );
		dto.setScpMaestro( rs.getString( COLUMN_SCP_MAESTRO ) );
		dto.setScpDiners( rs.getString( COLUMN_SCP_DINERS ) );
		dto.setScpPin( rs.getString( COLUMN_SCP_PIN ) );
		dto.setScpPrenNoCartaConnaz( rs.getString( COLUMN_SCP_PREN_NO_CARTA_CONNAZ ) );
		dto.setScpPagOnline( rs.getString( COLUMN_SCP_PAG_ONLINE ) );
		dto.setScpAttivo( rs.getString( COLUMN_SCP_ATTIVO ) );
		dto.setStrutturaStrId( rs.getLong( COLUMN_STRUTTURA_STR_ID ) );
		dto.setScpImpLastMinut( rs.getLong( COLUMN_SCP_IMP_LAST_MINUT ) );
		if (rs.wasNull()) {
			dto.setScpImpLastMinutNull( true );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(StrutturaCondPagamento dto)
	{
	}

	/** 
	 * Returns all rows from the struttura_cond_pagamento table that match the specified arbitrary SQL statement
	 */
	public StrutturaCondPagamento[] findByDynamicSelect(String sql, Object[] sqlParams) throws StrutturaCondPagamentoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaCondPagamentoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the struttura_cond_pagamento table that match the specified arbitrary SQL statement
	 */
	public StrutturaCondPagamento[] findByDynamicWhere(String sql, Object[] sqlParams) throws StrutturaCondPagamentoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaCondPagamentoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
