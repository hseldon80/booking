/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.jdbc;

import com.mysecretwish.dao.*;
import com.mysecretwish.factory.*;
import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class CamereAccessibilitaDaoImpl extends AbstractDAO implements CamereAccessibilitaDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT sca_id, sca_ascensore, sca_piano_ter, sca_sedia_rot, sca_piani_sup_asc, sca_piani_sup_scale, sca_edif_indip, sca_app_priv, sca_semi_ind, camere_cam_id FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( sca_id, sca_ascensore, sca_piano_ter, sca_sedia_rot, sca_piani_sup_asc, sca_piani_sup_scale, sca_edif_indip, sca_app_priv, sca_semi_ind, camere_cam_id ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET sca_id = ?, sca_ascensore = ?, sca_piano_ter = ?, sca_sedia_rot = ?, sca_piani_sup_asc = ?, sca_piani_sup_scale = ?, sca_edif_indip = ?, sca_app_priv = ?, sca_semi_ind = ?, camere_cam_id = ? WHERE sca_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE sca_id = ?";

	/** 
	 * Index of column sca_id
	 */
	protected static final int COLUMN_SCA_ID = 1;

	/** 
	 * Index of column sca_ascensore
	 */
	protected static final int COLUMN_SCA_ASCENSORE = 2;

	/** 
	 * Index of column sca_piano_ter
	 */
	protected static final int COLUMN_SCA_PIANO_TER = 3;

	/** 
	 * Index of column sca_sedia_rot
	 */
	protected static final int COLUMN_SCA_SEDIA_ROT = 4;

	/** 
	 * Index of column sca_piani_sup_asc
	 */
	protected static final int COLUMN_SCA_PIANI_SUP_ASC = 5;

	/** 
	 * Index of column sca_piani_sup_scale
	 */
	protected static final int COLUMN_SCA_PIANI_SUP_SCALE = 6;

	/** 
	 * Index of column sca_edif_indip
	 */
	protected static final int COLUMN_SCA_EDIF_INDIP = 7;

	/** 
	 * Index of column sca_app_priv
	 */
	protected static final int COLUMN_SCA_APP_PRIV = 8;

	/** 
	 * Index of column sca_semi_ind
	 */
	protected static final int COLUMN_SCA_SEMI_IND = 9;

	/** 
	 * Index of column camere_cam_id
	 */
	protected static final int COLUMN_CAMERE_CAM_ID = 10;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 10;

	/** 
	 * Index of primary-key column sca_id
	 */
	protected static final int PK_COLUMN_SCA_ID = 1;

	/** 
	 * Inserts a new row in the camere_accessibilita table.
	 */
	public CamereAccessibilitaPk insert(CamereAccessibilita dto) throws CamereAccessibilitaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_camere')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setScaId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getScaId() );
			stmt.setString( index++, dto.getScaAscensore() );
			stmt.setString( index++, dto.getScaPianoTer() );
			stmt.setString( index++, dto.getScaSediaRot() );
			stmt.setString( index++, dto.getScaPianiSupAsc() );
			stmt.setString( index++, dto.getScaPianiSupScale() );
			stmt.setString( index++, dto.getScaEdifIndip() );
			stmt.setString( index++, dto.getScaAppPriv() );
			stmt.setString( index++, dto.getScaSemiInd() );
			stmt.setLong( index++, dto.getCamereCamId() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CamereAccessibilitaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the camere_accessibilita table.
	 */
	public void update(CamereAccessibilitaPk pk, CamereAccessibilita dto) throws CamereAccessibilitaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getScaId() );
			stmt.setString( index++, dto.getScaAscensore() );
			stmt.setString( index++, dto.getScaPianoTer() );
			stmt.setString( index++, dto.getScaSediaRot() );
			stmt.setString( index++, dto.getScaPianiSupAsc() );
			stmt.setString( index++, dto.getScaPianiSupScale() );
			stmt.setString( index++, dto.getScaEdifIndip() );
			stmt.setString( index++, dto.getScaAppPriv() );
			stmt.setString( index++, dto.getScaSemiInd() );
			stmt.setLong( index++, dto.getCamereCamId() );
			stmt.setLong( 11, pk.getScaId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CamereAccessibilitaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the camere_accessibilita table.
	 */
	public void delete(CamereAccessibilitaPk pk) throws CamereAccessibilitaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getScaId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CamereAccessibilitaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the camere_accessibilita table that matches the specified primary-key value.
	 */
	public CamereAccessibilita findByPrimaryKey(CamereAccessibilitaPk pk) throws CamereAccessibilitaDaoException
	{
		return findByPrimaryKey( pk.getScaId() );
	}

	/** 
	 * Returns all rows from the camere_accessibilita table that match the criteria 'sca_id = :scaId'.
	 */
	public CamereAccessibilita findByPrimaryKey(long scaId) throws CamereAccessibilitaDaoException
	{
		CamereAccessibilita ret[] = findByDynamicSelect( SQL_SELECT + " WHERE sca_id = ?", new Object[] {  new Long(scaId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the camere_accessibilita table that match the criteria ''.
	 */
	public CamereAccessibilita[] findAll() throws CamereAccessibilitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY sca_id", null );
	}

	/** 
	 * Returns all rows from the camere_accessibilita table that match the criteria 'camere_cam_id = :camereCamId'.
	 */
	public CamereAccessibilita[] findByCamere(long camereCamId) throws CamereAccessibilitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE camere_cam_id = ?", new Object[] {  new Long(camereCamId) } );
	}

	/** 
	 * Returns all rows from the camere_accessibilita table that match the criteria 'sca_id = :scaId'.
	 */
	public CamereAccessibilita[] findWhereScaIdEquals(long scaId) throws CamereAccessibilitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sca_id = ? ORDER BY sca_id", new Object[] {  new Long(scaId) } );
	}

	/** 
	 * Returns all rows from the camere_accessibilita table that match the criteria 'sca_ascensore = :scaAscensore'.
	 */
	public CamereAccessibilita[] findWhereScaAscensoreEquals(String scaAscensore) throws CamereAccessibilitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sca_ascensore = ? ORDER BY sca_ascensore", new Object[] { scaAscensore } );
	}

	/** 
	 * Returns all rows from the camere_accessibilita table that match the criteria 'sca_piano_ter = :scaPianoTer'.
	 */
	public CamereAccessibilita[] findWhereScaPianoTerEquals(String scaPianoTer) throws CamereAccessibilitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sca_piano_ter = ? ORDER BY sca_piano_ter", new Object[] { scaPianoTer } );
	}

	/** 
	 * Returns all rows from the camere_accessibilita table that match the criteria 'sca_sedia_rot = :scaSediaRot'.
	 */
	public CamereAccessibilita[] findWhereScaSediaRotEquals(String scaSediaRot) throws CamereAccessibilitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sca_sedia_rot = ? ORDER BY sca_sedia_rot", new Object[] { scaSediaRot } );
	}

	/** 
	 * Returns all rows from the camere_accessibilita table that match the criteria 'sca_piani_sup_asc = :scaPianiSupAsc'.
	 */
	public CamereAccessibilita[] findWhereScaPianiSupAscEquals(String scaPianiSupAsc) throws CamereAccessibilitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sca_piani_sup_asc = ? ORDER BY sca_piani_sup_asc", new Object[] { scaPianiSupAsc } );
	}

	/** 
	 * Returns all rows from the camere_accessibilita table that match the criteria 'sca_piani_sup_scale = :scaPianiSupScale'.
	 */
	public CamereAccessibilita[] findWhereScaPianiSupScaleEquals(String scaPianiSupScale) throws CamereAccessibilitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sca_piani_sup_scale = ? ORDER BY sca_piani_sup_scale", new Object[] { scaPianiSupScale } );
	}

	/** 
	 * Returns all rows from the camere_accessibilita table that match the criteria 'sca_edif_indip = :scaEdifIndip'.
	 */
	public CamereAccessibilita[] findWhereScaEdifIndipEquals(String scaEdifIndip) throws CamereAccessibilitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sca_edif_indip = ? ORDER BY sca_edif_indip", new Object[] { scaEdifIndip } );
	}

	/** 
	 * Returns all rows from the camere_accessibilita table that match the criteria 'sca_app_priv = :scaAppPriv'.
	 */
	public CamereAccessibilita[] findWhereScaAppPrivEquals(String scaAppPriv) throws CamereAccessibilitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sca_app_priv = ? ORDER BY sca_app_priv", new Object[] { scaAppPriv } );
	}

	/** 
	 * Returns all rows from the camere_accessibilita table that match the criteria 'sca_semi_ind = :scaSemiInd'.
	 */
	public CamereAccessibilita[] findWhereScaSemiIndEquals(String scaSemiInd) throws CamereAccessibilitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sca_semi_ind = ? ORDER BY sca_semi_ind", new Object[] { scaSemiInd } );
	}

	/** 
	 * Returns all rows from the camere_accessibilita table that match the criteria 'camere_cam_id = :camereCamId'.
	 */
	public CamereAccessibilita[] findWhereCamereCamIdEquals(long camereCamId) throws CamereAccessibilitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE camere_cam_id = ? ORDER BY camere_cam_id", new Object[] {  new Long(camereCamId) } );
	}

	/**
	 * Method 'CamereAccessibilitaDaoImpl'
	 * 
	 */
	public CamereAccessibilitaDaoImpl()
	{
	}

	/**
	 * Method 'CamereAccessibilitaDaoImpl'
	 * 
	 * @param userConn
	 */
	public CamereAccessibilitaDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "camere_accessibilita";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected CamereAccessibilita fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			CamereAccessibilita dto = new CamereAccessibilita();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected CamereAccessibilita[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			CamereAccessibilita dto = new CamereAccessibilita();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		CamereAccessibilita ret[] = new CamereAccessibilita[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(CamereAccessibilita dto, ResultSet rs) throws SQLException
	{
		dto.setScaId( rs.getLong( COLUMN_SCA_ID ) );
		dto.setScaAscensore( rs.getString( COLUMN_SCA_ASCENSORE ) );
		dto.setScaPianoTer( rs.getString( COLUMN_SCA_PIANO_TER ) );
		dto.setScaSediaRot( rs.getString( COLUMN_SCA_SEDIA_ROT ) );
		dto.setScaPianiSupAsc( rs.getString( COLUMN_SCA_PIANI_SUP_ASC ) );
		dto.setScaPianiSupScale( rs.getString( COLUMN_SCA_PIANI_SUP_SCALE ) );
		dto.setScaEdifIndip( rs.getString( COLUMN_SCA_EDIF_INDIP ) );
		dto.setScaAppPriv( rs.getString( COLUMN_SCA_APP_PRIV ) );
		dto.setScaSemiInd( rs.getString( COLUMN_SCA_SEMI_IND ) );
		dto.setCamereCamId( rs.getLong( COLUMN_CAMERE_CAM_ID ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(CamereAccessibilita dto)
	{
	}

	/** 
	 * Returns all rows from the camere_accessibilita table that match the specified arbitrary SQL statement
	 */
	public CamereAccessibilita[] findByDynamicSelect(String sql, Object[] sqlParams) throws CamereAccessibilitaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CamereAccessibilitaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the camere_accessibilita table that match the specified arbitrary SQL statement
	 */
	public CamereAccessibilita[] findByDynamicWhere(String sql, Object[] sqlParams) throws CamereAccessibilitaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CamereAccessibilitaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
