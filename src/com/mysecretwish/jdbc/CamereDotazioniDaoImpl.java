/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.jdbc;

import com.mysecretwish.dao.*;
import com.mysecretwish.factory.*;
import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class CamereDotazioniDaoImpl extends AbstractDAO implements CamereDotazioniDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT scd_id, scd_lettini_culle, scd_pisc_vista, scd_appendiabiti, scd_pisc_ultimo_piano, scd_stendibianc, scd_pisc_salata, scd_letto_pieg, scd_zona_acqua_bas, scd_divano_let, scd_area_cond, scd_pattumiere, scd_pisc_uso_escl, scd_pisc_riscald, scd_asciugatrice, scd_pisc_sfioro, scd_armadio, scd_copert_pisc, scd_moquette, scd_teli, scd_cab_armadio, scd_vasc_imm_fred, scd_letti_lung, scd_asciug_pisc, scd_ventilatore, scd_camino, scd_ingresso_ind, scd_riscaldameno, scd_cassaforte, scd_disp_cam_comunic, scd_divano, scd_ferro_stiro, scd_insonorizzazione, scd_asse_da_stiro, scd_zona_giorn, scd_vasca_idro, scd_stirapant, scd_zanzariera, scd_lavatrice, scd_pavim_marmo, scd_parquet, scd_scrivania, scd_pigiama, scd_sol_anallergiche, scd_presa_letto, scd_prod_pulizie, scd_adattatore, scd_coperte_elet, scd_cuscino_piume, scd_cuscino_no_piume, scd_cuscino_ipo, camere_cam_id FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( scd_id, scd_lettini_culle, scd_pisc_vista, scd_appendiabiti, scd_pisc_ultimo_piano, scd_stendibianc, scd_pisc_salata, scd_letto_pieg, scd_zona_acqua_bas, scd_divano_let, scd_area_cond, scd_pattumiere, scd_pisc_uso_escl, scd_pisc_riscald, scd_asciugatrice, scd_pisc_sfioro, scd_armadio, scd_copert_pisc, scd_moquette, scd_teli, scd_cab_armadio, scd_vasc_imm_fred, scd_letti_lung, scd_asciug_pisc, scd_ventilatore, scd_camino, scd_ingresso_ind, scd_riscaldameno, scd_cassaforte, scd_disp_cam_comunic, scd_divano, scd_ferro_stiro, scd_insonorizzazione, scd_asse_da_stiro, scd_zona_giorn, scd_vasca_idro, scd_stirapant, scd_zanzariera, scd_lavatrice, scd_pavim_marmo, scd_parquet, scd_scrivania, scd_pigiama, scd_sol_anallergiche, scd_presa_letto, scd_prod_pulizie, scd_adattatore, scd_coperte_elet, scd_cuscino_piume, scd_cuscino_no_piume, scd_cuscino_ipo, camere_cam_id ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET scd_id = ?, scd_lettini_culle = ?, scd_pisc_vista = ?, scd_appendiabiti = ?, scd_pisc_ultimo_piano = ?, scd_stendibianc = ?, scd_pisc_salata = ?, scd_letto_pieg = ?, scd_zona_acqua_bas = ?, scd_divano_let = ?, scd_area_cond = ?, scd_pattumiere = ?, scd_pisc_uso_escl = ?, scd_pisc_riscald = ?, scd_asciugatrice = ?, scd_pisc_sfioro = ?, scd_armadio = ?, scd_copert_pisc = ?, scd_moquette = ?, scd_teli = ?, scd_cab_armadio = ?, scd_vasc_imm_fred = ?, scd_letti_lung = ?, scd_asciug_pisc = ?, scd_ventilatore = ?, scd_camino = ?, scd_ingresso_ind = ?, scd_riscaldameno = ?, scd_cassaforte = ?, scd_disp_cam_comunic = ?, scd_divano = ?, scd_ferro_stiro = ?, scd_insonorizzazione = ?, scd_asse_da_stiro = ?, scd_zona_giorn = ?, scd_vasca_idro = ?, scd_stirapant = ?, scd_zanzariera = ?, scd_lavatrice = ?, scd_pavim_marmo = ?, scd_parquet = ?, scd_scrivania = ?, scd_pigiama = ?, scd_sol_anallergiche = ?, scd_presa_letto = ?, scd_prod_pulizie = ?, scd_adattatore = ?, scd_coperte_elet = ?, scd_cuscino_piume = ?, scd_cuscino_no_piume = ?, scd_cuscino_ipo = ?, camere_cam_id = ? WHERE scd_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE scd_id = ?";

	/** 
	 * Index of column scd_id
	 */
	protected static final int COLUMN_SCD_ID = 1;

	/** 
	 * Index of column scd_lettini_culle
	 */
	protected static final int COLUMN_SCD_LETTINI_CULLE = 2;

	/** 
	 * Index of column scd_pisc_vista
	 */
	protected static final int COLUMN_SCD_PISC_VISTA = 3;

	/** 
	 * Index of column scd_appendiabiti
	 */
	protected static final int COLUMN_SCD_APPENDIABITI = 4;

	/** 
	 * Index of column scd_pisc_ultimo_piano
	 */
	protected static final int COLUMN_SCD_PISC_ULTIMO_PIANO = 5;

	/** 
	 * Index of column scd_stendibianc
	 */
	protected static final int COLUMN_SCD_STENDIBIANC = 6;

	/** 
	 * Index of column scd_pisc_salata
	 */
	protected static final int COLUMN_SCD_PISC_SALATA = 7;

	/** 
	 * Index of column scd_letto_pieg
	 */
	protected static final int COLUMN_SCD_LETTO_PIEG = 8;

	/** 
	 * Index of column scd_zona_acqua_bas
	 */
	protected static final int COLUMN_SCD_ZONA_ACQUA_BAS = 9;

	/** 
	 * Index of column scd_divano_let
	 */
	protected static final int COLUMN_SCD_DIVANO_LET = 10;

	/** 
	 * Index of column scd_area_cond
	 */
	protected static final int COLUMN_SCD_AREA_COND = 11;

	/** 
	 * Index of column scd_pattumiere
	 */
	protected static final int COLUMN_SCD_PATTUMIERE = 12;

	/** 
	 * Index of column scd_pisc_uso_escl
	 */
	protected static final int COLUMN_SCD_PISC_USO_ESCL = 13;

	/** 
	 * Index of column scd_pisc_riscald
	 */
	protected static final int COLUMN_SCD_PISC_RISCALD = 14;

	/** 
	 * Index of column scd_asciugatrice
	 */
	protected static final int COLUMN_SCD_ASCIUGATRICE = 15;

	/** 
	 * Index of column scd_pisc_sfioro
	 */
	protected static final int COLUMN_SCD_PISC_SFIORO = 16;

	/** 
	 * Index of column scd_armadio
	 */
	protected static final int COLUMN_SCD_ARMADIO = 17;

	/** 
	 * Index of column scd_copert_pisc
	 */
	protected static final int COLUMN_SCD_COPERT_PISC = 18;

	/** 
	 * Index of column scd_moquette
	 */
	protected static final int COLUMN_SCD_MOQUETTE = 19;

	/** 
	 * Index of column scd_teli
	 */
	protected static final int COLUMN_SCD_TELI = 20;

	/** 
	 * Index of column scd_cab_armadio
	 */
	protected static final int COLUMN_SCD_CAB_ARMADIO = 21;

	/** 
	 * Index of column scd_vasc_imm_fred
	 */
	protected static final int COLUMN_SCD_VASC_IMM_FRED = 22;

	/** 
	 * Index of column scd_letti_lung
	 */
	protected static final int COLUMN_SCD_LETTI_LUNG = 23;

	/** 
	 * Index of column scd_asciug_pisc
	 */
	protected static final int COLUMN_SCD_ASCIUG_PISC = 24;

	/** 
	 * Index of column scd_ventilatore
	 */
	protected static final int COLUMN_SCD_VENTILATORE = 25;

	/** 
	 * Index of column scd_camino
	 */
	protected static final int COLUMN_SCD_CAMINO = 26;

	/** 
	 * Index of column scd_ingresso_ind
	 */
	protected static final int COLUMN_SCD_INGRESSO_IND = 27;

	/** 
	 * Index of column scd_riscaldameno
	 */
	protected static final int COLUMN_SCD_RISCALDAMENO = 28;

	/** 
	 * Index of column scd_cassaforte
	 */
	protected static final int COLUMN_SCD_CASSAFORTE = 29;

	/** 
	 * Index of column scd_disp_cam_comunic
	 */
	protected static final int COLUMN_SCD_DISP_CAM_COMUNIC = 30;

	/** 
	 * Index of column scd_divano
	 */
	protected static final int COLUMN_SCD_DIVANO = 31;

	/** 
	 * Index of column scd_ferro_stiro
	 */
	protected static final int COLUMN_SCD_FERRO_STIRO = 32;

	/** 
	 * Index of column scd_insonorizzazione
	 */
	protected static final int COLUMN_SCD_INSONORIZZAZIONE = 33;

	/** 
	 * Index of column scd_asse_da_stiro
	 */
	protected static final int COLUMN_SCD_ASSE_DA_STIRO = 34;

	/** 
	 * Index of column scd_zona_giorn
	 */
	protected static final int COLUMN_SCD_ZONA_GIORN = 35;

	/** 
	 * Index of column scd_vasca_idro
	 */
	protected static final int COLUMN_SCD_VASCA_IDRO = 36;

	/** 
	 * Index of column scd_stirapant
	 */
	protected static final int COLUMN_SCD_STIRAPANT = 37;

	/** 
	 * Index of column scd_zanzariera
	 */
	protected static final int COLUMN_SCD_ZANZARIERA = 38;

	/** 
	 * Index of column scd_lavatrice
	 */
	protected static final int COLUMN_SCD_LAVATRICE = 39;

	/** 
	 * Index of column scd_pavim_marmo
	 */
	protected static final int COLUMN_SCD_PAVIM_MARMO = 40;

	/** 
	 * Index of column scd_parquet
	 */
	protected static final int COLUMN_SCD_PARQUET = 41;

	/** 
	 * Index of column scd_scrivania
	 */
	protected static final int COLUMN_SCD_SCRIVANIA = 42;

	/** 
	 * Index of column scd_pigiama
	 */
	protected static final int COLUMN_SCD_PIGIAMA = 43;

	/** 
	 * Index of column scd_sol_anallergiche
	 */
	protected static final int COLUMN_SCD_SOL_ANALLERGICHE = 44;

	/** 
	 * Index of column scd_presa_letto
	 */
	protected static final int COLUMN_SCD_PRESA_LETTO = 45;

	/** 
	 * Index of column scd_prod_pulizie
	 */
	protected static final int COLUMN_SCD_PROD_PULIZIE = 46;

	/** 
	 * Index of column scd_adattatore
	 */
	protected static final int COLUMN_SCD_ADATTATORE = 47;

	/** 
	 * Index of column scd_coperte_elet
	 */
	protected static final int COLUMN_SCD_COPERTE_ELET = 48;

	/** 
	 * Index of column scd_cuscino_piume
	 */
	protected static final int COLUMN_SCD_CUSCINO_PIUME = 49;

	/** 
	 * Index of column scd_cuscino_no_piume
	 */
	protected static final int COLUMN_SCD_CUSCINO_NO_PIUME = 50;

	/** 
	 * Index of column scd_cuscino_ipo
	 */
	protected static final int COLUMN_SCD_CUSCINO_IPO = 51;

	/** 
	 * Index of column camere_cam_id
	 */
	protected static final int COLUMN_CAMERE_CAM_ID = 52;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 52;

	/** 
	 * Index of primary-key column scd_id
	 */
	protected static final int PK_COLUMN_SCD_ID = 1;

	/** 
	 * Inserts a new row in the camere_dotazioni table.
	 */
	public CamereDotazioniPk insert(CamereDotazioni dto) throws CamereDotazioniDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_camere')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setScdId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getScdId() );
			stmt.setString( index++, dto.getScdLettiniCulle() );
			stmt.setString( index++, dto.getScdPiscVista() );
			stmt.setString( index++, dto.getScdAppendiabiti() );
			stmt.setString( index++, dto.getScdPiscUltimoPiano() );
			stmt.setString( index++, dto.getScdStendibianc() );
			stmt.setString( index++, dto.getScdPiscSalata() );
			stmt.setString( index++, dto.getScdLettoPieg() );
			stmt.setString( index++, dto.getScdZonaAcquaBas() );
			stmt.setString( index++, dto.getScdDivanoLet() );
			stmt.setString( index++, dto.getScdAreaCond() );
			stmt.setString( index++, dto.getScdPattumiere() );
			stmt.setString( index++, dto.getScdPiscUsoEscl() );
			stmt.setString( index++, dto.getScdPiscRiscald() );
			stmt.setString( index++, dto.getScdAsciugatrice() );
			stmt.setString( index++, dto.getScdPiscSfioro() );
			stmt.setString( index++, dto.getScdArmadio() );
			stmt.setString( index++, dto.getScdCopertPisc() );
			stmt.setString( index++, dto.getScdMoquette() );
			stmt.setString( index++, dto.getScdTeli() );
			stmt.setString( index++, dto.getScdCabArmadio() );
			stmt.setString( index++, dto.getScdVascImmFred() );
			stmt.setString( index++, dto.getScdLettiLung() );
			stmt.setString( index++, dto.getScdAsciugPisc() );
			stmt.setString( index++, dto.getScdVentilatore() );
			stmt.setString( index++, dto.getScdCamino() );
			stmt.setString( index++, dto.getScdIngressoInd() );
			stmt.setString( index++, dto.getScdRiscaldameno() );
			stmt.setString( index++, dto.getScdCassaforte() );
			stmt.setString( index++, dto.getScdDispCamComunic() );
			stmt.setString( index++, dto.getScdDivano() );
			stmt.setString( index++, dto.getScdFerroStiro() );
			stmt.setString( index++, dto.getScdInsonorizzazione() );
			stmt.setString( index++, dto.getScdAsseDaStiro() );
			stmt.setString( index++, dto.getScdZonaGiorn() );
			stmt.setString( index++, dto.getScdVascaIdro() );
			stmt.setString( index++, dto.getScdStirapant() );
			stmt.setString( index++, dto.getScdZanzariera() );
			stmt.setString( index++, dto.getScdLavatrice() );
			stmt.setString( index++, dto.getScdPavimMarmo() );
			stmt.setString( index++, dto.getScdParquet() );
			stmt.setString( index++, dto.getScdScrivania() );
			stmt.setString( index++, dto.getScdPigiama() );
			stmt.setString( index++, dto.getScdSolAnallergiche() );
			stmt.setString( index++, dto.getScdPresaLetto() );
			stmt.setString( index++, dto.getScdProdPulizie() );
			stmt.setString( index++, dto.getScdAdattatore() );
			stmt.setString( index++, dto.getScdCoperteElet() );
			stmt.setString( index++, dto.getScdCuscinoPiume() );
			stmt.setString( index++, dto.getScdCuscinoNoPiume() );
			stmt.setString( index++, dto.getScdCuscinoIpo() );
			stmt.setLong( index++, dto.getCamereCamId() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CamereDotazioniDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the camere_dotazioni table.
	 */
	public void update(CamereDotazioniPk pk, CamereDotazioni dto) throws CamereDotazioniDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getScdId() );
			stmt.setString( index++, dto.getScdLettiniCulle() );
			stmt.setString( index++, dto.getScdPiscVista() );
			stmt.setString( index++, dto.getScdAppendiabiti() );
			stmt.setString( index++, dto.getScdPiscUltimoPiano() );
			stmt.setString( index++, dto.getScdStendibianc() );
			stmt.setString( index++, dto.getScdPiscSalata() );
			stmt.setString( index++, dto.getScdLettoPieg() );
			stmt.setString( index++, dto.getScdZonaAcquaBas() );
			stmt.setString( index++, dto.getScdDivanoLet() );
			stmt.setString( index++, dto.getScdAreaCond() );
			stmt.setString( index++, dto.getScdPattumiere() );
			stmt.setString( index++, dto.getScdPiscUsoEscl() );
			stmt.setString( index++, dto.getScdPiscRiscald() );
			stmt.setString( index++, dto.getScdAsciugatrice() );
			stmt.setString( index++, dto.getScdPiscSfioro() );
			stmt.setString( index++, dto.getScdArmadio() );
			stmt.setString( index++, dto.getScdCopertPisc() );
			stmt.setString( index++, dto.getScdMoquette() );
			stmt.setString( index++, dto.getScdTeli() );
			stmt.setString( index++, dto.getScdCabArmadio() );
			stmt.setString( index++, dto.getScdVascImmFred() );
			stmt.setString( index++, dto.getScdLettiLung() );
			stmt.setString( index++, dto.getScdAsciugPisc() );
			stmt.setString( index++, dto.getScdVentilatore() );
			stmt.setString( index++, dto.getScdCamino() );
			stmt.setString( index++, dto.getScdIngressoInd() );
			stmt.setString( index++, dto.getScdRiscaldameno() );
			stmt.setString( index++, dto.getScdCassaforte() );
			stmt.setString( index++, dto.getScdDispCamComunic() );
			stmt.setString( index++, dto.getScdDivano() );
			stmt.setString( index++, dto.getScdFerroStiro() );
			stmt.setString( index++, dto.getScdInsonorizzazione() );
			stmt.setString( index++, dto.getScdAsseDaStiro() );
			stmt.setString( index++, dto.getScdZonaGiorn() );
			stmt.setString( index++, dto.getScdVascaIdro() );
			stmt.setString( index++, dto.getScdStirapant() );
			stmt.setString( index++, dto.getScdZanzariera() );
			stmt.setString( index++, dto.getScdLavatrice() );
			stmt.setString( index++, dto.getScdPavimMarmo() );
			stmt.setString( index++, dto.getScdParquet() );
			stmt.setString( index++, dto.getScdScrivania() );
			stmt.setString( index++, dto.getScdPigiama() );
			stmt.setString( index++, dto.getScdSolAnallergiche() );
			stmt.setString( index++, dto.getScdPresaLetto() );
			stmt.setString( index++, dto.getScdProdPulizie() );
			stmt.setString( index++, dto.getScdAdattatore() );
			stmt.setString( index++, dto.getScdCoperteElet() );
			stmt.setString( index++, dto.getScdCuscinoPiume() );
			stmt.setString( index++, dto.getScdCuscinoNoPiume() );
			stmt.setString( index++, dto.getScdCuscinoIpo() );
			stmt.setLong( index++, dto.getCamereCamId() );
			stmt.setLong( 53, pk.getScdId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CamereDotazioniDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the camere_dotazioni table.
	 */
	public void delete(CamereDotazioniPk pk) throws CamereDotazioniDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getScdId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CamereDotazioniDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the camere_dotazioni table that matches the specified primary-key value.
	 */
	public CamereDotazioni findByPrimaryKey(CamereDotazioniPk pk) throws CamereDotazioniDaoException
	{
		return findByPrimaryKey( pk.getScdId() );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_id = :scdId'.
	 */
	public CamereDotazioni findByPrimaryKey(long scdId) throws CamereDotazioniDaoException
	{
		CamereDotazioni ret[] = findByDynamicSelect( SQL_SELECT + " WHERE scd_id = ?", new Object[] {  new Long(scdId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria ''.
	 */
	public CamereDotazioni[] findAll() throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY scd_id", null );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'camere_cam_id = :camereCamId'.
	 */
	public CamereDotazioni[] findByCamere(long camereCamId) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE camere_cam_id = ?", new Object[] {  new Long(camereCamId) } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_id = :scdId'.
	 */
	public CamereDotazioni[] findWhereScdIdEquals(long scdId) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_id = ? ORDER BY scd_id", new Object[] {  new Long(scdId) } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_lettini_culle = :scdLettiniCulle'.
	 */
	public CamereDotazioni[] findWhereScdLettiniCulleEquals(String scdLettiniCulle) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_lettini_culle = ? ORDER BY scd_lettini_culle", new Object[] { scdLettiniCulle } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_pisc_vista = :scdPiscVista'.
	 */
	public CamereDotazioni[] findWhereScdPiscVistaEquals(String scdPiscVista) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_pisc_vista = ? ORDER BY scd_pisc_vista", new Object[] { scdPiscVista } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_appendiabiti = :scdAppendiabiti'.
	 */
	public CamereDotazioni[] findWhereScdAppendiabitiEquals(String scdAppendiabiti) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_appendiabiti = ? ORDER BY scd_appendiabiti", new Object[] { scdAppendiabiti } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_pisc_ultimo_piano = :scdPiscUltimoPiano'.
	 */
	public CamereDotazioni[] findWhereScdPiscUltimoPianoEquals(String scdPiscUltimoPiano) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_pisc_ultimo_piano = ? ORDER BY scd_pisc_ultimo_piano", new Object[] { scdPiscUltimoPiano } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_stendibianc = :scdStendibianc'.
	 */
	public CamereDotazioni[] findWhereScdStendibiancEquals(String scdStendibianc) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_stendibianc = ? ORDER BY scd_stendibianc", new Object[] { scdStendibianc } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_pisc_salata = :scdPiscSalata'.
	 */
	public CamereDotazioni[] findWhereScdPiscSalataEquals(String scdPiscSalata) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_pisc_salata = ? ORDER BY scd_pisc_salata", new Object[] { scdPiscSalata } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_letto_pieg = :scdLettoPieg'.
	 */
	public CamereDotazioni[] findWhereScdLettoPiegEquals(String scdLettoPieg) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_letto_pieg = ? ORDER BY scd_letto_pieg", new Object[] { scdLettoPieg } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_zona_acqua_bas = :scdZonaAcquaBas'.
	 */
	public CamereDotazioni[] findWhereScdZonaAcquaBasEquals(String scdZonaAcquaBas) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_zona_acqua_bas = ? ORDER BY scd_zona_acqua_bas", new Object[] { scdZonaAcquaBas } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_divano_let = :scdDivanoLet'.
	 */
	public CamereDotazioni[] findWhereScdDivanoLetEquals(String scdDivanoLet) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_divano_let = ? ORDER BY scd_divano_let", new Object[] { scdDivanoLet } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_area_cond = :scdAreaCond'.
	 */
	public CamereDotazioni[] findWhereScdAreaCondEquals(String scdAreaCond) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_area_cond = ? ORDER BY scd_area_cond", new Object[] { scdAreaCond } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_pattumiere = :scdPattumiere'.
	 */
	public CamereDotazioni[] findWhereScdPattumiereEquals(String scdPattumiere) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_pattumiere = ? ORDER BY scd_pattumiere", new Object[] { scdPattumiere } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_pisc_uso_escl = :scdPiscUsoEscl'.
	 */
	public CamereDotazioni[] findWhereScdPiscUsoEsclEquals(String scdPiscUsoEscl) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_pisc_uso_escl = ? ORDER BY scd_pisc_uso_escl", new Object[] { scdPiscUsoEscl } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_pisc_riscald = :scdPiscRiscald'.
	 */
	public CamereDotazioni[] findWhereScdPiscRiscaldEquals(String scdPiscRiscald) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_pisc_riscald = ? ORDER BY scd_pisc_riscald", new Object[] { scdPiscRiscald } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_asciugatrice = :scdAsciugatrice'.
	 */
	public CamereDotazioni[] findWhereScdAsciugatriceEquals(String scdAsciugatrice) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_asciugatrice = ? ORDER BY scd_asciugatrice", new Object[] { scdAsciugatrice } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_pisc_sfioro = :scdPiscSfioro'.
	 */
	public CamereDotazioni[] findWhereScdPiscSfioroEquals(String scdPiscSfioro) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_pisc_sfioro = ? ORDER BY scd_pisc_sfioro", new Object[] { scdPiscSfioro } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_armadio = :scdArmadio'.
	 */
	public CamereDotazioni[] findWhereScdArmadioEquals(String scdArmadio) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_armadio = ? ORDER BY scd_armadio", new Object[] { scdArmadio } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_copert_pisc = :scdCopertPisc'.
	 */
	public CamereDotazioni[] findWhereScdCopertPiscEquals(String scdCopertPisc) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_copert_pisc = ? ORDER BY scd_copert_pisc", new Object[] { scdCopertPisc } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_moquette = :scdMoquette'.
	 */
	public CamereDotazioni[] findWhereScdMoquetteEquals(String scdMoquette) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_moquette = ? ORDER BY scd_moquette", new Object[] { scdMoquette } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_teli = :scdTeli'.
	 */
	public CamereDotazioni[] findWhereScdTeliEquals(String scdTeli) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_teli = ? ORDER BY scd_teli", new Object[] { scdTeli } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_cab_armadio = :scdCabArmadio'.
	 */
	public CamereDotazioni[] findWhereScdCabArmadioEquals(String scdCabArmadio) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_cab_armadio = ? ORDER BY scd_cab_armadio", new Object[] { scdCabArmadio } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_vasc_imm_fred = :scdVascImmFred'.
	 */
	public CamereDotazioni[] findWhereScdVascImmFredEquals(String scdVascImmFred) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_vasc_imm_fred = ? ORDER BY scd_vasc_imm_fred", new Object[] { scdVascImmFred } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_letti_lung = :scdLettiLung'.
	 */
	public CamereDotazioni[] findWhereScdLettiLungEquals(String scdLettiLung) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_letti_lung = ? ORDER BY scd_letti_lung", new Object[] { scdLettiLung } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_asciug_pisc = :scdAsciugPisc'.
	 */
	public CamereDotazioni[] findWhereScdAsciugPiscEquals(String scdAsciugPisc) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_asciug_pisc = ? ORDER BY scd_asciug_pisc", new Object[] { scdAsciugPisc } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_ventilatore = :scdVentilatore'.
	 */
	public CamereDotazioni[] findWhereScdVentilatoreEquals(String scdVentilatore) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_ventilatore = ? ORDER BY scd_ventilatore", new Object[] { scdVentilatore } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_camino = :scdCamino'.
	 */
	public CamereDotazioni[] findWhereScdCaminoEquals(String scdCamino) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_camino = ? ORDER BY scd_camino", new Object[] { scdCamino } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_ingresso_ind = :scdIngressoInd'.
	 */
	public CamereDotazioni[] findWhereScdIngressoIndEquals(String scdIngressoInd) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_ingresso_ind = ? ORDER BY scd_ingresso_ind", new Object[] { scdIngressoInd } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_riscaldameno = :scdRiscaldameno'.
	 */
	public CamereDotazioni[] findWhereScdRiscaldamenoEquals(String scdRiscaldameno) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_riscaldameno = ? ORDER BY scd_riscaldameno", new Object[] { scdRiscaldameno } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_cassaforte = :scdCassaforte'.
	 */
	public CamereDotazioni[] findWhereScdCassaforteEquals(String scdCassaforte) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_cassaforte = ? ORDER BY scd_cassaforte", new Object[] { scdCassaforte } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_disp_cam_comunic = :scdDispCamComunic'.
	 */
	public CamereDotazioni[] findWhereScdDispCamComunicEquals(String scdDispCamComunic) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_disp_cam_comunic = ? ORDER BY scd_disp_cam_comunic", new Object[] { scdDispCamComunic } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_divano = :scdDivano'.
	 */
	public CamereDotazioni[] findWhereScdDivanoEquals(String scdDivano) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_divano = ? ORDER BY scd_divano", new Object[] { scdDivano } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_ferro_stiro = :scdFerroStiro'.
	 */
	public CamereDotazioni[] findWhereScdFerroStiroEquals(String scdFerroStiro) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_ferro_stiro = ? ORDER BY scd_ferro_stiro", new Object[] { scdFerroStiro } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_insonorizzazione = :scdInsonorizzazione'.
	 */
	public CamereDotazioni[] findWhereScdInsonorizzazioneEquals(String scdInsonorizzazione) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_insonorizzazione = ? ORDER BY scd_insonorizzazione", new Object[] { scdInsonorizzazione } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_asse_da_stiro = :scdAsseDaStiro'.
	 */
	public CamereDotazioni[] findWhereScdAsseDaStiroEquals(String scdAsseDaStiro) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_asse_da_stiro = ? ORDER BY scd_asse_da_stiro", new Object[] { scdAsseDaStiro } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_zona_giorn = :scdZonaGiorn'.
	 */
	public CamereDotazioni[] findWhereScdZonaGiornEquals(String scdZonaGiorn) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_zona_giorn = ? ORDER BY scd_zona_giorn", new Object[] { scdZonaGiorn } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_vasca_idro = :scdVascaIdro'.
	 */
	public CamereDotazioni[] findWhereScdVascaIdroEquals(String scdVascaIdro) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_vasca_idro = ? ORDER BY scd_vasca_idro", new Object[] { scdVascaIdro } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_stirapant = :scdStirapant'.
	 */
	public CamereDotazioni[] findWhereScdStirapantEquals(String scdStirapant) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_stirapant = ? ORDER BY scd_stirapant", new Object[] { scdStirapant } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_zanzariera = :scdZanzariera'.
	 */
	public CamereDotazioni[] findWhereScdZanzarieraEquals(String scdZanzariera) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_zanzariera = ? ORDER BY scd_zanzariera", new Object[] { scdZanzariera } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_lavatrice = :scdLavatrice'.
	 */
	public CamereDotazioni[] findWhereScdLavatriceEquals(String scdLavatrice) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_lavatrice = ? ORDER BY scd_lavatrice", new Object[] { scdLavatrice } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_pavim_marmo = :scdPavimMarmo'.
	 */
	public CamereDotazioni[] findWhereScdPavimMarmoEquals(String scdPavimMarmo) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_pavim_marmo = ? ORDER BY scd_pavim_marmo", new Object[] { scdPavimMarmo } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_parquet = :scdParquet'.
	 */
	public CamereDotazioni[] findWhereScdParquetEquals(String scdParquet) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_parquet = ? ORDER BY scd_parquet", new Object[] { scdParquet } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_scrivania = :scdScrivania'.
	 */
	public CamereDotazioni[] findWhereScdScrivaniaEquals(String scdScrivania) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_scrivania = ? ORDER BY scd_scrivania", new Object[] { scdScrivania } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_pigiama = :scdPigiama'.
	 */
	public CamereDotazioni[] findWhereScdPigiamaEquals(String scdPigiama) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_pigiama = ? ORDER BY scd_pigiama", new Object[] { scdPigiama } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_sol_anallergiche = :scdSolAnallergiche'.
	 */
	public CamereDotazioni[] findWhereScdSolAnallergicheEquals(String scdSolAnallergiche) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_sol_anallergiche = ? ORDER BY scd_sol_anallergiche", new Object[] { scdSolAnallergiche } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_presa_letto = :scdPresaLetto'.
	 */
	public CamereDotazioni[] findWhereScdPresaLettoEquals(String scdPresaLetto) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_presa_letto = ? ORDER BY scd_presa_letto", new Object[] { scdPresaLetto } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_prod_pulizie = :scdProdPulizie'.
	 */
	public CamereDotazioni[] findWhereScdProdPulizieEquals(String scdProdPulizie) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_prod_pulizie = ? ORDER BY scd_prod_pulizie", new Object[] { scdProdPulizie } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_adattatore = :scdAdattatore'.
	 */
	public CamereDotazioni[] findWhereScdAdattatoreEquals(String scdAdattatore) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_adattatore = ? ORDER BY scd_adattatore", new Object[] { scdAdattatore } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_coperte_elet = :scdCoperteElet'.
	 */
	public CamereDotazioni[] findWhereScdCoperteEletEquals(String scdCoperteElet) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_coperte_elet = ? ORDER BY scd_coperte_elet", new Object[] { scdCoperteElet } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_cuscino_piume = :scdCuscinoPiume'.
	 */
	public CamereDotazioni[] findWhereScdCuscinoPiumeEquals(String scdCuscinoPiume) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_cuscino_piume = ? ORDER BY scd_cuscino_piume", new Object[] { scdCuscinoPiume } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_cuscino_no_piume = :scdCuscinoNoPiume'.
	 */
	public CamereDotazioni[] findWhereScdCuscinoNoPiumeEquals(String scdCuscinoNoPiume) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_cuscino_no_piume = ? ORDER BY scd_cuscino_no_piume", new Object[] { scdCuscinoNoPiume } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'scd_cuscino_ipo = :scdCuscinoIpo'.
	 */
	public CamereDotazioni[] findWhereScdCuscinoIpoEquals(String scdCuscinoIpo) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scd_cuscino_ipo = ? ORDER BY scd_cuscino_ipo", new Object[] { scdCuscinoIpo } );
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the criteria 'camere_cam_id = :camereCamId'.
	 */
	public CamereDotazioni[] findWhereCamereCamIdEquals(long camereCamId) throws CamereDotazioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE camere_cam_id = ? ORDER BY camere_cam_id", new Object[] {  new Long(camereCamId) } );
	}

	/**
	 * Method 'CamereDotazioniDaoImpl'
	 * 
	 */
	public CamereDotazioniDaoImpl()
	{
	}

	/**
	 * Method 'CamereDotazioniDaoImpl'
	 * 
	 * @param userConn
	 */
	public CamereDotazioniDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "camere_dotazioni";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected CamereDotazioni fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			CamereDotazioni dto = new CamereDotazioni();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected CamereDotazioni[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			CamereDotazioni dto = new CamereDotazioni();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		CamereDotazioni ret[] = new CamereDotazioni[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(CamereDotazioni dto, ResultSet rs) throws SQLException
	{
		dto.setScdId( rs.getLong( COLUMN_SCD_ID ) );
		dto.setScdLettiniCulle( rs.getString( COLUMN_SCD_LETTINI_CULLE ) );
		dto.setScdPiscVista( rs.getString( COLUMN_SCD_PISC_VISTA ) );
		dto.setScdAppendiabiti( rs.getString( COLUMN_SCD_APPENDIABITI ) );
		dto.setScdPiscUltimoPiano( rs.getString( COLUMN_SCD_PISC_ULTIMO_PIANO ) );
		dto.setScdStendibianc( rs.getString( COLUMN_SCD_STENDIBIANC ) );
		dto.setScdPiscSalata( rs.getString( COLUMN_SCD_PISC_SALATA ) );
		dto.setScdLettoPieg( rs.getString( COLUMN_SCD_LETTO_PIEG ) );
		dto.setScdZonaAcquaBas( rs.getString( COLUMN_SCD_ZONA_ACQUA_BAS ) );
		dto.setScdDivanoLet( rs.getString( COLUMN_SCD_DIVANO_LET ) );
		dto.setScdAreaCond( rs.getString( COLUMN_SCD_AREA_COND ) );
		dto.setScdPattumiere( rs.getString( COLUMN_SCD_PATTUMIERE ) );
		dto.setScdPiscUsoEscl( rs.getString( COLUMN_SCD_PISC_USO_ESCL ) );
		dto.setScdPiscRiscald( rs.getString( COLUMN_SCD_PISC_RISCALD ) );
		dto.setScdAsciugatrice( rs.getString( COLUMN_SCD_ASCIUGATRICE ) );
		dto.setScdPiscSfioro( rs.getString( COLUMN_SCD_PISC_SFIORO ) );
		dto.setScdArmadio( rs.getString( COLUMN_SCD_ARMADIO ) );
		dto.setScdCopertPisc( rs.getString( COLUMN_SCD_COPERT_PISC ) );
		dto.setScdMoquette( rs.getString( COLUMN_SCD_MOQUETTE ) );
		dto.setScdTeli( rs.getString( COLUMN_SCD_TELI ) );
		dto.setScdCabArmadio( rs.getString( COLUMN_SCD_CAB_ARMADIO ) );
		dto.setScdVascImmFred( rs.getString( COLUMN_SCD_VASC_IMM_FRED ) );
		dto.setScdLettiLung( rs.getString( COLUMN_SCD_LETTI_LUNG ) );
		dto.setScdAsciugPisc( rs.getString( COLUMN_SCD_ASCIUG_PISC ) );
		dto.setScdVentilatore( rs.getString( COLUMN_SCD_VENTILATORE ) );
		dto.setScdCamino( rs.getString( COLUMN_SCD_CAMINO ) );
		dto.setScdIngressoInd( rs.getString( COLUMN_SCD_INGRESSO_IND ) );
		dto.setScdRiscaldameno( rs.getString( COLUMN_SCD_RISCALDAMENO ) );
		dto.setScdCassaforte( rs.getString( COLUMN_SCD_CASSAFORTE ) );
		dto.setScdDispCamComunic( rs.getString( COLUMN_SCD_DISP_CAM_COMUNIC ) );
		dto.setScdDivano( rs.getString( COLUMN_SCD_DIVANO ) );
		dto.setScdFerroStiro( rs.getString( COLUMN_SCD_FERRO_STIRO ) );
		dto.setScdInsonorizzazione( rs.getString( COLUMN_SCD_INSONORIZZAZIONE ) );
		dto.setScdAsseDaStiro( rs.getString( COLUMN_SCD_ASSE_DA_STIRO ) );
		dto.setScdZonaGiorn( rs.getString( COLUMN_SCD_ZONA_GIORN ) );
		dto.setScdVascaIdro( rs.getString( COLUMN_SCD_VASCA_IDRO ) );
		dto.setScdStirapant( rs.getString( COLUMN_SCD_STIRAPANT ) );
		dto.setScdZanzariera( rs.getString( COLUMN_SCD_ZANZARIERA ) );
		dto.setScdLavatrice( rs.getString( COLUMN_SCD_LAVATRICE ) );
		dto.setScdPavimMarmo( rs.getString( COLUMN_SCD_PAVIM_MARMO ) );
		dto.setScdParquet( rs.getString( COLUMN_SCD_PARQUET ) );
		dto.setScdScrivania( rs.getString( COLUMN_SCD_SCRIVANIA ) );
		dto.setScdPigiama( rs.getString( COLUMN_SCD_PIGIAMA ) );
		dto.setScdSolAnallergiche( rs.getString( COLUMN_SCD_SOL_ANALLERGICHE ) );
		dto.setScdPresaLetto( rs.getString( COLUMN_SCD_PRESA_LETTO ) );
		dto.setScdProdPulizie( rs.getString( COLUMN_SCD_PROD_PULIZIE ) );
		dto.setScdAdattatore( rs.getString( COLUMN_SCD_ADATTATORE ) );
		dto.setScdCoperteElet( rs.getString( COLUMN_SCD_COPERTE_ELET ) );
		dto.setScdCuscinoPiume( rs.getString( COLUMN_SCD_CUSCINO_PIUME ) );
		dto.setScdCuscinoNoPiume( rs.getString( COLUMN_SCD_CUSCINO_NO_PIUME ) );
		dto.setScdCuscinoIpo( rs.getString( COLUMN_SCD_CUSCINO_IPO ) );
		dto.setCamereCamId( rs.getLong( COLUMN_CAMERE_CAM_ID ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(CamereDotazioni dto)
	{
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the specified arbitrary SQL statement
	 */
	public CamereDotazioni[] findByDynamicSelect(String sql, Object[] sqlParams) throws CamereDotazioniDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CamereDotazioniDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the camere_dotazioni table that match the specified arbitrary SQL statement
	 */
	public CamereDotazioni[] findByDynamicWhere(String sql, Object[] sqlParams) throws CamereDotazioniDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CamereDotazioniDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
