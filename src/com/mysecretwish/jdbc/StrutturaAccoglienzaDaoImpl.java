/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.jdbc;

import com.mysecretwish.dao.*;
import com.mysecretwish.factory.*;
import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class StrutturaAccoglienzaDaoImpl extends AbstractDAO implements StrutturaAccoglienzaDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT sac_id, sac_bigl_spett, sac_aree_comuni, sac_arr_esterni, sac_area_pic, sac_zona_cam, sac_giardino, sac_terrazza, sac_terrazza_sol, sac_cucina_com, sac_sala_comune, sac_sala_giochi, sac_biblioteca, sac_cappella, struttura_str_id FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( sac_id, sac_bigl_spett, sac_aree_comuni, sac_arr_esterni, sac_area_pic, sac_zona_cam, sac_giardino, sac_terrazza, sac_terrazza_sol, sac_cucina_com, sac_sala_comune, sac_sala_giochi, sac_biblioteca, sac_cappella, struttura_str_id ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET sac_id = ?, sac_bigl_spett = ?, sac_aree_comuni = ?, sac_arr_esterni = ?, sac_area_pic = ?, sac_zona_cam = ?, sac_giardino = ?, sac_terrazza = ?, sac_terrazza_sol = ?, sac_cucina_com = ?, sac_sala_comune = ?, sac_sala_giochi = ?, sac_biblioteca = ?, sac_cappella = ?, struttura_str_id = ? WHERE sac_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE sac_id = ?";

	/** 
	 * Index of column sac_id
	 */
	protected static final int COLUMN_SAC_ID = 1;

	/** 
	 * Index of column sac_bigl_spett
	 */
	protected static final int COLUMN_SAC_BIGL_SPETT = 2;

	/** 
	 * Index of column sac_aree_comuni
	 */
	protected static final int COLUMN_SAC_AREE_COMUNI = 3;

	/** 
	 * Index of column sac_arr_esterni
	 */
	protected static final int COLUMN_SAC_ARR_ESTERNI = 4;

	/** 
	 * Index of column sac_area_pic
	 */
	protected static final int COLUMN_SAC_AREA_PIC = 5;

	/** 
	 * Index of column sac_zona_cam
	 */
	protected static final int COLUMN_SAC_ZONA_CAM = 6;

	/** 
	 * Index of column sac_giardino
	 */
	protected static final int COLUMN_SAC_GIARDINO = 7;

	/** 
	 * Index of column sac_terrazza
	 */
	protected static final int COLUMN_SAC_TERRAZZA = 8;

	/** 
	 * Index of column sac_terrazza_sol
	 */
	protected static final int COLUMN_SAC_TERRAZZA_SOL = 9;

	/** 
	 * Index of column sac_cucina_com
	 */
	protected static final int COLUMN_SAC_CUCINA_COM = 10;

	/** 
	 * Index of column sac_sala_comune
	 */
	protected static final int COLUMN_SAC_SALA_COMUNE = 11;

	/** 
	 * Index of column sac_sala_giochi
	 */
	protected static final int COLUMN_SAC_SALA_GIOCHI = 12;

	/** 
	 * Index of column sac_biblioteca
	 */
	protected static final int COLUMN_SAC_BIBLIOTECA = 13;

	/** 
	 * Index of column sac_cappella
	 */
	protected static final int COLUMN_SAC_CAPPELLA = 14;

	/** 
	 * Index of column struttura_str_id
	 */
	protected static final int COLUMN_STRUTTURA_STR_ID = 15;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 15;

	/** 
	 * Index of primary-key column sac_id
	 */
	protected static final int PK_COLUMN_SAC_ID = 1;

	/** 
	 * Inserts a new row in the struttura_accoglienza table.
	 */
	public StrutturaAccoglienzaPk insert(StrutturaAccoglienza dto) throws StrutturaAccoglienzaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_strutture')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setSacId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getSacId() );
			stmt.setString( index++, dto.getSacBiglSpett() );
			stmt.setString( index++, dto.getSacAreeComuni() );
			stmt.setString( index++, dto.getSacArrEsterni() );
			stmt.setString( index++, dto.getSacAreaPic() );
			stmt.setString( index++, dto.getSacZonaCam() );
			stmt.setString( index++, dto.getSacGiardino() );
			stmt.setString( index++, dto.getSacTerrazza() );
			stmt.setString( index++, dto.getSacTerrazzaSol() );
			stmt.setString( index++, dto.getSacCucinaCom() );
			stmt.setString( index++, dto.getSacSalaComune() );
			stmt.setString( index++, dto.getSacSalaGiochi() );
			stmt.setString( index++, dto.getSacBiblioteca() );
			stmt.setString( index++, dto.getSacCappella() );
			stmt.setLong( index++, dto.getStrutturaStrId() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaAccoglienzaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the struttura_accoglienza table.
	 */
	public void update(StrutturaAccoglienzaPk pk, StrutturaAccoglienza dto) throws StrutturaAccoglienzaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getSacId() );
			stmt.setString( index++, dto.getSacBiglSpett() );
			stmt.setString( index++, dto.getSacAreeComuni() );
			stmt.setString( index++, dto.getSacArrEsterni() );
			stmt.setString( index++, dto.getSacAreaPic() );
			stmt.setString( index++, dto.getSacZonaCam() );
			stmt.setString( index++, dto.getSacGiardino() );
			stmt.setString( index++, dto.getSacTerrazza() );
			stmt.setString( index++, dto.getSacTerrazzaSol() );
			stmt.setString( index++, dto.getSacCucinaCom() );
			stmt.setString( index++, dto.getSacSalaComune() );
			stmt.setString( index++, dto.getSacSalaGiochi() );
			stmt.setString( index++, dto.getSacBiblioteca() );
			stmt.setString( index++, dto.getSacCappella() );
			stmt.setLong( index++, dto.getStrutturaStrId() );
			stmt.setLong( 16, pk.getSacId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaAccoglienzaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the struttura_accoglienza table.
	 */
	public void delete(StrutturaAccoglienzaPk pk) throws StrutturaAccoglienzaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getSacId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaAccoglienzaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the struttura_accoglienza table that matches the specified primary-key value.
	 */
	public StrutturaAccoglienza findByPrimaryKey(StrutturaAccoglienzaPk pk) throws StrutturaAccoglienzaDaoException
	{
		return findByPrimaryKey( pk.getSacId() );
	}

	/** 
	 * Returns all rows from the struttura_accoglienza table that match the criteria 'sac_id = :sacId'.
	 */
	public StrutturaAccoglienza findByPrimaryKey(long sacId) throws StrutturaAccoglienzaDaoException
	{
		StrutturaAccoglienza ret[] = findByDynamicSelect( SQL_SELECT + " WHERE sac_id = ?", new Object[] {  new Long(sacId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the struttura_accoglienza table that match the criteria ''.
	 */
	public StrutturaAccoglienza[] findAll() throws StrutturaAccoglienzaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY sac_id", null );
	}

	/** 
	 * Returns all rows from the struttura_accoglienza table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaAccoglienza[] findByStruttura(long strutturaStrId) throws StrutturaAccoglienzaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_str_id = ?", new Object[] {  new Long(strutturaStrId) } );
	}

	/** 
	 * Returns all rows from the struttura_accoglienza table that match the criteria 'sac_id = :sacId'.
	 */
	public StrutturaAccoglienza[] findWhereSacIdEquals(long sacId) throws StrutturaAccoglienzaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sac_id = ? ORDER BY sac_id", new Object[] {  new Long(sacId) } );
	}

	/** 
	 * Returns all rows from the struttura_accoglienza table that match the criteria 'sac_bigl_spett = :sacBiglSpett'.
	 */
	public StrutturaAccoglienza[] findWhereSacBiglSpettEquals(String sacBiglSpett) throws StrutturaAccoglienzaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sac_bigl_spett = ? ORDER BY sac_bigl_spett", new Object[] { sacBiglSpett } );
	}

	/** 
	 * Returns all rows from the struttura_accoglienza table that match the criteria 'sac_aree_comuni = :sacAreeComuni'.
	 */
	public StrutturaAccoglienza[] findWhereSacAreeComuniEquals(String sacAreeComuni) throws StrutturaAccoglienzaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sac_aree_comuni = ? ORDER BY sac_aree_comuni", new Object[] { sacAreeComuni } );
	}

	/** 
	 * Returns all rows from the struttura_accoglienza table that match the criteria 'sac_arr_esterni = :sacArrEsterni'.
	 */
	public StrutturaAccoglienza[] findWhereSacArrEsterniEquals(String sacArrEsterni) throws StrutturaAccoglienzaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sac_arr_esterni = ? ORDER BY sac_arr_esterni", new Object[] { sacArrEsterni } );
	}

	/** 
	 * Returns all rows from the struttura_accoglienza table that match the criteria 'sac_area_pic = :sacAreaPic'.
	 */
	public StrutturaAccoglienza[] findWhereSacAreaPicEquals(String sacAreaPic) throws StrutturaAccoglienzaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sac_area_pic = ? ORDER BY sac_area_pic", new Object[] { sacAreaPic } );
	}

	/** 
	 * Returns all rows from the struttura_accoglienza table that match the criteria 'sac_zona_cam = :sacZonaCam'.
	 */
	public StrutturaAccoglienza[] findWhereSacZonaCamEquals(String sacZonaCam) throws StrutturaAccoglienzaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sac_zona_cam = ? ORDER BY sac_zona_cam", new Object[] { sacZonaCam } );
	}

	/** 
	 * Returns all rows from the struttura_accoglienza table that match the criteria 'sac_giardino = :sacGiardino'.
	 */
	public StrutturaAccoglienza[] findWhereSacGiardinoEquals(String sacGiardino) throws StrutturaAccoglienzaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sac_giardino = ? ORDER BY sac_giardino", new Object[] { sacGiardino } );
	}

	/** 
	 * Returns all rows from the struttura_accoglienza table that match the criteria 'sac_terrazza = :sacTerrazza'.
	 */
	public StrutturaAccoglienza[] findWhereSacTerrazzaEquals(String sacTerrazza) throws StrutturaAccoglienzaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sac_terrazza = ? ORDER BY sac_terrazza", new Object[] { sacTerrazza } );
	}

	/** 
	 * Returns all rows from the struttura_accoglienza table that match the criteria 'sac_terrazza_sol = :sacTerrazzaSol'.
	 */
	public StrutturaAccoglienza[] findWhereSacTerrazzaSolEquals(String sacTerrazzaSol) throws StrutturaAccoglienzaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sac_terrazza_sol = ? ORDER BY sac_terrazza_sol", new Object[] { sacTerrazzaSol } );
	}

	/** 
	 * Returns all rows from the struttura_accoglienza table that match the criteria 'sac_cucina_com = :sacCucinaCom'.
	 */
	public StrutturaAccoglienza[] findWhereSacCucinaComEquals(String sacCucinaCom) throws StrutturaAccoglienzaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sac_cucina_com = ? ORDER BY sac_cucina_com", new Object[] { sacCucinaCom } );
	}

	/** 
	 * Returns all rows from the struttura_accoglienza table that match the criteria 'sac_sala_comune = :sacSalaComune'.
	 */
	public StrutturaAccoglienza[] findWhereSacSalaComuneEquals(String sacSalaComune) throws StrutturaAccoglienzaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sac_sala_comune = ? ORDER BY sac_sala_comune", new Object[] { sacSalaComune } );
	}

	/** 
	 * Returns all rows from the struttura_accoglienza table that match the criteria 'sac_sala_giochi = :sacSalaGiochi'.
	 */
	public StrutturaAccoglienza[] findWhereSacSalaGiochiEquals(String sacSalaGiochi) throws StrutturaAccoglienzaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sac_sala_giochi = ? ORDER BY sac_sala_giochi", new Object[] { sacSalaGiochi } );
	}

	/** 
	 * Returns all rows from the struttura_accoglienza table that match the criteria 'sac_biblioteca = :sacBiblioteca'.
	 */
	public StrutturaAccoglienza[] findWhereSacBibliotecaEquals(String sacBiblioteca) throws StrutturaAccoglienzaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sac_biblioteca = ? ORDER BY sac_biblioteca", new Object[] { sacBiblioteca } );
	}

	/** 
	 * Returns all rows from the struttura_accoglienza table that match the criteria 'sac_cappella = :sacCappella'.
	 */
	public StrutturaAccoglienza[] findWhereSacCappellaEquals(String sacCappella) throws StrutturaAccoglienzaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sac_cappella = ? ORDER BY sac_cappella", new Object[] { sacCappella } );
	}

	/** 
	 * Returns all rows from the struttura_accoglienza table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaAccoglienza[] findWhereStrutturaStrIdEquals(long strutturaStrId) throws StrutturaAccoglienzaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_str_id = ? ORDER BY struttura_str_id", new Object[] {  new Long(strutturaStrId) } );
	}

	/**
	 * Method 'StrutturaAccoglienzaDaoImpl'
	 * 
	 */
	public StrutturaAccoglienzaDaoImpl()
	{
	}

	/**
	 * Method 'StrutturaAccoglienzaDaoImpl'
	 * 
	 * @param userConn
	 */
	public StrutturaAccoglienzaDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "struttura_accoglienza";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected StrutturaAccoglienza fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			StrutturaAccoglienza dto = new StrutturaAccoglienza();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected StrutturaAccoglienza[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			StrutturaAccoglienza dto = new StrutturaAccoglienza();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		StrutturaAccoglienza ret[] = new StrutturaAccoglienza[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(StrutturaAccoglienza dto, ResultSet rs) throws SQLException
	{
		dto.setSacId( rs.getLong( COLUMN_SAC_ID ) );
		dto.setSacBiglSpett( rs.getString( COLUMN_SAC_BIGL_SPETT ) );
		dto.setSacAreeComuni( rs.getString( COLUMN_SAC_AREE_COMUNI ) );
		dto.setSacArrEsterni( rs.getString( COLUMN_SAC_ARR_ESTERNI ) );
		dto.setSacAreaPic( rs.getString( COLUMN_SAC_AREA_PIC ) );
		dto.setSacZonaCam( rs.getString( COLUMN_SAC_ZONA_CAM ) );
		dto.setSacGiardino( rs.getString( COLUMN_SAC_GIARDINO ) );
		dto.setSacTerrazza( rs.getString( COLUMN_SAC_TERRAZZA ) );
		dto.setSacTerrazzaSol( rs.getString( COLUMN_SAC_TERRAZZA_SOL ) );
		dto.setSacCucinaCom( rs.getString( COLUMN_SAC_CUCINA_COM ) );
		dto.setSacSalaComune( rs.getString( COLUMN_SAC_SALA_COMUNE ) );
		dto.setSacSalaGiochi( rs.getString( COLUMN_SAC_SALA_GIOCHI ) );
		dto.setSacBiblioteca( rs.getString( COLUMN_SAC_BIBLIOTECA ) );
		dto.setSacCappella( rs.getString( COLUMN_SAC_CAPPELLA ) );
		dto.setStrutturaStrId( rs.getLong( COLUMN_STRUTTURA_STR_ID ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(StrutturaAccoglienza dto)
	{
	}

	/** 
	 * Returns all rows from the struttura_accoglienza table that match the specified arbitrary SQL statement
	 */
	public StrutturaAccoglienza[] findByDynamicSelect(String sql, Object[] sqlParams) throws StrutturaAccoglienzaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaAccoglienzaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the struttura_accoglienza table that match the specified arbitrary SQL statement
	 */
	public StrutturaAccoglienza[] findByDynamicWhere(String sql, Object[] sqlParams) throws StrutturaAccoglienzaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaAccoglienzaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
