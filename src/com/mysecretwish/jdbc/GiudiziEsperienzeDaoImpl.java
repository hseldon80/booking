/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.jdbc;

import com.mysecretwish.dao.*;
import com.mysecretwish.factory.*;
import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class GiudiziEsperienzeDaoImpl extends AbstractDAO implements GiudiziEsperienzeDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT giu_id, giu_staff, giu_servizi, giu_pulizia, giu_confort, giu_posizione, giu_qual_prez, pre_categoria, pre_commento, prenotazioni_pre_id FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( giu_id, giu_staff, giu_servizi, giu_pulizia, giu_confort, giu_posizione, giu_qual_prez, pre_categoria, pre_commento, prenotazioni_pre_id ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET giu_id = ?, giu_staff = ?, giu_servizi = ?, giu_pulizia = ?, giu_confort = ?, giu_posizione = ?, giu_qual_prez = ?, pre_categoria = ?, pre_commento = ?, prenotazioni_pre_id = ? WHERE giu_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE giu_id = ?";

	/** 
	 * Index of column giu_id
	 */
	protected static final int COLUMN_GIU_ID = 1;

	/** 
	 * Index of column giu_staff
	 */
	protected static final int COLUMN_GIU_STAFF = 2;

	/** 
	 * Index of column giu_servizi
	 */
	protected static final int COLUMN_GIU_SERVIZI = 3;

	/** 
	 * Index of column giu_pulizia
	 */
	protected static final int COLUMN_GIU_PULIZIA = 4;

	/** 
	 * Index of column giu_confort
	 */
	protected static final int COLUMN_GIU_CONFORT = 5;

	/** 
	 * Index of column giu_posizione
	 */
	protected static final int COLUMN_GIU_POSIZIONE = 6;

	/** 
	 * Index of column giu_qual_prez
	 */
	protected static final int COLUMN_GIU_QUAL_PREZ = 7;

	/** 
	 * Index of column pre_categoria
	 */
	protected static final int COLUMN_PRE_CATEGORIA = 8;

	/** 
	 * Index of column pre_commento
	 */
	protected static final int COLUMN_PRE_COMMENTO = 9;

	/** 
	 * Index of column prenotazioni_pre_id
	 */
	protected static final int COLUMN_PRENOTAZIONI_PRE_ID = 10;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 10;

	/** 
	 * Index of primary-key column giu_id
	 */
	protected static final int PK_COLUMN_GIU_ID = 1;

	/** 
	 * Inserts a new row in the giudizi_esperienze table.
	 */
	public GiudiziEsperienzePk insert(GiudiziEsperienze dto) throws GiudiziEsperienzeDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_tabelle_dominio')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setGiuId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getGiuId() );
			if (dto.isGiuStaffNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getGiuStaff() );
			}
		
			if (dto.isGiuServiziNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getGiuServizi() );
			}
		
			if (dto.isGiuPuliziaNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getGiuPulizia() );
			}
		
			if (dto.isGiuConfortNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getGiuConfort() );
			}
		
			if (dto.isGiuPosizioneNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getGiuPosizione() );
			}
		
			if (dto.isGiuQualPrezNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getGiuQualPrez() );
			}
		
			if (dto.isPreCategoriaNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getPreCategoria() );
			}
		
			stmt.setString( index++, dto.getPreCommento() );
			stmt.setLong( index++, dto.getPrenotazioniPreId() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new GiudiziEsperienzeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the giudizi_esperienze table.
	 */
	public void update(GiudiziEsperienzePk pk, GiudiziEsperienze dto) throws GiudiziEsperienzeDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getGiuId() );
			if (dto.isGiuStaffNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getGiuStaff() );
			}
		
			if (dto.isGiuServiziNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getGiuServizi() );
			}
		
			if (dto.isGiuPuliziaNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getGiuPulizia() );
			}
		
			if (dto.isGiuConfortNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getGiuConfort() );
			}
		
			if (dto.isGiuPosizioneNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getGiuPosizione() );
			}
		
			if (dto.isGiuQualPrezNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getGiuQualPrez() );
			}
		
			if (dto.isPreCategoriaNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getPreCategoria() );
			}
		
			stmt.setString( index++, dto.getPreCommento() );
			stmt.setLong( index++, dto.getPrenotazioniPreId() );
			stmt.setLong( 11, pk.getGiuId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new GiudiziEsperienzeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the giudizi_esperienze table.
	 */
	public void delete(GiudiziEsperienzePk pk) throws GiudiziEsperienzeDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getGiuId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new GiudiziEsperienzeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the giudizi_esperienze table that matches the specified primary-key value.
	 */
	public GiudiziEsperienze findByPrimaryKey(GiudiziEsperienzePk pk) throws GiudiziEsperienzeDaoException
	{
		return findByPrimaryKey( pk.getGiuId() );
	}

	/** 
	 * Returns all rows from the giudizi_esperienze table that match the criteria 'giu_id = :giuId'.
	 */
	public GiudiziEsperienze findByPrimaryKey(long giuId) throws GiudiziEsperienzeDaoException
	{
		GiudiziEsperienze ret[] = findByDynamicSelect( SQL_SELECT + " WHERE giu_id = ?", new Object[] {  new Long(giuId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the giudizi_esperienze table that match the criteria ''.
	 */
	public GiudiziEsperienze[] findAll() throws GiudiziEsperienzeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY giu_id", null );
	}

	/** 
	 * Returns all rows from the giudizi_esperienze table that match the criteria 'pre_categoria = :preCategoria'.
	 */
	public GiudiziEsperienze[] findByCategorieEsperienza(long preCategoria) throws GiudiziEsperienzeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pre_categoria = ?", new Object[] {  new Long(preCategoria) } );
	}

	/** 
	 * Returns all rows from the giudizi_esperienze table that match the criteria 'prenotazioni_pre_id = :prenotazioniPreId'.
	 */
	public GiudiziEsperienze[] findByPrenotazioni(long prenotazioniPreId) throws GiudiziEsperienzeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE prenotazioni_pre_id = ?", new Object[] {  new Long(prenotazioniPreId) } );
	}

	/** 
	 * Returns all rows from the giudizi_esperienze table that match the criteria 'giu_id = :giuId'.
	 */
	public GiudiziEsperienze[] findWhereGiuIdEquals(long giuId) throws GiudiziEsperienzeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE giu_id = ? ORDER BY giu_id", new Object[] {  new Long(giuId) } );
	}

	/** 
	 * Returns all rows from the giudizi_esperienze table that match the criteria 'giu_staff = :giuStaff'.
	 */
	public GiudiziEsperienze[] findWhereGiuStaffEquals(int giuStaff) throws GiudiziEsperienzeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE giu_staff = ? ORDER BY giu_staff", new Object[] {  new Integer(giuStaff) } );
	}

	/** 
	 * Returns all rows from the giudizi_esperienze table that match the criteria 'giu_servizi = :giuServizi'.
	 */
	public GiudiziEsperienze[] findWhereGiuServiziEquals(int giuServizi) throws GiudiziEsperienzeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE giu_servizi = ? ORDER BY giu_servizi", new Object[] {  new Integer(giuServizi) } );
	}

	/** 
	 * Returns all rows from the giudizi_esperienze table that match the criteria 'giu_pulizia = :giuPulizia'.
	 */
	public GiudiziEsperienze[] findWhereGiuPuliziaEquals(int giuPulizia) throws GiudiziEsperienzeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE giu_pulizia = ? ORDER BY giu_pulizia", new Object[] {  new Integer(giuPulizia) } );
	}

	/** 
	 * Returns all rows from the giudizi_esperienze table that match the criteria 'giu_confort = :giuConfort'.
	 */
	public GiudiziEsperienze[] findWhereGiuConfortEquals(int giuConfort) throws GiudiziEsperienzeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE giu_confort = ? ORDER BY giu_confort", new Object[] {  new Integer(giuConfort) } );
	}

	/** 
	 * Returns all rows from the giudizi_esperienze table that match the criteria 'giu_posizione = :giuPosizione'.
	 */
	public GiudiziEsperienze[] findWhereGiuPosizioneEquals(int giuPosizione) throws GiudiziEsperienzeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE giu_posizione = ? ORDER BY giu_posizione", new Object[] {  new Integer(giuPosizione) } );
	}

	/** 
	 * Returns all rows from the giudizi_esperienze table that match the criteria 'giu_qual_prez = :giuQualPrez'.
	 */
	public GiudiziEsperienze[] findWhereGiuQualPrezEquals(int giuQualPrez) throws GiudiziEsperienzeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE giu_qual_prez = ? ORDER BY giu_qual_prez", new Object[] {  new Integer(giuQualPrez) } );
	}

	/** 
	 * Returns all rows from the giudizi_esperienze table that match the criteria 'pre_categoria = :preCategoria'.
	 */
	public GiudiziEsperienze[] findWherePreCategoriaEquals(long preCategoria) throws GiudiziEsperienzeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pre_categoria = ? ORDER BY pre_categoria", new Object[] {  new Long(preCategoria) } );
	}

	/** 
	 * Returns all rows from the giudizi_esperienze table that match the criteria 'pre_commento = :preCommento'.
	 */
	public GiudiziEsperienze[] findWherePreCommentoEquals(String preCommento) throws GiudiziEsperienzeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pre_commento = ? ORDER BY pre_commento", new Object[] { preCommento } );
	}

	/** 
	 * Returns all rows from the giudizi_esperienze table that match the criteria 'prenotazioni_pre_id = :prenotazioniPreId'.
	 */
	public GiudiziEsperienze[] findWherePrenotazioniPreIdEquals(long prenotazioniPreId) throws GiudiziEsperienzeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE prenotazioni_pre_id = ? ORDER BY prenotazioni_pre_id", new Object[] {  new Long(prenotazioniPreId) } );
	}

	/**
	 * Method 'GiudiziEsperienzeDaoImpl'
	 * 
	 */
	public GiudiziEsperienzeDaoImpl()
	{
	}

	/**
	 * Method 'GiudiziEsperienzeDaoImpl'
	 * 
	 * @param userConn
	 */
	public GiudiziEsperienzeDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "giudizi_esperienze";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected GiudiziEsperienze fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			GiudiziEsperienze dto = new GiudiziEsperienze();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected GiudiziEsperienze[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			GiudiziEsperienze dto = new GiudiziEsperienze();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		GiudiziEsperienze ret[] = new GiudiziEsperienze[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(GiudiziEsperienze dto, ResultSet rs) throws SQLException
	{
		dto.setGiuId( rs.getLong( COLUMN_GIU_ID ) );
		dto.setGiuStaff( rs.getInt( COLUMN_GIU_STAFF ) );
		if (rs.wasNull()) {
			dto.setGiuStaffNull( true );
		}
		
		dto.setGiuServizi( rs.getInt( COLUMN_GIU_SERVIZI ) );
		if (rs.wasNull()) {
			dto.setGiuServiziNull( true );
		}
		
		dto.setGiuPulizia( rs.getInt( COLUMN_GIU_PULIZIA ) );
		if (rs.wasNull()) {
			dto.setGiuPuliziaNull( true );
		}
		
		dto.setGiuConfort( rs.getInt( COLUMN_GIU_CONFORT ) );
		if (rs.wasNull()) {
			dto.setGiuConfortNull( true );
		}
		
		dto.setGiuPosizione( rs.getInt( COLUMN_GIU_POSIZIONE ) );
		if (rs.wasNull()) {
			dto.setGiuPosizioneNull( true );
		}
		
		dto.setGiuQualPrez( rs.getInt( COLUMN_GIU_QUAL_PREZ ) );
		if (rs.wasNull()) {
			dto.setGiuQualPrezNull( true );
		}
		
		dto.setPreCategoria( rs.getLong( COLUMN_PRE_CATEGORIA ) );
		if (rs.wasNull()) {
			dto.setPreCategoriaNull( true );
		}
		
		dto.setPreCommento( rs.getString( COLUMN_PRE_COMMENTO ) );
		dto.setPrenotazioniPreId( rs.getLong( COLUMN_PRENOTAZIONI_PRE_ID ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(GiudiziEsperienze dto)
	{
	}

	/** 
	 * Returns all rows from the giudizi_esperienze table that match the specified arbitrary SQL statement
	 */
	public GiudiziEsperienze[] findByDynamicSelect(String sql, Object[] sqlParams) throws GiudiziEsperienzeDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new GiudiziEsperienzeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the giudizi_esperienze table that match the specified arbitrary SQL statement
	 */
	public GiudiziEsperienze[] findByDynamicWhere(String sql, Object[] sqlParams) throws GiudiziEsperienzeDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new GiudiziEsperienzeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
