/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.jdbc;

import com.mysecretwish.dao.*;
import com.mysecretwish.factory.*;
import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class StrutturaAttivitaDaoImpl extends AbstractDAO implements StrutturaAttivitaDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT sat_id, sat_attr_tennis, sat_badminton, sat_spiaggia, sat_campo_tennis, sat_biliardo, sat_ping_pong, sat_freccette, sat_squash, sat_bowling, sat_minigolf, sat_parco_acquatico, sat_immersioni, sat_campo_golf, sat_windsurf, sat_snorkeling, sat_attrez_sport_acq, sat_canoa, sat_pesca, sat_equitazione, sat_escursionismo, sat_sci, sat_escursione_bicicletta, struttura_str_id FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( sat_id, sat_attr_tennis, sat_badminton, sat_spiaggia, sat_campo_tennis, sat_biliardo, sat_ping_pong, sat_freccette, sat_squash, sat_bowling, sat_minigolf, sat_parco_acquatico, sat_immersioni, sat_campo_golf, sat_windsurf, sat_snorkeling, sat_attrez_sport_acq, sat_canoa, sat_pesca, sat_equitazione, sat_escursionismo, sat_sci, sat_escursione_bicicletta, struttura_str_id ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET sat_id = ?, sat_attr_tennis = ?, sat_badminton = ?, sat_spiaggia = ?, sat_campo_tennis = ?, sat_biliardo = ?, sat_ping_pong = ?, sat_freccette = ?, sat_squash = ?, sat_bowling = ?, sat_minigolf = ?, sat_parco_acquatico = ?, sat_immersioni = ?, sat_campo_golf = ?, sat_windsurf = ?, sat_snorkeling = ?, sat_attrez_sport_acq = ?, sat_canoa = ?, sat_pesca = ?, sat_equitazione = ?, sat_escursionismo = ?, sat_sci = ?, sat_escursione_bicicletta = ?, struttura_str_id = ? WHERE sat_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE sat_id = ?";

	/** 
	 * Index of column sat_id
	 */
	protected static final int COLUMN_SAT_ID = 1;

	/** 
	 * Index of column sat_attr_tennis
	 */
	protected static final int COLUMN_SAT_ATTR_TENNIS = 2;

	/** 
	 * Index of column sat_badminton
	 */
	protected static final int COLUMN_SAT_BADMINTON = 3;

	/** 
	 * Index of column sat_spiaggia
	 */
	protected static final int COLUMN_SAT_SPIAGGIA = 4;

	/** 
	 * Index of column sat_campo_tennis
	 */
	protected static final int COLUMN_SAT_CAMPO_TENNIS = 5;

	/** 
	 * Index of column sat_biliardo
	 */
	protected static final int COLUMN_SAT_BILIARDO = 6;

	/** 
	 * Index of column sat_ping_pong
	 */
	protected static final int COLUMN_SAT_PING_PONG = 7;

	/** 
	 * Index of column sat_freccette
	 */
	protected static final int COLUMN_SAT_FRECCETTE = 8;

	/** 
	 * Index of column sat_squash
	 */
	protected static final int COLUMN_SAT_SQUASH = 9;

	/** 
	 * Index of column sat_bowling
	 */
	protected static final int COLUMN_SAT_BOWLING = 10;

	/** 
	 * Index of column sat_minigolf
	 */
	protected static final int COLUMN_SAT_MINIGOLF = 11;

	/** 
	 * Index of column sat_parco_acquatico
	 */
	protected static final int COLUMN_SAT_PARCO_ACQUATICO = 12;

	/** 
	 * Index of column sat_immersioni
	 */
	protected static final int COLUMN_SAT_IMMERSIONI = 13;

	/** 
	 * Index of column sat_campo_golf
	 */
	protected static final int COLUMN_SAT_CAMPO_GOLF = 14;

	/** 
	 * Index of column sat_windsurf
	 */
	protected static final int COLUMN_SAT_WINDSURF = 15;

	/** 
	 * Index of column sat_snorkeling
	 */
	protected static final int COLUMN_SAT_SNORKELING = 16;

	/** 
	 * Index of column sat_attrez_sport_acq
	 */
	protected static final int COLUMN_SAT_ATTREZ_SPORT_ACQ = 17;

	/** 
	 * Index of column sat_canoa
	 */
	protected static final int COLUMN_SAT_CANOA = 18;

	/** 
	 * Index of column sat_pesca
	 */
	protected static final int COLUMN_SAT_PESCA = 19;

	/** 
	 * Index of column sat_equitazione
	 */
	protected static final int COLUMN_SAT_EQUITAZIONE = 20;

	/** 
	 * Index of column sat_escursionismo
	 */
	protected static final int COLUMN_SAT_ESCURSIONISMO = 21;

	/** 
	 * Index of column sat_sci
	 */
	protected static final int COLUMN_SAT_SCI = 22;

	/** 
	 * Index of column sat_escursione_bicicletta
	 */
	protected static final int COLUMN_SAT_ESCURSIONE_BICICLETTA = 23;

	/** 
	 * Index of column struttura_str_id
	 */
	protected static final int COLUMN_STRUTTURA_STR_ID = 24;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 24;

	/** 
	 * Index of primary-key column sat_id
	 */
	protected static final int PK_COLUMN_SAT_ID = 1;

	/** 
	 * Inserts a new row in the struttura_attivita table.
	 */
	public StrutturaAttivitaPk insert(StrutturaAttivita dto) throws StrutturaAttivitaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_strutture')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setSatId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getSatId() );
			stmt.setString( index++, dto.getSatAttrTennis() );
			stmt.setString( index++, dto.getSatBadminton() );
			stmt.setString( index++, dto.getSatSpiaggia() );
			stmt.setString( index++, dto.getSatCampoTennis() );
			stmt.setString( index++, dto.getSatBiliardo() );
			stmt.setString( index++, dto.getSatPingPong() );
			stmt.setString( index++, dto.getSatFreccette() );
			stmt.setString( index++, dto.getSatSquash() );
			stmt.setString( index++, dto.getSatBowling() );
			stmt.setString( index++, dto.getSatMinigolf() );
			stmt.setString( index++, dto.getSatParcoAcquatico() );
			stmt.setString( index++, dto.getSatImmersioni() );
			stmt.setString( index++, dto.getSatCampoGolf() );
			stmt.setString( index++, dto.getSatWindsurf() );
			stmt.setString( index++, dto.getSatSnorkeling() );
			stmt.setString( index++, dto.getSatAttrezSportAcq() );
			stmt.setString( index++, dto.getSatCanoa() );
			stmt.setString( index++, dto.getSatPesca() );
			stmt.setString( index++, dto.getSatEquitazione() );
			stmt.setString( index++, dto.getSatEscursionismo() );
			stmt.setString( index++, dto.getSatSci() );
			stmt.setString( index++, dto.getSatEscursioneBicicletta() );
			stmt.setLong( index++, dto.getStrutturaStrId() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaAttivitaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the struttura_attivita table.
	 */
	public void update(StrutturaAttivitaPk pk, StrutturaAttivita dto) throws StrutturaAttivitaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getSatId() );
			stmt.setString( index++, dto.getSatAttrTennis() );
			stmt.setString( index++, dto.getSatBadminton() );
			stmt.setString( index++, dto.getSatSpiaggia() );
			stmt.setString( index++, dto.getSatCampoTennis() );
			stmt.setString( index++, dto.getSatBiliardo() );
			stmt.setString( index++, dto.getSatPingPong() );
			stmt.setString( index++, dto.getSatFreccette() );
			stmt.setString( index++, dto.getSatSquash() );
			stmt.setString( index++, dto.getSatBowling() );
			stmt.setString( index++, dto.getSatMinigolf() );
			stmt.setString( index++, dto.getSatParcoAcquatico() );
			stmt.setString( index++, dto.getSatImmersioni() );
			stmt.setString( index++, dto.getSatCampoGolf() );
			stmt.setString( index++, dto.getSatWindsurf() );
			stmt.setString( index++, dto.getSatSnorkeling() );
			stmt.setString( index++, dto.getSatAttrezSportAcq() );
			stmt.setString( index++, dto.getSatCanoa() );
			stmt.setString( index++, dto.getSatPesca() );
			stmt.setString( index++, dto.getSatEquitazione() );
			stmt.setString( index++, dto.getSatEscursionismo() );
			stmt.setString( index++, dto.getSatSci() );
			stmt.setString( index++, dto.getSatEscursioneBicicletta() );
			stmt.setLong( index++, dto.getStrutturaStrId() );
			stmt.setLong( 25, pk.getSatId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaAttivitaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the struttura_attivita table.
	 */
	public void delete(StrutturaAttivitaPk pk) throws StrutturaAttivitaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getSatId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaAttivitaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the struttura_attivita table that matches the specified primary-key value.
	 */
	public StrutturaAttivita findByPrimaryKey(StrutturaAttivitaPk pk) throws StrutturaAttivitaDaoException
	{
		return findByPrimaryKey( pk.getSatId() );
	}

	/** 
	 * Returns all rows from the struttura_attivita table that match the criteria 'sat_id = :satId'.
	 */
	public StrutturaAttivita findByPrimaryKey(long satId) throws StrutturaAttivitaDaoException
	{
		StrutturaAttivita ret[] = findByDynamicSelect( SQL_SELECT + " WHERE sat_id = ?", new Object[] {  new Long(satId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the struttura_attivita table that match the criteria ''.
	 */
	public StrutturaAttivita[] findAll() throws StrutturaAttivitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY sat_id", null );
	}

	/** 
	 * Returns all rows from the struttura_attivita table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaAttivita[] findByStruttura(long strutturaStrId) throws StrutturaAttivitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_str_id = ?", new Object[] {  new Long(strutturaStrId) } );
	}

	/** 
	 * Returns all rows from the struttura_attivita table that match the criteria 'sat_id = :satId'.
	 */
	public StrutturaAttivita[] findWhereSatIdEquals(long satId) throws StrutturaAttivitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sat_id = ? ORDER BY sat_id", new Object[] {  new Long(satId) } );
	}

	/** 
	 * Returns all rows from the struttura_attivita table that match the criteria 'sat_attr_tennis = :satAttrTennis'.
	 */
	public StrutturaAttivita[] findWhereSatAttrTennisEquals(String satAttrTennis) throws StrutturaAttivitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sat_attr_tennis = ? ORDER BY sat_attr_tennis", new Object[] { satAttrTennis } );
	}

	/** 
	 * Returns all rows from the struttura_attivita table that match the criteria 'sat_badminton = :satBadminton'.
	 */
	public StrutturaAttivita[] findWhereSatBadmintonEquals(String satBadminton) throws StrutturaAttivitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sat_badminton = ? ORDER BY sat_badminton", new Object[] { satBadminton } );
	}

	/** 
	 * Returns all rows from the struttura_attivita table that match the criteria 'sat_spiaggia = :satSpiaggia'.
	 */
	public StrutturaAttivita[] findWhereSatSpiaggiaEquals(String satSpiaggia) throws StrutturaAttivitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sat_spiaggia = ? ORDER BY sat_spiaggia", new Object[] { satSpiaggia } );
	}

	/** 
	 * Returns all rows from the struttura_attivita table that match the criteria 'sat_campo_tennis = :satCampoTennis'.
	 */
	public StrutturaAttivita[] findWhereSatCampoTennisEquals(String satCampoTennis) throws StrutturaAttivitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sat_campo_tennis = ? ORDER BY sat_campo_tennis", new Object[] { satCampoTennis } );
	}

	/** 
	 * Returns all rows from the struttura_attivita table that match the criteria 'sat_biliardo = :satBiliardo'.
	 */
	public StrutturaAttivita[] findWhereSatBiliardoEquals(String satBiliardo) throws StrutturaAttivitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sat_biliardo = ? ORDER BY sat_biliardo", new Object[] { satBiliardo } );
	}

	/** 
	 * Returns all rows from the struttura_attivita table that match the criteria 'sat_ping_pong = :satPingPong'.
	 */
	public StrutturaAttivita[] findWhereSatPingPongEquals(String satPingPong) throws StrutturaAttivitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sat_ping_pong = ? ORDER BY sat_ping_pong", new Object[] { satPingPong } );
	}

	/** 
	 * Returns all rows from the struttura_attivita table that match the criteria 'sat_freccette = :satFreccette'.
	 */
	public StrutturaAttivita[] findWhereSatFreccetteEquals(String satFreccette) throws StrutturaAttivitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sat_freccette = ? ORDER BY sat_freccette", new Object[] { satFreccette } );
	}

	/** 
	 * Returns all rows from the struttura_attivita table that match the criteria 'sat_squash = :satSquash'.
	 */
	public StrutturaAttivita[] findWhereSatSquashEquals(String satSquash) throws StrutturaAttivitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sat_squash = ? ORDER BY sat_squash", new Object[] { satSquash } );
	}

	/** 
	 * Returns all rows from the struttura_attivita table that match the criteria 'sat_bowling = :satBowling'.
	 */
	public StrutturaAttivita[] findWhereSatBowlingEquals(String satBowling) throws StrutturaAttivitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sat_bowling = ? ORDER BY sat_bowling", new Object[] { satBowling } );
	}

	/** 
	 * Returns all rows from the struttura_attivita table that match the criteria 'sat_minigolf = :satMinigolf'.
	 */
	public StrutturaAttivita[] findWhereSatMinigolfEquals(String satMinigolf) throws StrutturaAttivitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sat_minigolf = ? ORDER BY sat_minigolf", new Object[] { satMinigolf } );
	}

	/** 
	 * Returns all rows from the struttura_attivita table that match the criteria 'sat_parco_acquatico = :satParcoAcquatico'.
	 */
	public StrutturaAttivita[] findWhereSatParcoAcquaticoEquals(String satParcoAcquatico) throws StrutturaAttivitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sat_parco_acquatico = ? ORDER BY sat_parco_acquatico", new Object[] { satParcoAcquatico } );
	}

	/** 
	 * Returns all rows from the struttura_attivita table that match the criteria 'sat_immersioni = :satImmersioni'.
	 */
	public StrutturaAttivita[] findWhereSatImmersioniEquals(String satImmersioni) throws StrutturaAttivitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sat_immersioni = ? ORDER BY sat_immersioni", new Object[] { satImmersioni } );
	}

	/** 
	 * Returns all rows from the struttura_attivita table that match the criteria 'sat_campo_golf = :satCampoGolf'.
	 */
	public StrutturaAttivita[] findWhereSatCampoGolfEquals(String satCampoGolf) throws StrutturaAttivitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sat_campo_golf = ? ORDER BY sat_campo_golf", new Object[] { satCampoGolf } );
	}

	/** 
	 * Returns all rows from the struttura_attivita table that match the criteria 'sat_windsurf = :satWindsurf'.
	 */
	public StrutturaAttivita[] findWhereSatWindsurfEquals(String satWindsurf) throws StrutturaAttivitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sat_windsurf = ? ORDER BY sat_windsurf", new Object[] { satWindsurf } );
	}

	/** 
	 * Returns all rows from the struttura_attivita table that match the criteria 'sat_snorkeling = :satSnorkeling'.
	 */
	public StrutturaAttivita[] findWhereSatSnorkelingEquals(String satSnorkeling) throws StrutturaAttivitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sat_snorkeling = ? ORDER BY sat_snorkeling", new Object[] { satSnorkeling } );
	}

	/** 
	 * Returns all rows from the struttura_attivita table that match the criteria 'sat_attrez_sport_acq = :satAttrezSportAcq'.
	 */
	public StrutturaAttivita[] findWhereSatAttrezSportAcqEquals(String satAttrezSportAcq) throws StrutturaAttivitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sat_attrez_sport_acq = ? ORDER BY sat_attrez_sport_acq", new Object[] { satAttrezSportAcq } );
	}

	/** 
	 * Returns all rows from the struttura_attivita table that match the criteria 'sat_canoa = :satCanoa'.
	 */
	public StrutturaAttivita[] findWhereSatCanoaEquals(String satCanoa) throws StrutturaAttivitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sat_canoa = ? ORDER BY sat_canoa", new Object[] { satCanoa } );
	}

	/** 
	 * Returns all rows from the struttura_attivita table that match the criteria 'sat_pesca = :satPesca'.
	 */
	public StrutturaAttivita[] findWhereSatPescaEquals(String satPesca) throws StrutturaAttivitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sat_pesca = ? ORDER BY sat_pesca", new Object[] { satPesca } );
	}

	/** 
	 * Returns all rows from the struttura_attivita table that match the criteria 'sat_equitazione = :satEquitazione'.
	 */
	public StrutturaAttivita[] findWhereSatEquitazioneEquals(String satEquitazione) throws StrutturaAttivitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sat_equitazione = ? ORDER BY sat_equitazione", new Object[] { satEquitazione } );
	}

	/** 
	 * Returns all rows from the struttura_attivita table that match the criteria 'sat_escursionismo = :satEscursionismo'.
	 */
	public StrutturaAttivita[] findWhereSatEscursionismoEquals(String satEscursionismo) throws StrutturaAttivitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sat_escursionismo = ? ORDER BY sat_escursionismo", new Object[] { satEscursionismo } );
	}

	/** 
	 * Returns all rows from the struttura_attivita table that match the criteria 'sat_sci = :satSci'.
	 */
	public StrutturaAttivita[] findWhereSatSciEquals(String satSci) throws StrutturaAttivitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sat_sci = ? ORDER BY sat_sci", new Object[] { satSci } );
	}

	/** 
	 * Returns all rows from the struttura_attivita table that match the criteria 'sat_escursione_bicicletta = :satEscursioneBicicletta'.
	 */
	public StrutturaAttivita[] findWhereSatEscursioneBiciclettaEquals(String satEscursioneBicicletta) throws StrutturaAttivitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sat_escursione_bicicletta = ? ORDER BY sat_escursione_bicicletta", new Object[] { satEscursioneBicicletta } );
	}

	/** 
	 * Returns all rows from the struttura_attivita table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaAttivita[] findWhereStrutturaStrIdEquals(long strutturaStrId) throws StrutturaAttivitaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_str_id = ? ORDER BY struttura_str_id", new Object[] {  new Long(strutturaStrId) } );
	}

	/**
	 * Method 'StrutturaAttivitaDaoImpl'
	 * 
	 */
	public StrutturaAttivitaDaoImpl()
	{
	}

	/**
	 * Method 'StrutturaAttivitaDaoImpl'
	 * 
	 * @param userConn
	 */
	public StrutturaAttivitaDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "struttura_attivita";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected StrutturaAttivita fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			StrutturaAttivita dto = new StrutturaAttivita();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected StrutturaAttivita[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			StrutturaAttivita dto = new StrutturaAttivita();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		StrutturaAttivita ret[] = new StrutturaAttivita[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(StrutturaAttivita dto, ResultSet rs) throws SQLException
	{
		dto.setSatId( rs.getLong( COLUMN_SAT_ID ) );
		dto.setSatAttrTennis( rs.getString( COLUMN_SAT_ATTR_TENNIS ) );
		dto.setSatBadminton( rs.getString( COLUMN_SAT_BADMINTON ) );
		dto.setSatSpiaggia( rs.getString( COLUMN_SAT_SPIAGGIA ) );
		dto.setSatCampoTennis( rs.getString( COLUMN_SAT_CAMPO_TENNIS ) );
		dto.setSatBiliardo( rs.getString( COLUMN_SAT_BILIARDO ) );
		dto.setSatPingPong( rs.getString( COLUMN_SAT_PING_PONG ) );
		dto.setSatFreccette( rs.getString( COLUMN_SAT_FRECCETTE ) );
		dto.setSatSquash( rs.getString( COLUMN_SAT_SQUASH ) );
		dto.setSatBowling( rs.getString( COLUMN_SAT_BOWLING ) );
		dto.setSatMinigolf( rs.getString( COLUMN_SAT_MINIGOLF ) );
		dto.setSatParcoAcquatico( rs.getString( COLUMN_SAT_PARCO_ACQUATICO ) );
		dto.setSatImmersioni( rs.getString( COLUMN_SAT_IMMERSIONI ) );
		dto.setSatCampoGolf( rs.getString( COLUMN_SAT_CAMPO_GOLF ) );
		dto.setSatWindsurf( rs.getString( COLUMN_SAT_WINDSURF ) );
		dto.setSatSnorkeling( rs.getString( COLUMN_SAT_SNORKELING ) );
		dto.setSatAttrezSportAcq( rs.getString( COLUMN_SAT_ATTREZ_SPORT_ACQ ) );
		dto.setSatCanoa( rs.getString( COLUMN_SAT_CANOA ) );
		dto.setSatPesca( rs.getString( COLUMN_SAT_PESCA ) );
		dto.setSatEquitazione( rs.getString( COLUMN_SAT_EQUITAZIONE ) );
		dto.setSatEscursionismo( rs.getString( COLUMN_SAT_ESCURSIONISMO ) );
		dto.setSatSci( rs.getString( COLUMN_SAT_SCI ) );
		dto.setSatEscursioneBicicletta( rs.getString( COLUMN_SAT_ESCURSIONE_BICICLETTA ) );
		dto.setStrutturaStrId( rs.getLong( COLUMN_STRUTTURA_STR_ID ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(StrutturaAttivita dto)
	{
	}

	/** 
	 * Returns all rows from the struttura_attivita table that match the specified arbitrary SQL statement
	 */
	public StrutturaAttivita[] findByDynamicSelect(String sql, Object[] sqlParams) throws StrutturaAttivitaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaAttivitaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the struttura_attivita table that match the specified arbitrary SQL statement
	 */
	public StrutturaAttivita[] findByDynamicWhere(String sql, Object[] sqlParams) throws StrutturaAttivitaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaAttivitaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
