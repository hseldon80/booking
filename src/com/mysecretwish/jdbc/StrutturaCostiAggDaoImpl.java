/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.jdbc;

import com.mysecretwish.dao.*;
import com.mysecretwish.factory.*;
import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class StrutturaCostiAggDaoImpl extends AbstractDAO implements StrutturaCostiAggDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT sca_id, sca_dep_cauzion, sca_inc_prezzo, sca_importo, struttura_str_id, sca_tipo_costo, sca_tipo_pag FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( sca_id, sca_dep_cauzion, sca_inc_prezzo, sca_importo, struttura_str_id, sca_tipo_costo, sca_tipo_pag ) VALUES ( ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET sca_id = ?, sca_dep_cauzion = ?, sca_inc_prezzo = ?, sca_importo = ?, struttura_str_id = ?, sca_tipo_costo = ?, sca_tipo_pag = ? WHERE sca_id = ? AND struttura_str_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE sca_id = ? AND struttura_str_id = ?";

	/** 
	 * Index of column sca_id
	 */
	protected static final int COLUMN_SCA_ID = 1;

	/** 
	 * Index of column sca_dep_cauzion
	 */
	protected static final int COLUMN_SCA_DEP_CAUZION = 2;

	/** 
	 * Index of column sca_inc_prezzo
	 */
	protected static final int COLUMN_SCA_INC_PREZZO = 3;

	/** 
	 * Index of column sca_importo
	 */
	protected static final int COLUMN_SCA_IMPORTO = 4;

	/** 
	 * Index of column struttura_str_id
	 */
	protected static final int COLUMN_STRUTTURA_STR_ID = 5;

	/** 
	 * Index of column sca_tipo_costo
	 */
	protected static final int COLUMN_SCA_TIPO_COSTO = 6;

	/** 
	 * Index of column sca_tipo_pag
	 */
	protected static final int COLUMN_SCA_TIPO_PAG = 7;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 7;

	/** 
	 * Index of primary-key column sca_id
	 */
	protected static final int PK_COLUMN_SCA_ID = 1;

	/** 
	 * Index of primary-key column struttura_str_id
	 */
	protected static final int PK_COLUMN_STRUTTURA_STR_ID = 2;

	/** 
	 * Inserts a new row in the struttura_costi_agg table.
	 */
	public StrutturaCostiAggPk insert(StrutturaCostiAgg dto) throws StrutturaCostiAggDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_strutture')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setScaId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getScaId() );
			stmt.setString( index++, dto.getScaDepCauzion() );
			stmt.setString( index++, dto.getScaIncPrezzo() );
			stmt.setFloat( index++, dto.getScaImporto() );
			stmt.setLong( index++, dto.getStrutturaStrId() );
			if (dto.isScaTipoCostoNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getScaTipoCosto() );
			}
		
			if (dto.isScaTipoPagNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getScaTipoPag() );
			}
		
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaCostiAggDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the struttura_costi_agg table.
	 */
	public void update(StrutturaCostiAggPk pk, StrutturaCostiAgg dto) throws StrutturaCostiAggDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getScaId() );
			stmt.setString( index++, dto.getScaDepCauzion() );
			stmt.setString( index++, dto.getScaIncPrezzo() );
			stmt.setFloat( index++, dto.getScaImporto() );
			stmt.setLong( index++, dto.getStrutturaStrId() );
			if (dto.isScaTipoCostoNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getScaTipoCosto() );
			}
		
			if (dto.isScaTipoPagNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getScaTipoPag() );
			}
		
			stmt.setLong( 8, pk.getScaId() );
			stmt.setLong( 9, pk.getStrutturaStrId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaCostiAggDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the struttura_costi_agg table.
	 */
	public void delete(StrutturaCostiAggPk pk) throws StrutturaCostiAggDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getScaId() );
			stmt.setLong( 2, pk.getStrutturaStrId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaCostiAggDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the struttura_costi_agg table that matches the specified primary-key value.
	 */
	public StrutturaCostiAgg findByPrimaryKey(StrutturaCostiAggPk pk) throws StrutturaCostiAggDaoException
	{
		return findByPrimaryKey( pk.getScaId(), pk.getStrutturaStrId() );
	}

	/** 
	 * Returns all rows from the struttura_costi_agg table that match the criteria 'sca_id = :scaId AND struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaCostiAgg findByPrimaryKey(long scaId, long strutturaStrId) throws StrutturaCostiAggDaoException
	{
		StrutturaCostiAgg ret[] = findByDynamicSelect( SQL_SELECT + " WHERE sca_id = ? AND struttura_str_id = ?", new Object[] {  new Long(scaId),  new Long(strutturaStrId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the struttura_costi_agg table that match the criteria ''.
	 */
	public StrutturaCostiAgg[] findAll() throws StrutturaCostiAggDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY sca_id, struttura_str_id", null );
	}

	/** 
	 * Returns all rows from the struttura_costi_agg table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaCostiAgg[] findByStruttura(long strutturaStrId) throws StrutturaCostiAggDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_str_id = ?", new Object[] {  new Long(strutturaStrId) } );
	}

	/** 
	 * Returns all rows from the struttura_costi_agg table that match the criteria 'sca_id = :scaId'.
	 */
	public StrutturaCostiAgg[] findWhereScaIdEquals(long scaId) throws StrutturaCostiAggDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sca_id = ? ORDER BY sca_id", new Object[] {  new Long(scaId) } );
	}

	/** 
	 * Returns all rows from the struttura_costi_agg table that match the criteria 'sca_dep_cauzion = :scaDepCauzion'.
	 */
	public StrutturaCostiAgg[] findWhereScaDepCauzionEquals(String scaDepCauzion) throws StrutturaCostiAggDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sca_dep_cauzion = ? ORDER BY sca_dep_cauzion", new Object[] { scaDepCauzion } );
	}

	/** 
	 * Returns all rows from the struttura_costi_agg table that match the criteria 'sca_inc_prezzo = :scaIncPrezzo'.
	 */
	public StrutturaCostiAgg[] findWhereScaIncPrezzoEquals(String scaIncPrezzo) throws StrutturaCostiAggDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sca_inc_prezzo = ? ORDER BY sca_inc_prezzo", new Object[] { scaIncPrezzo } );
	}

	/** 
	 * Returns all rows from the struttura_costi_agg table that match the criteria 'sca_importo = :scaImporto'.
	 */
	public StrutturaCostiAgg[] findWhereScaImportoEquals(float scaImporto) throws StrutturaCostiAggDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sca_importo = ? ORDER BY sca_importo", new Object[] {  new Float(scaImporto) } );
	}

	/** 
	 * Returns all rows from the struttura_costi_agg table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaCostiAgg[] findWhereStrutturaStrIdEquals(long strutturaStrId) throws StrutturaCostiAggDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_str_id = ? ORDER BY struttura_str_id", new Object[] {  new Long(strutturaStrId) } );
	}

	/** 
	 * Returns all rows from the struttura_costi_agg table that match the criteria 'sca_tipo_costo = :scaTipoCosto'.
	 */
	public StrutturaCostiAgg[] findWhereScaTipoCostoEquals(long scaTipoCosto) throws StrutturaCostiAggDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sca_tipo_costo = ? ORDER BY sca_tipo_costo", new Object[] {  new Long(scaTipoCosto) } );
	}

	/** 
	 * Returns all rows from the struttura_costi_agg table that match the criteria 'sca_tipo_pag = :scaTipoPag'.
	 */
	public StrutturaCostiAgg[] findWhereScaTipoPagEquals(long scaTipoPag) throws StrutturaCostiAggDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sca_tipo_pag = ? ORDER BY sca_tipo_pag", new Object[] {  new Long(scaTipoPag) } );
	}

	/**
	 * Method 'StrutturaCostiAggDaoImpl'
	 * 
	 */
	public StrutturaCostiAggDaoImpl()
	{
	}

	/**
	 * Method 'StrutturaCostiAggDaoImpl'
	 * 
	 * @param userConn
	 */
	public StrutturaCostiAggDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "struttura_costi_agg";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected StrutturaCostiAgg fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			StrutturaCostiAgg dto = new StrutturaCostiAgg();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected StrutturaCostiAgg[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			StrutturaCostiAgg dto = new StrutturaCostiAgg();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		StrutturaCostiAgg ret[] = new StrutturaCostiAgg[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(StrutturaCostiAgg dto, ResultSet rs) throws SQLException
	{
		dto.setScaId( rs.getLong( COLUMN_SCA_ID ) );
		dto.setScaDepCauzion( rs.getString( COLUMN_SCA_DEP_CAUZION ) );
		dto.setScaIncPrezzo( rs.getString( COLUMN_SCA_INC_PREZZO ) );
		dto.setScaImporto( rs.getFloat( COLUMN_SCA_IMPORTO ) );
		dto.setStrutturaStrId( rs.getLong( COLUMN_STRUTTURA_STR_ID ) );
		dto.setScaTipoCosto( rs.getLong( COLUMN_SCA_TIPO_COSTO ) );
		if (rs.wasNull()) {
			dto.setScaTipoCostoNull( true );
		}
		
		dto.setScaTipoPag( rs.getLong( COLUMN_SCA_TIPO_PAG ) );
		if (rs.wasNull()) {
			dto.setScaTipoPagNull( true );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(StrutturaCostiAgg dto)
	{
	}

	/** 
	 * Returns all rows from the struttura_costi_agg table that match the specified arbitrary SQL statement
	 */
	public StrutturaCostiAgg[] findByDynamicSelect(String sql, Object[] sqlParams) throws StrutturaCostiAggDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaCostiAggDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the struttura_costi_agg table that match the specified arbitrary SQL statement
	 */
	public StrutturaCostiAgg[] findByDynamicWhere(String sql, Object[] sqlParams) throws StrutturaCostiAggDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaCostiAggDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
