/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.jdbc;

import com.mysecretwish.dao.*;
import com.mysecretwish.factory.*;
import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class StrutturaTrasportiDaoImpl extends AbstractDAO implements StrutturaTrasportiDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT str_id, str_parc_custodito, str_parc_strada, str_autorimessa, str_parc_disabili, str_ricarica_elett, str_biglietti_trasp, str_autonoleggio, str_nolo_bici_grat, str_nolo_bici_pag, str_navetta, str_navetta_aero, struttura_str_id FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( str_id, str_parc_custodito, str_parc_strada, str_autorimessa, str_parc_disabili, str_ricarica_elett, str_biglietti_trasp, str_autonoleggio, str_nolo_bici_grat, str_nolo_bici_pag, str_navetta, str_navetta_aero, struttura_str_id ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET str_id = ?, str_parc_custodito = ?, str_parc_strada = ?, str_autorimessa = ?, str_parc_disabili = ?, str_ricarica_elett = ?, str_biglietti_trasp = ?, str_autonoleggio = ?, str_nolo_bici_grat = ?, str_nolo_bici_pag = ?, str_navetta = ?, str_navetta_aero = ?, struttura_str_id = ? WHERE str_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE str_id = ?";

	/** 
	 * Index of column str_id
	 */
	protected static final int COLUMN_STR_ID = 1;

	/** 
	 * Index of column str_parc_custodito
	 */
	protected static final int COLUMN_STR_PARC_CUSTODITO = 2;

	/** 
	 * Index of column str_parc_strada
	 */
	protected static final int COLUMN_STR_PARC_STRADA = 3;

	/** 
	 * Index of column str_autorimessa
	 */
	protected static final int COLUMN_STR_AUTORIMESSA = 4;

	/** 
	 * Index of column str_parc_disabili
	 */
	protected static final int COLUMN_STR_PARC_DISABILI = 5;

	/** 
	 * Index of column str_ricarica_elett
	 */
	protected static final int COLUMN_STR_RICARICA_ELETT = 6;

	/** 
	 * Index of column str_biglietti_trasp
	 */
	protected static final int COLUMN_STR_BIGLIETTI_TRASP = 7;

	/** 
	 * Index of column str_autonoleggio
	 */
	protected static final int COLUMN_STR_AUTONOLEGGIO = 8;

	/** 
	 * Index of column str_nolo_bici_grat
	 */
	protected static final int COLUMN_STR_NOLO_BICI_GRAT = 9;

	/** 
	 * Index of column str_nolo_bici_pag
	 */
	protected static final int COLUMN_STR_NOLO_BICI_PAG = 10;

	/** 
	 * Index of column str_navetta
	 */
	protected static final int COLUMN_STR_NAVETTA = 11;

	/** 
	 * Index of column str_navetta_aero
	 */
	protected static final int COLUMN_STR_NAVETTA_AERO = 12;

	/** 
	 * Index of column struttura_str_id
	 */
	protected static final int COLUMN_STRUTTURA_STR_ID = 13;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 13;

	/** 
	 * Index of primary-key column str_id
	 */
	protected static final int PK_COLUMN_STR_ID = 1;

	/** 
	 * Inserts a new row in the struttura_trasporti table.
	 */
	public StrutturaTrasportiPk insert(StrutturaTrasporti dto) throws StrutturaTrasportiDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_strutture')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setStrId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getStrId() );
			stmt.setString( index++, dto.getStrParcCustodito() );
			stmt.setString( index++, dto.getStrParcStrada() );
			stmt.setString( index++, dto.getStrAutorimessa() );
			stmt.setString( index++, dto.getStrParcDisabili() );
			stmt.setString( index++, dto.getStrRicaricaElett() );
			stmt.setString( index++, dto.getStrBigliettiTrasp() );
			stmt.setString( index++, dto.getStrAutonoleggio() );
			stmt.setString( index++, dto.getStrNoloBiciGrat() );
			stmt.setString( index++, dto.getStrNoloBiciPag() );
			stmt.setString( index++, dto.getStrNavetta() );
			stmt.setString( index++, dto.getStrNavettaAero() );
			stmt.setLong( index++, dto.getStrutturaStrId() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaTrasportiDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the struttura_trasporti table.
	 */
	public void update(StrutturaTrasportiPk pk, StrutturaTrasporti dto) throws StrutturaTrasportiDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getStrId() );
			stmt.setString( index++, dto.getStrParcCustodito() );
			stmt.setString( index++, dto.getStrParcStrada() );
			stmt.setString( index++, dto.getStrAutorimessa() );
			stmt.setString( index++, dto.getStrParcDisabili() );
			stmt.setString( index++, dto.getStrRicaricaElett() );
			stmt.setString( index++, dto.getStrBigliettiTrasp() );
			stmt.setString( index++, dto.getStrAutonoleggio() );
			stmt.setString( index++, dto.getStrNoloBiciGrat() );
			stmt.setString( index++, dto.getStrNoloBiciPag() );
			stmt.setString( index++, dto.getStrNavetta() );
			stmt.setString( index++, dto.getStrNavettaAero() );
			stmt.setLong( index++, dto.getStrutturaStrId() );
			stmt.setLong( 14, pk.getStrId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaTrasportiDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the struttura_trasporti table.
	 */
	public void delete(StrutturaTrasportiPk pk) throws StrutturaTrasportiDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getStrId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaTrasportiDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the struttura_trasporti table that matches the specified primary-key value.
	 */
	public StrutturaTrasporti findByPrimaryKey(StrutturaTrasportiPk pk) throws StrutturaTrasportiDaoException
	{
		return findByPrimaryKey( pk.getStrId() );
	}

	/** 
	 * Returns all rows from the struttura_trasporti table that match the criteria 'str_id = :strId'.
	 */
	public StrutturaTrasporti findByPrimaryKey(long strId) throws StrutturaTrasportiDaoException
	{
		StrutturaTrasporti ret[] = findByDynamicSelect( SQL_SELECT + " WHERE str_id = ?", new Object[] {  new Long(strId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the struttura_trasporti table that match the criteria ''.
	 */
	public StrutturaTrasporti[] findAll() throws StrutturaTrasportiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY str_id", null );
	}

	/** 
	 * Returns all rows from the struttura_trasporti table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaTrasporti[] findByStruttura(long strutturaStrId) throws StrutturaTrasportiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_str_id = ?", new Object[] {  new Long(strutturaStrId) } );
	}

	/** 
	 * Returns all rows from the struttura_trasporti table that match the criteria 'str_id = :strId'.
	 */
	public StrutturaTrasporti[] findWhereStrIdEquals(long strId) throws StrutturaTrasportiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE str_id = ? ORDER BY str_id", new Object[] {  new Long(strId) } );
	}

	/** 
	 * Returns all rows from the struttura_trasporti table that match the criteria 'str_parc_custodito = :strParcCustodito'.
	 */
	public StrutturaTrasporti[] findWhereStrParcCustoditoEquals(String strParcCustodito) throws StrutturaTrasportiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE str_parc_custodito = ? ORDER BY str_parc_custodito", new Object[] { strParcCustodito } );
	}

	/** 
	 * Returns all rows from the struttura_trasporti table that match the criteria 'str_parc_strada = :strParcStrada'.
	 */
	public StrutturaTrasporti[] findWhereStrParcStradaEquals(String strParcStrada) throws StrutturaTrasportiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE str_parc_strada = ? ORDER BY str_parc_strada", new Object[] { strParcStrada } );
	}

	/** 
	 * Returns all rows from the struttura_trasporti table that match the criteria 'str_autorimessa = :strAutorimessa'.
	 */
	public StrutturaTrasporti[] findWhereStrAutorimessaEquals(String strAutorimessa) throws StrutturaTrasportiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE str_autorimessa = ? ORDER BY str_autorimessa", new Object[] { strAutorimessa } );
	}

	/** 
	 * Returns all rows from the struttura_trasporti table that match the criteria 'str_parc_disabili = :strParcDisabili'.
	 */
	public StrutturaTrasporti[] findWhereStrParcDisabiliEquals(String strParcDisabili) throws StrutturaTrasportiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE str_parc_disabili = ? ORDER BY str_parc_disabili", new Object[] { strParcDisabili } );
	}

	/** 
	 * Returns all rows from the struttura_trasporti table that match the criteria 'str_ricarica_elett = :strRicaricaElett'.
	 */
	public StrutturaTrasporti[] findWhereStrRicaricaElettEquals(String strRicaricaElett) throws StrutturaTrasportiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE str_ricarica_elett = ? ORDER BY str_ricarica_elett", new Object[] { strRicaricaElett } );
	}

	/** 
	 * Returns all rows from the struttura_trasporti table that match the criteria 'str_biglietti_trasp = :strBigliettiTrasp'.
	 */
	public StrutturaTrasporti[] findWhereStrBigliettiTraspEquals(String strBigliettiTrasp) throws StrutturaTrasportiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE str_biglietti_trasp = ? ORDER BY str_biglietti_trasp", new Object[] { strBigliettiTrasp } );
	}

	/** 
	 * Returns all rows from the struttura_trasporti table that match the criteria 'str_autonoleggio = :strAutonoleggio'.
	 */
	public StrutturaTrasporti[] findWhereStrAutonoleggioEquals(String strAutonoleggio) throws StrutturaTrasportiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE str_autonoleggio = ? ORDER BY str_autonoleggio", new Object[] { strAutonoleggio } );
	}

	/** 
	 * Returns all rows from the struttura_trasporti table that match the criteria 'str_nolo_bici_grat = :strNoloBiciGrat'.
	 */
	public StrutturaTrasporti[] findWhereStrNoloBiciGratEquals(String strNoloBiciGrat) throws StrutturaTrasportiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE str_nolo_bici_grat = ? ORDER BY str_nolo_bici_grat", new Object[] { strNoloBiciGrat } );
	}

	/** 
	 * Returns all rows from the struttura_trasporti table that match the criteria 'str_nolo_bici_pag = :strNoloBiciPag'.
	 */
	public StrutturaTrasporti[] findWhereStrNoloBiciPagEquals(String strNoloBiciPag) throws StrutturaTrasportiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE str_nolo_bici_pag = ? ORDER BY str_nolo_bici_pag", new Object[] { strNoloBiciPag } );
	}

	/** 
	 * Returns all rows from the struttura_trasporti table that match the criteria 'str_navetta = :strNavetta'.
	 */
	public StrutturaTrasporti[] findWhereStrNavettaEquals(String strNavetta) throws StrutturaTrasportiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE str_navetta = ? ORDER BY str_navetta", new Object[] { strNavetta } );
	}

	/** 
	 * Returns all rows from the struttura_trasporti table that match the criteria 'str_navetta_aero = :strNavettaAero'.
	 */
	public StrutturaTrasporti[] findWhereStrNavettaAeroEquals(String strNavettaAero) throws StrutturaTrasportiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE str_navetta_aero = ? ORDER BY str_navetta_aero", new Object[] { strNavettaAero } );
	}

	/** 
	 * Returns all rows from the struttura_trasporti table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaTrasporti[] findWhereStrutturaStrIdEquals(long strutturaStrId) throws StrutturaTrasportiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_str_id = ? ORDER BY struttura_str_id", new Object[] {  new Long(strutturaStrId) } );
	}

	/**
	 * Method 'StrutturaTrasportiDaoImpl'
	 * 
	 */
	public StrutturaTrasportiDaoImpl()
	{
	}

	/**
	 * Method 'StrutturaTrasportiDaoImpl'
	 * 
	 * @param userConn
	 */
	public StrutturaTrasportiDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "struttura_trasporti";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected StrutturaTrasporti fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			StrutturaTrasporti dto = new StrutturaTrasporti();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected StrutturaTrasporti[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			StrutturaTrasporti dto = new StrutturaTrasporti();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		StrutturaTrasporti ret[] = new StrutturaTrasporti[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(StrutturaTrasporti dto, ResultSet rs) throws SQLException
	{
		dto.setStrId( rs.getLong( COLUMN_STR_ID ) );
		dto.setStrParcCustodito( rs.getString( COLUMN_STR_PARC_CUSTODITO ) );
		dto.setStrParcStrada( rs.getString( COLUMN_STR_PARC_STRADA ) );
		dto.setStrAutorimessa( rs.getString( COLUMN_STR_AUTORIMESSA ) );
		dto.setStrParcDisabili( rs.getString( COLUMN_STR_PARC_DISABILI ) );
		dto.setStrRicaricaElett( rs.getString( COLUMN_STR_RICARICA_ELETT ) );
		dto.setStrBigliettiTrasp( rs.getString( COLUMN_STR_BIGLIETTI_TRASP ) );
		dto.setStrAutonoleggio( rs.getString( COLUMN_STR_AUTONOLEGGIO ) );
		dto.setStrNoloBiciGrat( rs.getString( COLUMN_STR_NOLO_BICI_GRAT ) );
		dto.setStrNoloBiciPag( rs.getString( COLUMN_STR_NOLO_BICI_PAG ) );
		dto.setStrNavetta( rs.getString( COLUMN_STR_NAVETTA ) );
		dto.setStrNavettaAero( rs.getString( COLUMN_STR_NAVETTA_AERO ) );
		dto.setStrutturaStrId( rs.getLong( COLUMN_STRUTTURA_STR_ID ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(StrutturaTrasporti dto)
	{
	}

	/** 
	 * Returns all rows from the struttura_trasporti table that match the specified arbitrary SQL statement
	 */
	public StrutturaTrasporti[] findByDynamicSelect(String sql, Object[] sqlParams) throws StrutturaTrasportiDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaTrasportiDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the struttura_trasporti table that match the specified arbitrary SQL statement
	 */
	public StrutturaTrasporti[] findByDynamicWhere(String sql, Object[] sqlParams) throws StrutturaTrasportiDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaTrasportiDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
