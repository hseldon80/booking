/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.jdbc;

import com.mysecretwish.dao.*;
import com.mysecretwish.factory.*;
import java.util.Date;
import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class PreventiviPromozioniDaoImpl extends AbstractDAO implements PreventiviPromozioniDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT pro_id, pro_nome, pro_sconto, pro_tariffe_pertinenza, pro_camere_pertinenza, pro_data_validita_inzio, pro_data_validita_fine, pro_lunedi, pro_martedi, pro_mercoledi, pro_giovedi, pro_venerdi, pro_sabato, pro_domenica, pro_non_rimborsabile, pro_visibilita_sito, pro_carta_obb, camere_cam_id, tipologia_promozione_tpp_id, visibilita_vis_id, pro_vincolo, pro_orario, preventivi_id FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( pro_id, pro_nome, pro_sconto, pro_tariffe_pertinenza, pro_camere_pertinenza, pro_data_validita_inzio, pro_data_validita_fine, pro_lunedi, pro_martedi, pro_mercoledi, pro_giovedi, pro_venerdi, pro_sabato, pro_domenica, pro_non_rimborsabile, pro_visibilita_sito, pro_carta_obb, camere_cam_id, tipologia_promozione_tpp_id, visibilita_vis_id, pro_vincolo, pro_orario, preventivi_id ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET pro_id = ?, pro_nome = ?, pro_sconto = ?, pro_tariffe_pertinenza = ?, pro_camere_pertinenza = ?, pro_data_validita_inzio = ?, pro_data_validita_fine = ?, pro_lunedi = ?, pro_martedi = ?, pro_mercoledi = ?, pro_giovedi = ?, pro_venerdi = ?, pro_sabato = ?, pro_domenica = ?, pro_non_rimborsabile = ?, pro_visibilita_sito = ?, pro_carta_obb = ?, camere_cam_id = ?, tipologia_promozione_tpp_id = ?, visibilita_vis_id = ?, pro_vincolo = ?, pro_orario = ?, preventivi_id = ? WHERE pro_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE pro_id = ?";

	/** 
	 * Index of column pro_id
	 */
	protected static final int COLUMN_PRO_ID = 1;

	/** 
	 * Index of column pro_nome
	 */
	protected static final int COLUMN_PRO_NOME = 2;

	/** 
	 * Index of column pro_sconto
	 */
	protected static final int COLUMN_PRO_SCONTO = 3;

	/** 
	 * Index of column pro_tariffe_pertinenza
	 */
	protected static final int COLUMN_PRO_TARIFFE_PERTINENZA = 4;

	/** 
	 * Index of column pro_camere_pertinenza
	 */
	protected static final int COLUMN_PRO_CAMERE_PERTINENZA = 5;

	/** 
	 * Index of column pro_data_validita_inzio
	 */
	protected static final int COLUMN_PRO_DATA_VALIDITA_INZIO = 6;

	/** 
	 * Index of column pro_data_validita_fine
	 */
	protected static final int COLUMN_PRO_DATA_VALIDITA_FINE = 7;

	/** 
	 * Index of column pro_lunedi
	 */
	protected static final int COLUMN_PRO_LUNEDI = 8;

	/** 
	 * Index of column pro_martedi
	 */
	protected static final int COLUMN_PRO_MARTEDI = 9;

	/** 
	 * Index of column pro_mercoledi
	 */
	protected static final int COLUMN_PRO_MERCOLEDI = 10;

	/** 
	 * Index of column pro_giovedi
	 */
	protected static final int COLUMN_PRO_GIOVEDI = 11;

	/** 
	 * Index of column pro_venerdi
	 */
	protected static final int COLUMN_PRO_VENERDI = 12;

	/** 
	 * Index of column pro_sabato
	 */
	protected static final int COLUMN_PRO_SABATO = 13;

	/** 
	 * Index of column pro_domenica
	 */
	protected static final int COLUMN_PRO_DOMENICA = 14;

	/** 
	 * Index of column pro_non_rimborsabile
	 */
	protected static final int COLUMN_PRO_NON_RIMBORSABILE = 15;

	/** 
	 * Index of column pro_visibilita_sito
	 */
	protected static final int COLUMN_PRO_VISIBILITA_SITO = 16;

	/** 
	 * Index of column pro_carta_obb
	 */
	protected static final int COLUMN_PRO_CARTA_OBB = 17;

	/** 
	 * Index of column camere_cam_id
	 */
	protected static final int COLUMN_CAMERE_CAM_ID = 18;

	/** 
	 * Index of column tipologia_promozione_tpp_id
	 */
	protected static final int COLUMN_TIPOLOGIA_PROMOZIONE_TPP_ID = 19;

	/** 
	 * Index of column visibilita_vis_id
	 */
	protected static final int COLUMN_VISIBILITA_VIS_ID = 20;

	/** 
	 * Index of column pro_vincolo
	 */
	protected static final int COLUMN_PRO_VINCOLO = 21;

	/** 
	 * Index of column pro_orario
	 */
	protected static final int COLUMN_PRO_ORARIO = 22;

	/** 
	 * Index of column preventivi_id
	 */
	protected static final int COLUMN_PREVENTIVI_ID = 23;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 23;

	/** 
	 * Index of primary-key column pro_id
	 */
	protected static final int PK_COLUMN_PRO_ID = 1;

	/** 
	 * Inserts a new row in the preventivi_promozioni table.
	 */
	public PreventiviPromozioniPk insert(PreventiviPromozioni dto) throws PreventiviPromozioniDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_preventivi')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setProId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getProId() );
			stmt.setString( index++, dto.getProNome() );
			if (dto.isProScontoNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getProSconto() );
			}
		
			stmt.setString( index++, dto.getProTariffePertinenza() );
			stmt.setString( index++, dto.getProCamerePertinenza() );
			stmt.setDate(index++, dto.getProDataValiditaInzio()==null ? null : new java.sql.Date( dto.getProDataValiditaInzio().getTime() ) );
			stmt.setDate(index++, dto.getProDataValiditaFine()==null ? null : new java.sql.Date( dto.getProDataValiditaFine().getTime() ) );
			stmt.setString( index++, dto.getProLunedi() );
			stmt.setString( index++, dto.getProMartedi() );
			stmt.setString( index++, dto.getProMercoledi() );
			stmt.setString( index++, dto.getProGiovedi() );
			stmt.setString( index++, dto.getProVenerdi() );
			stmt.setString( index++, dto.getProSabato() );
			stmt.setString( index++, dto.getProDomenica() );
			stmt.setDate(index++, dto.getProNonRimborsabile()==null ? null : new java.sql.Date( dto.getProNonRimborsabile().getTime() ) );
			stmt.setDate(index++, dto.getProVisibilitaSito()==null ? null : new java.sql.Date( dto.getProVisibilitaSito().getTime() ) );
			stmt.setString( index++, dto.getProCartaObb() );
			stmt.setLong( index++, dto.getCamereCamId() );
			stmt.setLong( index++, dto.getTipologiaPromozioneTppId() );
			stmt.setLong( index++, dto.getVisibilitaVisId() );
			if (dto.isProVincoloNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getProVincolo() );
			}
		
			stmt.setDate(index++, dto.getProOrario()==null ? null : new java.sql.Date( dto.getProOrario().getTime() ) );
			if (dto.isPreventiviIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getPreventiviId() );
			}
		
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PreventiviPromozioniDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the preventivi_promozioni table.
	 */
	public void update(PreventiviPromozioniPk pk, PreventiviPromozioni dto) throws PreventiviPromozioniDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getProId() );
			stmt.setString( index++, dto.getProNome() );
			if (dto.isProScontoNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getProSconto() );
			}
		
			stmt.setString( index++, dto.getProTariffePertinenza() );
			stmt.setString( index++, dto.getProCamerePertinenza() );
			stmt.setDate(index++, dto.getProDataValiditaInzio()==null ? null : new java.sql.Date( dto.getProDataValiditaInzio().getTime() ) );
			stmt.setDate(index++, dto.getProDataValiditaFine()==null ? null : new java.sql.Date( dto.getProDataValiditaFine().getTime() ) );
			stmt.setString( index++, dto.getProLunedi() );
			stmt.setString( index++, dto.getProMartedi() );
			stmt.setString( index++, dto.getProMercoledi() );
			stmt.setString( index++, dto.getProGiovedi() );
			stmt.setString( index++, dto.getProVenerdi() );
			stmt.setString( index++, dto.getProSabato() );
			stmt.setString( index++, dto.getProDomenica() );
			stmt.setDate(index++, dto.getProNonRimborsabile()==null ? null : new java.sql.Date( dto.getProNonRimborsabile().getTime() ) );
			stmt.setDate(index++, dto.getProVisibilitaSito()==null ? null : new java.sql.Date( dto.getProVisibilitaSito().getTime() ) );
			stmt.setString( index++, dto.getProCartaObb() );
			stmt.setLong( index++, dto.getCamereCamId() );
			stmt.setLong( index++, dto.getTipologiaPromozioneTppId() );
			stmt.setLong( index++, dto.getVisibilitaVisId() );
			if (dto.isProVincoloNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getProVincolo() );
			}
		
			stmt.setDate(index++, dto.getProOrario()==null ? null : new java.sql.Date( dto.getProOrario().getTime() ) );
			if (dto.isPreventiviIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getPreventiviId() );
			}
		
			stmt.setLong( 24, pk.getProId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PreventiviPromozioniDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the preventivi_promozioni table.
	 */
	public void delete(PreventiviPromozioniPk pk) throws PreventiviPromozioniDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getProId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PreventiviPromozioniDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the preventivi_promozioni table that matches the specified primary-key value.
	 */
	public PreventiviPromozioni findByPrimaryKey(PreventiviPromozioniPk pk) throws PreventiviPromozioniDaoException
	{
		return findByPrimaryKey( pk.getProId() );
	}

	/** 
	 * Returns all rows from the preventivi_promozioni table that match the criteria 'pro_id = :proId'.
	 */
	public PreventiviPromozioni findByPrimaryKey(long proId) throws PreventiviPromozioniDaoException
	{
		PreventiviPromozioni ret[] = findByDynamicSelect( SQL_SELECT + " WHERE pro_id = ?", new Object[] {  new Long(proId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the preventivi_promozioni table that match the criteria ''.
	 */
	public PreventiviPromozioni[] findAll() throws PreventiviPromozioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY pro_id", null );
	}

	/** 
	 * Returns all rows from the preventivi_promozioni table that match the criteria 'preventivi_id = :preventiviId'.
	 */
	public PreventiviPromozioni[] findByPreventivi(long preventiviId) throws PreventiviPromozioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE preventivi_id = ?", new Object[] {  new Long(preventiviId) } );
	}

	/** 
	 * Returns all rows from the preventivi_promozioni table that match the criteria 'pro_id = :proId'.
	 */
	public PreventiviPromozioni[] findWhereProIdEquals(long proId) throws PreventiviPromozioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pro_id = ? ORDER BY pro_id", new Object[] {  new Long(proId) } );
	}

	/** 
	 * Returns all rows from the preventivi_promozioni table that match the criteria 'pro_nome = :proNome'.
	 */
	public PreventiviPromozioni[] findWhereProNomeEquals(String proNome) throws PreventiviPromozioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pro_nome = ? ORDER BY pro_nome", new Object[] { proNome } );
	}

	/** 
	 * Returns all rows from the preventivi_promozioni table that match the criteria 'pro_sconto = :proSconto'.
	 */
	public PreventiviPromozioni[] findWhereProScontoEquals(float proSconto) throws PreventiviPromozioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pro_sconto = ? ORDER BY pro_sconto", new Object[] {  new Float(proSconto) } );
	}

	/** 
	 * Returns all rows from the preventivi_promozioni table that match the criteria 'pro_tariffe_pertinenza = :proTariffePertinenza'.
	 */
	public PreventiviPromozioni[] findWhereProTariffePertinenzaEquals(String proTariffePertinenza) throws PreventiviPromozioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pro_tariffe_pertinenza = ? ORDER BY pro_tariffe_pertinenza", new Object[] { proTariffePertinenza } );
	}

	/** 
	 * Returns all rows from the preventivi_promozioni table that match the criteria 'pro_camere_pertinenza = :proCamerePertinenza'.
	 */
	public PreventiviPromozioni[] findWhereProCamerePertinenzaEquals(String proCamerePertinenza) throws PreventiviPromozioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pro_camere_pertinenza = ? ORDER BY pro_camere_pertinenza", new Object[] { proCamerePertinenza } );
	}

	/** 
	 * Returns all rows from the preventivi_promozioni table that match the criteria 'pro_data_validita_inzio = :proDataValiditaInzio'.
	 */
	public PreventiviPromozioni[] findWhereProDataValiditaInzioEquals(Date proDataValiditaInzio) throws PreventiviPromozioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pro_data_validita_inzio = ? ORDER BY pro_data_validita_inzio", new Object[] { proDataValiditaInzio==null ? null : new java.sql.Date( proDataValiditaInzio.getTime() ) } );
	}

	/** 
	 * Returns all rows from the preventivi_promozioni table that match the criteria 'pro_data_validita_fine = :proDataValiditaFine'.
	 */
	public PreventiviPromozioni[] findWhereProDataValiditaFineEquals(Date proDataValiditaFine) throws PreventiviPromozioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pro_data_validita_fine = ? ORDER BY pro_data_validita_fine", new Object[] { proDataValiditaFine==null ? null : new java.sql.Date( proDataValiditaFine.getTime() ) } );
	}

	/** 
	 * Returns all rows from the preventivi_promozioni table that match the criteria 'pro_lunedi = :proLunedi'.
	 */
	public PreventiviPromozioni[] findWhereProLunediEquals(String proLunedi) throws PreventiviPromozioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pro_lunedi = ? ORDER BY pro_lunedi", new Object[] { proLunedi } );
	}

	/** 
	 * Returns all rows from the preventivi_promozioni table that match the criteria 'pro_martedi = :proMartedi'.
	 */
	public PreventiviPromozioni[] findWhereProMartediEquals(String proMartedi) throws PreventiviPromozioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pro_martedi = ? ORDER BY pro_martedi", new Object[] { proMartedi } );
	}

	/** 
	 * Returns all rows from the preventivi_promozioni table that match the criteria 'pro_mercoledi = :proMercoledi'.
	 */
	public PreventiviPromozioni[] findWhereProMercolediEquals(String proMercoledi) throws PreventiviPromozioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pro_mercoledi = ? ORDER BY pro_mercoledi", new Object[] { proMercoledi } );
	}

	/** 
	 * Returns all rows from the preventivi_promozioni table that match the criteria 'pro_giovedi = :proGiovedi'.
	 */
	public PreventiviPromozioni[] findWhereProGiovediEquals(String proGiovedi) throws PreventiviPromozioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pro_giovedi = ? ORDER BY pro_giovedi", new Object[] { proGiovedi } );
	}

	/** 
	 * Returns all rows from the preventivi_promozioni table that match the criteria 'pro_venerdi = :proVenerdi'.
	 */
	public PreventiviPromozioni[] findWhereProVenerdiEquals(String proVenerdi) throws PreventiviPromozioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pro_venerdi = ? ORDER BY pro_venerdi", new Object[] { proVenerdi } );
	}

	/** 
	 * Returns all rows from the preventivi_promozioni table that match the criteria 'pro_sabato = :proSabato'.
	 */
	public PreventiviPromozioni[] findWhereProSabatoEquals(String proSabato) throws PreventiviPromozioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pro_sabato = ? ORDER BY pro_sabato", new Object[] { proSabato } );
	}

	/** 
	 * Returns all rows from the preventivi_promozioni table that match the criteria 'pro_domenica = :proDomenica'.
	 */
	public PreventiviPromozioni[] findWhereProDomenicaEquals(String proDomenica) throws PreventiviPromozioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pro_domenica = ? ORDER BY pro_domenica", new Object[] { proDomenica } );
	}

	/** 
	 * Returns all rows from the preventivi_promozioni table that match the criteria 'pro_non_rimborsabile = :proNonRimborsabile'.
	 */
	public PreventiviPromozioni[] findWhereProNonRimborsabileEquals(Date proNonRimborsabile) throws PreventiviPromozioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pro_non_rimborsabile = ? ORDER BY pro_non_rimborsabile", new Object[] { proNonRimborsabile==null ? null : new java.sql.Date( proNonRimborsabile.getTime() ) } );
	}

	/** 
	 * Returns all rows from the preventivi_promozioni table that match the criteria 'pro_visibilita_sito = :proVisibilitaSito'.
	 */
	public PreventiviPromozioni[] findWhereProVisibilitaSitoEquals(Date proVisibilitaSito) throws PreventiviPromozioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pro_visibilita_sito = ? ORDER BY pro_visibilita_sito", new Object[] { proVisibilitaSito==null ? null : new java.sql.Date( proVisibilitaSito.getTime() ) } );
	}

	/** 
	 * Returns all rows from the preventivi_promozioni table that match the criteria 'pro_carta_obb = :proCartaObb'.
	 */
	public PreventiviPromozioni[] findWhereProCartaObbEquals(String proCartaObb) throws PreventiviPromozioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pro_carta_obb = ? ORDER BY pro_carta_obb", new Object[] { proCartaObb } );
	}

	/** 
	 * Returns all rows from the preventivi_promozioni table that match the criteria 'camere_cam_id = :camereCamId'.
	 */
	public PreventiviPromozioni[] findWhereCamereCamIdEquals(long camereCamId) throws PreventiviPromozioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE camere_cam_id = ? ORDER BY camere_cam_id", new Object[] {  new Long(camereCamId) } );
	}

	/** 
	 * Returns all rows from the preventivi_promozioni table that match the criteria 'tipologia_promozione_tpp_id = :tipologiaPromozioneTppId'.
	 */
	public PreventiviPromozioni[] findWhereTipologiaPromozioneTppIdEquals(long tipologiaPromozioneTppId) throws PreventiviPromozioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE tipologia_promozione_tpp_id = ? ORDER BY tipologia_promozione_tpp_id", new Object[] {  new Long(tipologiaPromozioneTppId) } );
	}

	/** 
	 * Returns all rows from the preventivi_promozioni table that match the criteria 'visibilita_vis_id = :visibilitaVisId'.
	 */
	public PreventiviPromozioni[] findWhereVisibilitaVisIdEquals(long visibilitaVisId) throws PreventiviPromozioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE visibilita_vis_id = ? ORDER BY visibilita_vis_id", new Object[] {  new Long(visibilitaVisId) } );
	}

	/** 
	 * Returns all rows from the preventivi_promozioni table that match the criteria 'pro_vincolo = :proVincolo'.
	 */
	public PreventiviPromozioni[] findWhereProVincoloEquals(long proVincolo) throws PreventiviPromozioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pro_vincolo = ? ORDER BY pro_vincolo", new Object[] {  new Long(proVincolo) } );
	}

	/** 
	 * Returns all rows from the preventivi_promozioni table that match the criteria 'pro_orario = :proOrario'.
	 */
	public PreventiviPromozioni[] findWhereProOrarioEquals(Date proOrario) throws PreventiviPromozioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pro_orario = ? ORDER BY pro_orario", new Object[] { proOrario==null ? null : new java.sql.Date( proOrario.getTime() ) } );
	}

	/** 
	 * Returns all rows from the preventivi_promozioni table that match the criteria 'preventivi_id = :preventiviId'.
	 */
	public PreventiviPromozioni[] findWherePreventiviIdEquals(long preventiviId) throws PreventiviPromozioniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE preventivi_id = ? ORDER BY preventivi_id", new Object[] {  new Long(preventiviId) } );
	}

	/**
	 * Method 'PreventiviPromozioniDaoImpl'
	 * 
	 */
	public PreventiviPromozioniDaoImpl()
	{
	}

	/**
	 * Method 'PreventiviPromozioniDaoImpl'
	 * 
	 * @param userConn
	 */
	public PreventiviPromozioniDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "preventivi_promozioni";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected PreventiviPromozioni fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			PreventiviPromozioni dto = new PreventiviPromozioni();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected PreventiviPromozioni[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			PreventiviPromozioni dto = new PreventiviPromozioni();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		PreventiviPromozioni ret[] = new PreventiviPromozioni[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(PreventiviPromozioni dto, ResultSet rs) throws SQLException
	{
		dto.setProId( rs.getLong( COLUMN_PRO_ID ) );
		dto.setProNome( rs.getString( COLUMN_PRO_NOME ) );
		dto.setProSconto( rs.getFloat( COLUMN_PRO_SCONTO ) );
		if (rs.wasNull()) {
			dto.setProScontoNull( true );
		}
		
		dto.setProTariffePertinenza( rs.getString( COLUMN_PRO_TARIFFE_PERTINENZA ) );
		dto.setProCamerePertinenza( rs.getString( COLUMN_PRO_CAMERE_PERTINENZA ) );
		dto.setProDataValiditaInzio( rs.getDate(COLUMN_PRO_DATA_VALIDITA_INZIO ) );
		dto.setProDataValiditaFine( rs.getDate(COLUMN_PRO_DATA_VALIDITA_FINE ) );
		dto.setProLunedi( rs.getString( COLUMN_PRO_LUNEDI ) );
		dto.setProMartedi( rs.getString( COLUMN_PRO_MARTEDI ) );
		dto.setProMercoledi( rs.getString( COLUMN_PRO_MERCOLEDI ) );
		dto.setProGiovedi( rs.getString( COLUMN_PRO_GIOVEDI ) );
		dto.setProVenerdi( rs.getString( COLUMN_PRO_VENERDI ) );
		dto.setProSabato( rs.getString( COLUMN_PRO_SABATO ) );
		dto.setProDomenica( rs.getString( COLUMN_PRO_DOMENICA ) );
		dto.setProNonRimborsabile( rs.getDate(COLUMN_PRO_NON_RIMBORSABILE ) );
		dto.setProVisibilitaSito( rs.getDate(COLUMN_PRO_VISIBILITA_SITO ) );
		dto.setProCartaObb( rs.getString( COLUMN_PRO_CARTA_OBB ) );
		dto.setCamereCamId( rs.getLong( COLUMN_CAMERE_CAM_ID ) );
		dto.setTipologiaPromozioneTppId( rs.getLong( COLUMN_TIPOLOGIA_PROMOZIONE_TPP_ID ) );
		dto.setVisibilitaVisId( rs.getLong( COLUMN_VISIBILITA_VIS_ID ) );
		dto.setProVincolo( rs.getLong( COLUMN_PRO_VINCOLO ) );
		if (rs.wasNull()) {
			dto.setProVincoloNull( true );
		}
		
		dto.setProOrario( rs.getDate(COLUMN_PRO_ORARIO ) );
		dto.setPreventiviId( rs.getLong( COLUMN_PREVENTIVI_ID ) );
		if (rs.wasNull()) {
			dto.setPreventiviIdNull( true );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(PreventiviPromozioni dto)
	{
	}

	/** 
	 * Returns all rows from the preventivi_promozioni table that match the specified arbitrary SQL statement
	 */
	public PreventiviPromozioni[] findByDynamicSelect(String sql, Object[] sqlParams) throws PreventiviPromozioniDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PreventiviPromozioniDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the preventivi_promozioni table that match the specified arbitrary SQL statement
	 */
	public PreventiviPromozioni[] findByDynamicWhere(String sql, Object[] sqlParams) throws PreventiviPromozioniDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PreventiviPromozioniDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
