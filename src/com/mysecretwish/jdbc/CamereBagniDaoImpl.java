/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.jdbc;

import com.mysecretwish.dao.*;
import com.mysecretwish.factory.*;
import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class CamereBagniDaoImpl extends AbstractDAO implements CamereBagniDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT scb_id, scb_bagno_priv, scb_bagno_com, scb_carta_igi, scb_vasca_dis, scb_camp_emergenza, scb_wc_rialzato, scb_lavabo_basso, scb_sedia_doccia, scb_doccia_per_rotelle, scb_cabina_doccia, scb_wc_maniglioni, scb_bidet, scb_vasca, scb_vasca_doccia, scb_accappatoio, scb_prod_da_bagno, scb_serv_igie_agg, scb_asciugacap, scb_vasca_con_idro, scb_serv_igie_com, scb_sauna, scb_doccia, scb_pantofole, scb_wc, scb_bagno_agg, scb_spazzolino, scb_shampo, scb_balsamo, scb_bagnoschiuma, scb_cuffia, camere_cam_id FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( scb_id, scb_bagno_priv, scb_bagno_com, scb_carta_igi, scb_vasca_dis, scb_camp_emergenza, scb_wc_rialzato, scb_lavabo_basso, scb_sedia_doccia, scb_doccia_per_rotelle, scb_cabina_doccia, scb_wc_maniglioni, scb_bidet, scb_vasca, scb_vasca_doccia, scb_accappatoio, scb_prod_da_bagno, scb_serv_igie_agg, scb_asciugacap, scb_vasca_con_idro, scb_serv_igie_com, scb_sauna, scb_doccia, scb_pantofole, scb_wc, scb_bagno_agg, scb_spazzolino, scb_shampo, scb_balsamo, scb_bagnoschiuma, scb_cuffia, camere_cam_id ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET scb_id = ?, scb_bagno_priv = ?, scb_bagno_com = ?, scb_carta_igi = ?, scb_vasca_dis = ?, scb_camp_emergenza = ?, scb_wc_rialzato = ?, scb_lavabo_basso = ?, scb_sedia_doccia = ?, scb_doccia_per_rotelle = ?, scb_cabina_doccia = ?, scb_wc_maniglioni = ?, scb_bidet = ?, scb_vasca = ?, scb_vasca_doccia = ?, scb_accappatoio = ?, scb_prod_da_bagno = ?, scb_serv_igie_agg = ?, scb_asciugacap = ?, scb_vasca_con_idro = ?, scb_serv_igie_com = ?, scb_sauna = ?, scb_doccia = ?, scb_pantofole = ?, scb_wc = ?, scb_bagno_agg = ?, scb_spazzolino = ?, scb_shampo = ?, scb_balsamo = ?, scb_bagnoschiuma = ?, scb_cuffia = ?, camere_cam_id = ? WHERE scb_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE scb_id = ?";

	/** 
	 * Index of column scb_id
	 */
	protected static final int COLUMN_SCB_ID = 1;

	/** 
	 * Index of column scb_bagno_priv
	 */
	protected static final int COLUMN_SCB_BAGNO_PRIV = 2;

	/** 
	 * Index of column scb_bagno_com
	 */
	protected static final int COLUMN_SCB_BAGNO_COM = 3;

	/** 
	 * Index of column scb_carta_igi
	 */
	protected static final int COLUMN_SCB_CARTA_IGI = 4;

	/** 
	 * Index of column scb_vasca_dis
	 */
	protected static final int COLUMN_SCB_VASCA_DIS = 5;

	/** 
	 * Index of column scb_camp_emergenza
	 */
	protected static final int COLUMN_SCB_CAMP_EMERGENZA = 6;

	/** 
	 * Index of column scb_wc_rialzato
	 */
	protected static final int COLUMN_SCB_WC_RIALZATO = 7;

	/** 
	 * Index of column scb_lavabo_basso
	 */
	protected static final int COLUMN_SCB_LAVABO_BASSO = 8;

	/** 
	 * Index of column scb_sedia_doccia
	 */
	protected static final int COLUMN_SCB_SEDIA_DOCCIA = 9;

	/** 
	 * Index of column scb_doccia_per_rotelle
	 */
	protected static final int COLUMN_SCB_DOCCIA_PER_ROTELLE = 10;

	/** 
	 * Index of column scb_cabina_doccia
	 */
	protected static final int COLUMN_SCB_CABINA_DOCCIA = 11;

	/** 
	 * Index of column scb_wc_maniglioni
	 */
	protected static final int COLUMN_SCB_WC_MANIGLIONI = 12;

	/** 
	 * Index of column scb_bidet
	 */
	protected static final int COLUMN_SCB_BIDET = 13;

	/** 
	 * Index of column scb_vasca
	 */
	protected static final int COLUMN_SCB_VASCA = 14;

	/** 
	 * Index of column scb_vasca_doccia
	 */
	protected static final int COLUMN_SCB_VASCA_DOCCIA = 15;

	/** 
	 * Index of column scb_accappatoio
	 */
	protected static final int COLUMN_SCB_ACCAPPATOIO = 16;

	/** 
	 * Index of column scb_prod_da_bagno
	 */
	protected static final int COLUMN_SCB_PROD_DA_BAGNO = 17;

	/** 
	 * Index of column scb_serv_igie_agg
	 */
	protected static final int COLUMN_SCB_SERV_IGIE_AGG = 18;

	/** 
	 * Index of column scb_asciugacap
	 */
	protected static final int COLUMN_SCB_ASCIUGACAP = 19;

	/** 
	 * Index of column scb_vasca_con_idro
	 */
	protected static final int COLUMN_SCB_VASCA_CON_IDRO = 20;

	/** 
	 * Index of column scb_serv_igie_com
	 */
	protected static final int COLUMN_SCB_SERV_IGIE_COM = 21;

	/** 
	 * Index of column scb_sauna
	 */
	protected static final int COLUMN_SCB_SAUNA = 22;

	/** 
	 * Index of column scb_doccia
	 */
	protected static final int COLUMN_SCB_DOCCIA = 23;

	/** 
	 * Index of column scb_pantofole
	 */
	protected static final int COLUMN_SCB_PANTOFOLE = 24;

	/** 
	 * Index of column scb_wc
	 */
	protected static final int COLUMN_SCB_WC = 25;

	/** 
	 * Index of column scb_bagno_agg
	 */
	protected static final int COLUMN_SCB_BAGNO_AGG = 26;

	/** 
	 * Index of column scb_spazzolino
	 */
	protected static final int COLUMN_SCB_SPAZZOLINO = 27;

	/** 
	 * Index of column scb_shampo
	 */
	protected static final int COLUMN_SCB_SHAMPO = 28;

	/** 
	 * Index of column scb_balsamo
	 */
	protected static final int COLUMN_SCB_BALSAMO = 29;

	/** 
	 * Index of column scb_bagnoschiuma
	 */
	protected static final int COLUMN_SCB_BAGNOSCHIUMA = 30;

	/** 
	 * Index of column scb_cuffia
	 */
	protected static final int COLUMN_SCB_CUFFIA = 31;

	/** 
	 * Index of column camere_cam_id
	 */
	protected static final int COLUMN_CAMERE_CAM_ID = 32;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 32;

	/** 
	 * Index of primary-key column scb_id
	 */
	protected static final int PK_COLUMN_SCB_ID = 1;

	/** 
	 * Inserts a new row in the camere_bagni table.
	 */
	public CamereBagniPk insert(CamereBagni dto) throws CamereBagniDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_camere')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setScbId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getScbId() );
			stmt.setString( index++, dto.getScbBagnoPriv() );
			stmt.setString( index++, dto.getScbBagnoCom() );
			stmt.setString( index++, dto.getScbCartaIgi() );
			stmt.setString( index++, dto.getScbVascaDis() );
			stmt.setString( index++, dto.getScbCampEmergenza() );
			stmt.setString( index++, dto.getScbWcRialzato() );
			stmt.setString( index++, dto.getScbLavaboBasso() );
			stmt.setString( index++, dto.getScbSediaDoccia() );
			stmt.setString( index++, dto.getScbDocciaPerRotelle() );
			stmt.setString( index++, dto.getScbCabinaDoccia() );
			stmt.setString( index++, dto.getScbWcManiglioni() );
			stmt.setString( index++, dto.getScbBidet() );
			stmt.setString( index++, dto.getScbVasca() );
			stmt.setString( index++, dto.getScbVascaDoccia() );
			stmt.setString( index++, dto.getScbAccappatoio() );
			stmt.setString( index++, dto.getScbProdDaBagno() );
			stmt.setString( index++, dto.getScbServIgieAgg() );
			stmt.setString( index++, dto.getScbAsciugacap() );
			stmt.setString( index++, dto.getScbVascaConIdro() );
			stmt.setString( index++, dto.getScbServIgieCom() );
			stmt.setString( index++, dto.getScbSauna() );
			stmt.setString( index++, dto.getScbDoccia() );
			stmt.setString( index++, dto.getScbPantofole() );
			stmt.setString( index++, dto.getScbWc() );
			stmt.setString( index++, dto.getScbBagnoAgg() );
			stmt.setString( index++, dto.getScbSpazzolino() );
			stmt.setString( index++, dto.getScbShampo() );
			stmt.setString( index++, dto.getScbBalsamo() );
			stmt.setString( index++, dto.getScbBagnoschiuma() );
			stmt.setString( index++, dto.getScbCuffia() );
			stmt.setLong( index++, dto.getCamereCamId() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CamereBagniDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the camere_bagni table.
	 */
	public void update(CamereBagniPk pk, CamereBagni dto) throws CamereBagniDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getScbId() );
			stmt.setString( index++, dto.getScbBagnoPriv() );
			stmt.setString( index++, dto.getScbBagnoCom() );
			stmt.setString( index++, dto.getScbCartaIgi() );
			stmt.setString( index++, dto.getScbVascaDis() );
			stmt.setString( index++, dto.getScbCampEmergenza() );
			stmt.setString( index++, dto.getScbWcRialzato() );
			stmt.setString( index++, dto.getScbLavaboBasso() );
			stmt.setString( index++, dto.getScbSediaDoccia() );
			stmt.setString( index++, dto.getScbDocciaPerRotelle() );
			stmt.setString( index++, dto.getScbCabinaDoccia() );
			stmt.setString( index++, dto.getScbWcManiglioni() );
			stmt.setString( index++, dto.getScbBidet() );
			stmt.setString( index++, dto.getScbVasca() );
			stmt.setString( index++, dto.getScbVascaDoccia() );
			stmt.setString( index++, dto.getScbAccappatoio() );
			stmt.setString( index++, dto.getScbProdDaBagno() );
			stmt.setString( index++, dto.getScbServIgieAgg() );
			stmt.setString( index++, dto.getScbAsciugacap() );
			stmt.setString( index++, dto.getScbVascaConIdro() );
			stmt.setString( index++, dto.getScbServIgieCom() );
			stmt.setString( index++, dto.getScbSauna() );
			stmt.setString( index++, dto.getScbDoccia() );
			stmt.setString( index++, dto.getScbPantofole() );
			stmt.setString( index++, dto.getScbWc() );
			stmt.setString( index++, dto.getScbBagnoAgg() );
			stmt.setString( index++, dto.getScbSpazzolino() );
			stmt.setString( index++, dto.getScbShampo() );
			stmt.setString( index++, dto.getScbBalsamo() );
			stmt.setString( index++, dto.getScbBagnoschiuma() );
			stmt.setString( index++, dto.getScbCuffia() );
			stmt.setLong( index++, dto.getCamereCamId() );
			stmt.setLong( 33, pk.getScbId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CamereBagniDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the camere_bagni table.
	 */
	public void delete(CamereBagniPk pk) throws CamereBagniDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getScbId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CamereBagniDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the camere_bagni table that matches the specified primary-key value.
	 */
	public CamereBagni findByPrimaryKey(CamereBagniPk pk) throws CamereBagniDaoException
	{
		return findByPrimaryKey( pk.getScbId() );
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the criteria 'scb_id = :scbId'.
	 */
	public CamereBagni findByPrimaryKey(long scbId) throws CamereBagniDaoException
	{
		CamereBagni ret[] = findByDynamicSelect( SQL_SELECT + " WHERE scb_id = ?", new Object[] {  new Long(scbId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the criteria ''.
	 */
	public CamereBagni[] findAll() throws CamereBagniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY scb_id", null );
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the criteria 'camere_cam_id = :camereCamId'.
	 */
	public CamereBagni[] findByCamere(long camereCamId) throws CamereBagniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE camere_cam_id = ?", new Object[] {  new Long(camereCamId) } );
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the criteria 'scb_id = :scbId'.
	 */
	public CamereBagni[] findWhereScbIdEquals(long scbId) throws CamereBagniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scb_id = ? ORDER BY scb_id", new Object[] {  new Long(scbId) } );
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the criteria 'scb_bagno_priv = :scbBagnoPriv'.
	 */
	public CamereBagni[] findWhereScbBagnoPrivEquals(String scbBagnoPriv) throws CamereBagniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scb_bagno_priv = ? ORDER BY scb_bagno_priv", new Object[] { scbBagnoPriv } );
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the criteria 'scb_bagno_com = :scbBagnoCom'.
	 */
	public CamereBagni[] findWhereScbBagnoComEquals(String scbBagnoCom) throws CamereBagniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scb_bagno_com = ? ORDER BY scb_bagno_com", new Object[] { scbBagnoCom } );
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the criteria 'scb_carta_igi = :scbCartaIgi'.
	 */
	public CamereBagni[] findWhereScbCartaIgiEquals(String scbCartaIgi) throws CamereBagniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scb_carta_igi = ? ORDER BY scb_carta_igi", new Object[] { scbCartaIgi } );
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the criteria 'scb_vasca_dis = :scbVascaDis'.
	 */
	public CamereBagni[] findWhereScbVascaDisEquals(String scbVascaDis) throws CamereBagniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scb_vasca_dis = ? ORDER BY scb_vasca_dis", new Object[] { scbVascaDis } );
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the criteria 'scb_camp_emergenza = :scbCampEmergenza'.
	 */
	public CamereBagni[] findWhereScbCampEmergenzaEquals(String scbCampEmergenza) throws CamereBagniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scb_camp_emergenza = ? ORDER BY scb_camp_emergenza", new Object[] { scbCampEmergenza } );
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the criteria 'scb_wc_rialzato = :scbWcRialzato'.
	 */
	public CamereBagni[] findWhereScbWcRialzatoEquals(String scbWcRialzato) throws CamereBagniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scb_wc_rialzato = ? ORDER BY scb_wc_rialzato", new Object[] { scbWcRialzato } );
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the criteria 'scb_lavabo_basso = :scbLavaboBasso'.
	 */
	public CamereBagni[] findWhereScbLavaboBassoEquals(String scbLavaboBasso) throws CamereBagniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scb_lavabo_basso = ? ORDER BY scb_lavabo_basso", new Object[] { scbLavaboBasso } );
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the criteria 'scb_sedia_doccia = :scbSediaDoccia'.
	 */
	public CamereBagni[] findWhereScbSediaDocciaEquals(String scbSediaDoccia) throws CamereBagniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scb_sedia_doccia = ? ORDER BY scb_sedia_doccia", new Object[] { scbSediaDoccia } );
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the criteria 'scb_doccia_per_rotelle = :scbDocciaPerRotelle'.
	 */
	public CamereBagni[] findWhereScbDocciaPerRotelleEquals(String scbDocciaPerRotelle) throws CamereBagniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scb_doccia_per_rotelle = ? ORDER BY scb_doccia_per_rotelle", new Object[] { scbDocciaPerRotelle } );
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the criteria 'scb_cabina_doccia = :scbCabinaDoccia'.
	 */
	public CamereBagni[] findWhereScbCabinaDocciaEquals(String scbCabinaDoccia) throws CamereBagniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scb_cabina_doccia = ? ORDER BY scb_cabina_doccia", new Object[] { scbCabinaDoccia } );
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the criteria 'scb_wc_maniglioni = :scbWcManiglioni'.
	 */
	public CamereBagni[] findWhereScbWcManiglioniEquals(String scbWcManiglioni) throws CamereBagniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scb_wc_maniglioni = ? ORDER BY scb_wc_maniglioni", new Object[] { scbWcManiglioni } );
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the criteria 'scb_bidet = :scbBidet'.
	 */
	public CamereBagni[] findWhereScbBidetEquals(String scbBidet) throws CamereBagniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scb_bidet = ? ORDER BY scb_bidet", new Object[] { scbBidet } );
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the criteria 'scb_vasca = :scbVasca'.
	 */
	public CamereBagni[] findWhereScbVascaEquals(String scbVasca) throws CamereBagniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scb_vasca = ? ORDER BY scb_vasca", new Object[] { scbVasca } );
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the criteria 'scb_vasca_doccia = :scbVascaDoccia'.
	 */
	public CamereBagni[] findWhereScbVascaDocciaEquals(String scbVascaDoccia) throws CamereBagniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scb_vasca_doccia = ? ORDER BY scb_vasca_doccia", new Object[] { scbVascaDoccia } );
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the criteria 'scb_accappatoio = :scbAccappatoio'.
	 */
	public CamereBagni[] findWhereScbAccappatoioEquals(String scbAccappatoio) throws CamereBagniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scb_accappatoio = ? ORDER BY scb_accappatoio", new Object[] { scbAccappatoio } );
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the criteria 'scb_prod_da_bagno = :scbProdDaBagno'.
	 */
	public CamereBagni[] findWhereScbProdDaBagnoEquals(String scbProdDaBagno) throws CamereBagniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scb_prod_da_bagno = ? ORDER BY scb_prod_da_bagno", new Object[] { scbProdDaBagno } );
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the criteria 'scb_serv_igie_agg = :scbServIgieAgg'.
	 */
	public CamereBagni[] findWhereScbServIgieAggEquals(String scbServIgieAgg) throws CamereBagniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scb_serv_igie_agg = ? ORDER BY scb_serv_igie_agg", new Object[] { scbServIgieAgg } );
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the criteria 'scb_asciugacap = :scbAsciugacap'.
	 */
	public CamereBagni[] findWhereScbAsciugacapEquals(String scbAsciugacap) throws CamereBagniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scb_asciugacap = ? ORDER BY scb_asciugacap", new Object[] { scbAsciugacap } );
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the criteria 'scb_vasca_con_idro = :scbVascaConIdro'.
	 */
	public CamereBagni[] findWhereScbVascaConIdroEquals(String scbVascaConIdro) throws CamereBagniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scb_vasca_con_idro = ? ORDER BY scb_vasca_con_idro", new Object[] { scbVascaConIdro } );
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the criteria 'scb_serv_igie_com = :scbServIgieCom'.
	 */
	public CamereBagni[] findWhereScbServIgieComEquals(String scbServIgieCom) throws CamereBagniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scb_serv_igie_com = ? ORDER BY scb_serv_igie_com", new Object[] { scbServIgieCom } );
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the criteria 'scb_sauna = :scbSauna'.
	 */
	public CamereBagni[] findWhereScbSaunaEquals(String scbSauna) throws CamereBagniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scb_sauna = ? ORDER BY scb_sauna", new Object[] { scbSauna } );
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the criteria 'scb_doccia = :scbDoccia'.
	 */
	public CamereBagni[] findWhereScbDocciaEquals(String scbDoccia) throws CamereBagniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scb_doccia = ? ORDER BY scb_doccia", new Object[] { scbDoccia } );
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the criteria 'scb_pantofole = :scbPantofole'.
	 */
	public CamereBagni[] findWhereScbPantofoleEquals(String scbPantofole) throws CamereBagniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scb_pantofole = ? ORDER BY scb_pantofole", new Object[] { scbPantofole } );
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the criteria 'scb_wc = :scbWc'.
	 */
	public CamereBagni[] findWhereScbWcEquals(String scbWc) throws CamereBagniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scb_wc = ? ORDER BY scb_wc", new Object[] { scbWc } );
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the criteria 'scb_bagno_agg = :scbBagnoAgg'.
	 */
	public CamereBagni[] findWhereScbBagnoAggEquals(String scbBagnoAgg) throws CamereBagniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scb_bagno_agg = ? ORDER BY scb_bagno_agg", new Object[] { scbBagnoAgg } );
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the criteria 'scb_spazzolino = :scbSpazzolino'.
	 */
	public CamereBagni[] findWhereScbSpazzolinoEquals(String scbSpazzolino) throws CamereBagniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scb_spazzolino = ? ORDER BY scb_spazzolino", new Object[] { scbSpazzolino } );
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the criteria 'scb_shampo = :scbShampo'.
	 */
	public CamereBagni[] findWhereScbShampoEquals(String scbShampo) throws CamereBagniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scb_shampo = ? ORDER BY scb_shampo", new Object[] { scbShampo } );
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the criteria 'scb_balsamo = :scbBalsamo'.
	 */
	public CamereBagni[] findWhereScbBalsamoEquals(String scbBalsamo) throws CamereBagniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scb_balsamo = ? ORDER BY scb_balsamo", new Object[] { scbBalsamo } );
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the criteria 'scb_bagnoschiuma = :scbBagnoschiuma'.
	 */
	public CamereBagni[] findWhereScbBagnoschiumaEquals(String scbBagnoschiuma) throws CamereBagniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scb_bagnoschiuma = ? ORDER BY scb_bagnoschiuma", new Object[] { scbBagnoschiuma } );
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the criteria 'scb_cuffia = :scbCuffia'.
	 */
	public CamereBagni[] findWhereScbCuffiaEquals(String scbCuffia) throws CamereBagniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scb_cuffia = ? ORDER BY scb_cuffia", new Object[] { scbCuffia } );
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the criteria 'camere_cam_id = :camereCamId'.
	 */
	public CamereBagni[] findWhereCamereCamIdEquals(long camereCamId) throws CamereBagniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE camere_cam_id = ? ORDER BY camere_cam_id", new Object[] {  new Long(camereCamId) } );
	}

	/**
	 * Method 'CamereBagniDaoImpl'
	 * 
	 */
	public CamereBagniDaoImpl()
	{
	}

	/**
	 * Method 'CamereBagniDaoImpl'
	 * 
	 * @param userConn
	 */
	public CamereBagniDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "camere_bagni";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected CamereBagni fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			CamereBagni dto = new CamereBagni();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected CamereBagni[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			CamereBagni dto = new CamereBagni();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		CamereBagni ret[] = new CamereBagni[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(CamereBagni dto, ResultSet rs) throws SQLException
	{
		dto.setScbId( rs.getLong( COLUMN_SCB_ID ) );
		dto.setScbBagnoPriv( rs.getString( COLUMN_SCB_BAGNO_PRIV ) );
		dto.setScbBagnoCom( rs.getString( COLUMN_SCB_BAGNO_COM ) );
		dto.setScbCartaIgi( rs.getString( COLUMN_SCB_CARTA_IGI ) );
		dto.setScbVascaDis( rs.getString( COLUMN_SCB_VASCA_DIS ) );
		dto.setScbCampEmergenza( rs.getString( COLUMN_SCB_CAMP_EMERGENZA ) );
		dto.setScbWcRialzato( rs.getString( COLUMN_SCB_WC_RIALZATO ) );
		dto.setScbLavaboBasso( rs.getString( COLUMN_SCB_LAVABO_BASSO ) );
		dto.setScbSediaDoccia( rs.getString( COLUMN_SCB_SEDIA_DOCCIA ) );
		dto.setScbDocciaPerRotelle( rs.getString( COLUMN_SCB_DOCCIA_PER_ROTELLE ) );
		dto.setScbCabinaDoccia( rs.getString( COLUMN_SCB_CABINA_DOCCIA ) );
		dto.setScbWcManiglioni( rs.getString( COLUMN_SCB_WC_MANIGLIONI ) );
		dto.setScbBidet( rs.getString( COLUMN_SCB_BIDET ) );
		dto.setScbVasca( rs.getString( COLUMN_SCB_VASCA ) );
		dto.setScbVascaDoccia( rs.getString( COLUMN_SCB_VASCA_DOCCIA ) );
		dto.setScbAccappatoio( rs.getString( COLUMN_SCB_ACCAPPATOIO ) );
		dto.setScbProdDaBagno( rs.getString( COLUMN_SCB_PROD_DA_BAGNO ) );
		dto.setScbServIgieAgg( rs.getString( COLUMN_SCB_SERV_IGIE_AGG ) );
		dto.setScbAsciugacap( rs.getString( COLUMN_SCB_ASCIUGACAP ) );
		dto.setScbVascaConIdro( rs.getString( COLUMN_SCB_VASCA_CON_IDRO ) );
		dto.setScbServIgieCom( rs.getString( COLUMN_SCB_SERV_IGIE_COM ) );
		dto.setScbSauna( rs.getString( COLUMN_SCB_SAUNA ) );
		dto.setScbDoccia( rs.getString( COLUMN_SCB_DOCCIA ) );
		dto.setScbPantofole( rs.getString( COLUMN_SCB_PANTOFOLE ) );
		dto.setScbWc( rs.getString( COLUMN_SCB_WC ) );
		dto.setScbBagnoAgg( rs.getString( COLUMN_SCB_BAGNO_AGG ) );
		dto.setScbSpazzolino( rs.getString( COLUMN_SCB_SPAZZOLINO ) );
		dto.setScbShampo( rs.getString( COLUMN_SCB_SHAMPO ) );
		dto.setScbBalsamo( rs.getString( COLUMN_SCB_BALSAMO ) );
		dto.setScbBagnoschiuma( rs.getString( COLUMN_SCB_BAGNOSCHIUMA ) );
		dto.setScbCuffia( rs.getString( COLUMN_SCB_CUFFIA ) );
		dto.setCamereCamId( rs.getLong( COLUMN_CAMERE_CAM_ID ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(CamereBagni dto)
	{
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the specified arbitrary SQL statement
	 */
	public CamereBagni[] findByDynamicSelect(String sql, Object[] sqlParams) throws CamereBagniDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CamereBagniDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the camere_bagni table that match the specified arbitrary SQL statement
	 */
	public CamereBagni[] findByDynamicWhere(String sql, Object[] sqlParams) throws CamereBagniDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CamereBagniDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
