/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.jdbc;

import com.mysecretwish.dao.*;
import com.mysecretwish.factory.*;
import java.util.Date;
import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class UtenteNotificheDaoImpl extends AbstractDAO implements UtenteNotificheDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT notifiche_id, utente_id, data_notifica, testo_notifica FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( notifiche_id, utente_id, data_notifica, testo_notifica ) VALUES ( ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET notifiche_id = ?, utente_id = ?, data_notifica = ?, testo_notifica = ? WHERE notifiche_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE notifiche_id = ?";

	/** 
	 * Index of column notifiche_id
	 */
	protected static final int COLUMN_NOTIFICHE_ID = 1;

	/** 
	 * Index of column utente_id
	 */
	protected static final int COLUMN_UTENTE_ID = 2;

	/** 
	 * Index of column data_notifica
	 */
	protected static final int COLUMN_DATA_NOTIFICA = 3;

	/** 
	 * Index of column testo_notifica
	 */
	protected static final int COLUMN_TESTO_NOTIFICA = 4;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 4;

	/** 
	 * Index of primary-key column notifiche_id
	 */
	protected static final int PK_COLUMN_NOTIFICHE_ID = 1;

	/** 
	 * Inserts a new row in the utente_notifiche table.
	 */
	public UtenteNotifichePk insert(UtenteNotifiche dto) throws UtenteNotificheDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_messaggi')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setNotificheId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getNotificheId() );
			if (dto.isUtenteIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getUtenteId() );
			}
		
			stmt.setDate(index++, dto.getDataNotifica()==null ? null : new java.sql.Date( dto.getDataNotifica().getTime() ) );
			stmt.setString( index++, dto.getTestoNotifica() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UtenteNotificheDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the utente_notifiche table.
	 */
	public void update(UtenteNotifichePk pk, UtenteNotifiche dto) throws UtenteNotificheDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getNotificheId() );
			if (dto.isUtenteIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getUtenteId() );
			}
		
			stmt.setDate(index++, dto.getDataNotifica()==null ? null : new java.sql.Date( dto.getDataNotifica().getTime() ) );
			stmt.setString( index++, dto.getTestoNotifica() );
			stmt.setLong( 5, pk.getNotificheId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UtenteNotificheDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the utente_notifiche table.
	 */
	public void delete(UtenteNotifichePk pk) throws UtenteNotificheDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getNotificheId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UtenteNotificheDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the utente_notifiche table that matches the specified primary-key value.
	 */
	public UtenteNotifiche findByPrimaryKey(UtenteNotifichePk pk) throws UtenteNotificheDaoException
	{
		return findByPrimaryKey( pk.getNotificheId() );
	}

	/** 
	 * Returns all rows from the utente_notifiche table that match the criteria 'notifiche_id = :notificheId'.
	 */
	public UtenteNotifiche findByPrimaryKey(long notificheId) throws UtenteNotificheDaoException
	{
		UtenteNotifiche ret[] = findByDynamicSelect( SQL_SELECT + " WHERE notifiche_id = ?", new Object[] {  new Long(notificheId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the utente_notifiche table that match the criteria ''.
	 */
	public UtenteNotifiche[] findAll() throws UtenteNotificheDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY notifiche_id", null );
	}

	/** 
	 * Returns all rows from the utente_notifiche table that match the criteria 'utente_id = :utenteId'.
	 */
	public UtenteNotifiche[] findByUtente(long utenteId) throws UtenteNotificheDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE utente_id = ?", new Object[] {  new Long(utenteId) } );
	}

	/** 
	 * Returns all rows from the utente_notifiche table that match the criteria 'notifiche_id = :notificheId'.
	 */
	public UtenteNotifiche[] findWhereNotificheIdEquals(long notificheId) throws UtenteNotificheDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE notifiche_id = ? ORDER BY notifiche_id", new Object[] {  new Long(notificheId) } );
	}

	/** 
	 * Returns all rows from the utente_notifiche table that match the criteria 'utente_id = :utenteId'.
	 */
	public UtenteNotifiche[] findWhereUtenteIdEquals(long utenteId) throws UtenteNotificheDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE utente_id = ? ORDER BY utente_id", new Object[] {  new Long(utenteId) } );
	}

	/** 
	 * Returns all rows from the utente_notifiche table that match the criteria 'data_notifica = :dataNotifica'.
	 */
	public UtenteNotifiche[] findWhereDataNotificaEquals(Date dataNotifica) throws UtenteNotificheDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE data_notifica = ? ORDER BY data_notifica", new Object[] { dataNotifica==null ? null : new java.sql.Date( dataNotifica.getTime() ) } );
	}

	/** 
	 * Returns all rows from the utente_notifiche table that match the criteria 'testo_notifica = :testoNotifica'.
	 */
	public UtenteNotifiche[] findWhereTestoNotificaEquals(String testoNotifica) throws UtenteNotificheDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE testo_notifica = ? ORDER BY testo_notifica", new Object[] { testoNotifica } );
	}

	/**
	 * Method 'UtenteNotificheDaoImpl'
	 * 
	 */
	public UtenteNotificheDaoImpl()
	{
	}

	/**
	 * Method 'UtenteNotificheDaoImpl'
	 * 
	 * @param userConn
	 */
	public UtenteNotificheDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "utente_notifiche";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected UtenteNotifiche fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			UtenteNotifiche dto = new UtenteNotifiche();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected UtenteNotifiche[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			UtenteNotifiche dto = new UtenteNotifiche();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		UtenteNotifiche ret[] = new UtenteNotifiche[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(UtenteNotifiche dto, ResultSet rs) throws SQLException
	{
		dto.setNotificheId( rs.getLong( COLUMN_NOTIFICHE_ID ) );
		dto.setUtenteId( rs.getLong( COLUMN_UTENTE_ID ) );
		if (rs.wasNull()) {
			dto.setUtenteIdNull( true );
		}
		
		dto.setDataNotifica( rs.getDate(COLUMN_DATA_NOTIFICA ) );
		dto.setTestoNotifica( rs.getString( COLUMN_TESTO_NOTIFICA ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(UtenteNotifiche dto)
	{
	}

	/** 
	 * Returns all rows from the utente_notifiche table that match the specified arbitrary SQL statement
	 */
	public UtenteNotifiche[] findByDynamicSelect(String sql, Object[] sqlParams) throws UtenteNotificheDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UtenteNotificheDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the utente_notifiche table that match the specified arbitrary SQL statement
	 */
	public UtenteNotifiche[] findByDynamicWhere(String sql, Object[] sqlParams) throws UtenteNotificheDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UtenteNotificheDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
