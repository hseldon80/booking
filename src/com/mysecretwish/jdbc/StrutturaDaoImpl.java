/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.jdbc;

import com.mysecretwish.dao.*;
import com.mysecretwish.factory.*;
import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class StrutturaDaoImpl extends AbstractDAO implements StrutturaDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT str_id, str_indirizzo, str_stelle, str_pms, str_channel_manager, str_iva, str_nome, fk_comune, fk_tipologia FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( str_id, str_indirizzo, str_stelle, str_pms, str_channel_manager, str_iva, str_nome, fk_comune, fk_tipologia ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET str_id = ?, str_indirizzo = ?, str_stelle = ?, str_pms = ?, str_channel_manager = ?, str_iva = ?, str_nome = ?, fk_comune = ?, fk_tipologia = ? WHERE str_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE str_id = ?";

	/** 
	 * Index of column str_id
	 */
	protected static final int COLUMN_STR_ID = 1;

	/** 
	 * Index of column str_indirizzo
	 */
	protected static final int COLUMN_STR_INDIRIZZO = 2;

	/** 
	 * Index of column str_stelle
	 */
	protected static final int COLUMN_STR_STELLE = 3;

	/** 
	 * Index of column str_pms
	 */
	protected static final int COLUMN_STR_PMS = 4;

	/** 
	 * Index of column str_channel_manager
	 */
	protected static final int COLUMN_STR_CHANNEL_MANAGER = 5;

	/** 
	 * Index of column str_iva
	 */
	protected static final int COLUMN_STR_IVA = 6;

	/** 
	 * Index of column str_nome
	 */
	protected static final int COLUMN_STR_NOME = 7;

	/** 
	 * Index of column fk_comune
	 */
	protected static final int COLUMN_FK_COMUNE = 8;

	/** 
	 * Index of column fk_tipologia
	 */
	protected static final int COLUMN_FK_TIPOLOGIA = 9;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 9;

	/** 
	 * Index of primary-key column str_id
	 */
	protected static final int PK_COLUMN_STR_ID = 1;

	/** 
	 * Inserts a new row in the struttura table.
	 */
	public StrutturaPk insert(Struttura dto) throws StrutturaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_strutture')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setStrId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getStrId() );
			stmt.setString( index++, dto.getStrIndirizzo() );
			stmt.setString( index++, dto.getStrStelle() );
			stmt.setString( index++, dto.getStrPms() );
			stmt.setString( index++, dto.getStrChannelManager() );
			if (dto.isStrIvaNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getStrIva() );
			}
		
			stmt.setString( index++, dto.getStrNome() );
			if (dto.isFkComuneNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getFkComune() );
			}
		
			if (dto.isFkTipologiaNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getFkTipologia() );
			}
		
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the struttura table.
	 */
	public void update(StrutturaPk pk, Struttura dto) throws StrutturaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getStrId() );
			stmt.setString( index++, dto.getStrIndirizzo() );
			stmt.setString( index++, dto.getStrStelle() );
			stmt.setString( index++, dto.getStrPms() );
			stmt.setString( index++, dto.getStrChannelManager() );
			if (dto.isStrIvaNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getStrIva() );
			}
		
			stmt.setString( index++, dto.getStrNome() );
			if (dto.isFkComuneNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getFkComune() );
			}
		
			if (dto.isFkTipologiaNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getFkTipologia() );
			}
		
			stmt.setLong( 10, pk.getStrId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the struttura table.
	 */
	public void delete(StrutturaPk pk) throws StrutturaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getStrId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the struttura table that matches the specified primary-key value.
	 */
	public Struttura findByPrimaryKey(StrutturaPk pk) throws StrutturaDaoException
	{
		return findByPrimaryKey( pk.getStrId() );
	}

	/** 
	 * Returns all rows from the struttura table that match the criteria 'str_id = :strId'.
	 */
	public Struttura findByPrimaryKey(long strId) throws StrutturaDaoException
	{
		Struttura ret[] = findByDynamicSelect( SQL_SELECT + " WHERE str_id = ?", new Object[] {  new Long(strId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the struttura table that match the criteria 'struttura_attivita_sat_id = :strutturaAttivitaSatId'.
	 */
	public Struttura[] findByStrutturaAttivita(int strutturaAttivitaSatId) throws StrutturaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_attivita_sat_id = ?", new Object[] {  new Integer(strutturaAttivitaSatId) } );
	}

	/** 
	 * Returns all rows from the struttura table that match the criteria 'struttura_pasti_spa_id = :strutturaPastiSpaId'.
	 */
	public Struttura[] findByStrutturaPasti(int strutturaPastiSpaId) throws StrutturaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_pasti_spa_id = ?", new Object[] {  new Integer(strutturaPastiSpaId) } );
	}

	/** 
	 * Returns all rows from the struttura table that match the criteria 'str_descrizione = :strDescrizione'.
	 */
	public Struttura[] findWhereStrDescrizioneEquals(String strDescrizione) throws StrutturaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE str_descrizione = ? ORDER BY str_descrizione", new Object[] { strDescrizione } );
	}

	/** 
	 * Returns all rows from the struttura table that match the criteria 'comuni_com_codice = :comuniComCodice'.
	 */
	public Struttura[] findWhereComuniComCodiceEquals(String comuniComCodice) throws StrutturaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE comuni_com_codice = ? ORDER BY comuni_com_codice", new Object[] { comuniComCodice } );
	}

	/** 
	 * Returns all rows from the struttura table that match the criteria 'struttura_pasti_spa_id = :strutturaPastiSpaId'.
	 */
	public Struttura[] findWhereStrutturaPastiSpaIdEquals(int strutturaPastiSpaId) throws StrutturaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_pasti_spa_id = ? ORDER BY struttura_pasti_spa_id", new Object[] {  new Integer(strutturaPastiSpaId) } );
	}

	/** 
	 * Returns all rows from the struttura table that match the criteria 'struttura_attivita_sat_id = :strutturaAttivitaSatId'.
	 */
	public Struttura[] findWhereStrutturaAttivitaSatIdEquals(int strutturaAttivitaSatId) throws StrutturaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_attivita_sat_id = ? ORDER BY struttura_attivita_sat_id", new Object[] {  new Integer(strutturaAttivitaSatId) } );
	}

	/** 
	 * Returns all rows from the struttura table that match the criteria ''.
	 */
	public Struttura[] findAll() throws StrutturaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY str_id", null );
	}

	/** 
	 * Returns all rows from the struttura table that match the criteria 'fk_comune = :fkComune'.
	 */
	public Struttura[] findByComuni(long fkComune) throws StrutturaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fk_comune = ?", new Object[] {  new Long(fkComune) } );
	}

	/** 
	 * Returns all rows from the struttura table that match the criteria 'fk_tipologia = :fkTipologia'.
	 */
	public Struttura[] findByTipologiaStruttura(long fkTipologia) throws StrutturaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fk_tipologia = ?", new Object[] {  new Long(fkTipologia) } );
	}

	/** 
	 * Returns all rows from the struttura table that match the criteria 'str_id = :strId'.
	 */
	public Struttura[] findWhereStrIdEquals(long strId) throws StrutturaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE str_id = ? ORDER BY str_id", new Object[] {  new Long(strId) } );
	}

	/** 
	 * Returns all rows from the struttura table that match the criteria 'str_nome = :strNome'.
	 */
	public Struttura[] findWhereStrNomeEquals(String strNome) throws StrutturaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE str_nome = ? ORDER BY str_nome", new Object[] { strNome } );
	}

	/** 
	 * Returns all rows from the struttura table that match the criteria 'str_indirizzo = :strIndirizzo'.
	 */
	public Struttura[] findWhereStrIndirizzoEquals(String strIndirizzo) throws StrutturaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE str_indirizzo = ? ORDER BY str_indirizzo", new Object[] { strIndirizzo } );
	}

	/** 
	 * Returns all rows from the struttura table that match the criteria 'str_stelle = :strStelle'.
	 */
	public Struttura[] findWhereStrStelleEquals(String strStelle) throws StrutturaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE str_stelle = ? ORDER BY str_stelle", new Object[] { strStelle } );
	}

	/** 
	 * Returns all rows from the struttura table that match the criteria 'str_pms = :strPms'.
	 */
	public Struttura[] findWhereStrPmsEquals(String strPms) throws StrutturaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE str_pms = ? ORDER BY str_pms", new Object[] { strPms } );
	}

	/** 
	 * Returns all rows from the struttura table that match the criteria 'str_channel_manager = :strChannelManager'.
	 */
	public Struttura[] findWhereStrChannelManagerEquals(String strChannelManager) throws StrutturaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE str_channel_manager = ? ORDER BY str_channel_manager", new Object[] { strChannelManager } );
	}

	/** 
	 * Returns all rows from the struttura table that match the criteria 'str_iva = :strIva'.
	 */
	public Struttura[] findWhereStrIvaEquals(float strIva) throws StrutturaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE str_iva = ? ORDER BY str_iva", new Object[] {  new Float(strIva) } );
	}

	/** 
	 * Returns all rows from the struttura table that match the criteria 'fk_comune = :fkComune'.
	 */
	public Struttura[] findWhereFkComuneEquals(long fkComune) throws StrutturaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fk_comune = ? ORDER BY fk_comune", new Object[] {  new Long(fkComune) } );
	}

	/** 
	 * Returns all rows from the struttura table that match the criteria 'fk_tipologia = :fkTipologia'.
	 */
	public Struttura[] findWhereFkTipologiaEquals(long fkTipologia) throws StrutturaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fk_tipologia = ? ORDER BY fk_tipologia", new Object[] {  new Long(fkTipologia) } );
	}

	/**
	 * Method 'StrutturaDaoImpl'
	 * 
	 */
	public StrutturaDaoImpl()
	{
	}

	/**
	 * Method 'StrutturaDaoImpl'
	 * 
	 * @param userConn
	 */
	public StrutturaDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "struttura";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Struttura fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Struttura dto = new Struttura();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Struttura[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Struttura dto = new Struttura();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Struttura ret[] = new Struttura[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Struttura dto, ResultSet rs) throws SQLException
	{
		dto.setStrId( rs.getLong( COLUMN_STR_ID ) );
		dto.setStrIndirizzo( rs.getString( COLUMN_STR_INDIRIZZO ) );
		dto.setStrStelle( rs.getString( COLUMN_STR_STELLE ) );
		dto.setStrPms( rs.getString( COLUMN_STR_PMS ) );
		dto.setStrChannelManager( rs.getString( COLUMN_STR_CHANNEL_MANAGER ) );
		dto.setStrIva( rs.getFloat( COLUMN_STR_IVA ) );
		if (rs.wasNull()) {
			dto.setStrIvaNull( true );
		}
		
		dto.setStrNome( rs.getString( COLUMN_STR_NOME ) );
		dto.setFkComune( rs.getLong( COLUMN_FK_COMUNE ) );
		if (rs.wasNull()) {
			dto.setFkComuneNull( true );
		}
		
		dto.setFkTipologia( rs.getLong( COLUMN_FK_TIPOLOGIA ) );
		if (rs.wasNull()) {
			dto.setFkTipologiaNull( true );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Struttura dto)
	{
	}

	/** 
	 * Returns all rows from the struttura table that match the specified arbitrary SQL statement
	 */
	public Struttura[] findByDynamicSelect(String sql, Object[] sqlParams) throws StrutturaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the struttura table that match the specified arbitrary SQL statement
	 */
	public Struttura[] findByDynamicWhere(String sql, Object[] sqlParams) throws StrutturaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
