/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.jdbc;

import com.mysecretwish.dao.*;
import com.mysecretwish.factory.*;
import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class UtenteGruppiViaggioDaoImpl extends AbstractDAO implements UtenteGruppiViaggioDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ugv_id, uid_nome, ugv_camere, ugv_adulti, ugv_bambini, utente_ute_id FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ugv_id, uid_nome, ugv_camere, ugv_adulti, ugv_bambini, utente_ute_id ) VALUES ( ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ugv_id = ?, uid_nome = ?, ugv_camere = ?, ugv_adulti = ?, ugv_bambini = ?, utente_ute_id = ? WHERE ugv_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ugv_id = ?";

	/** 
	 * Index of column ugv_id
	 */
	protected static final int COLUMN_UGV_ID = 1;

	/** 
	 * Index of column uid_nome
	 */
	protected static final int COLUMN_UID_NOME = 2;

	/** 
	 * Index of column ugv_camere
	 */
	protected static final int COLUMN_UGV_CAMERE = 3;

	/** 
	 * Index of column ugv_adulti
	 */
	protected static final int COLUMN_UGV_ADULTI = 4;

	/** 
	 * Index of column ugv_bambini
	 */
	protected static final int COLUMN_UGV_BAMBINI = 5;

	/** 
	 * Index of column utente_ute_id
	 */
	protected static final int COLUMN_UTENTE_UTE_ID = 6;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 6;

	/** 
	 * Index of primary-key column ugv_id
	 */
	protected static final int PK_COLUMN_UGV_ID = 1;

	/** 
	 * Inserts a new row in the utente_gruppi_viaggio table.
	 */
	public UtenteGruppiViaggioPk insert(UtenteGruppiViaggio dto) throws UtenteGruppiViaggioDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_utenti')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setUgvId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getUgvId() );
			stmt.setString( index++, dto.getUidNome() );
			if (dto.isUgvCamereNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getUgvCamere() );
			}
		
			if (dto.isUgvAdultiNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getUgvAdulti() );
			}
		
			if (dto.isUgvBambiniNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getUgvBambini() );
			}
		
			stmt.setLong( index++, dto.getUtenteUteId() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UtenteGruppiViaggioDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the utente_gruppi_viaggio table.
	 */
	public void update(UtenteGruppiViaggioPk pk, UtenteGruppiViaggio dto) throws UtenteGruppiViaggioDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getUgvId() );
			stmt.setString( index++, dto.getUidNome() );
			if (dto.isUgvCamereNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getUgvCamere() );
			}
		
			if (dto.isUgvAdultiNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getUgvAdulti() );
			}
		
			if (dto.isUgvBambiniNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getUgvBambini() );
			}
		
			stmt.setLong( index++, dto.getUtenteUteId() );
			stmt.setLong( 7, pk.getUgvId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UtenteGruppiViaggioDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the utente_gruppi_viaggio table.
	 */
	public void delete(UtenteGruppiViaggioPk pk) throws UtenteGruppiViaggioDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getUgvId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UtenteGruppiViaggioDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the utente_gruppi_viaggio table that matches the specified primary-key value.
	 */
	public UtenteGruppiViaggio findByPrimaryKey(UtenteGruppiViaggioPk pk) throws UtenteGruppiViaggioDaoException
	{
		return findByPrimaryKey( pk.getUgvId() );
	}

	/** 
	 * Returns all rows from the utente_gruppi_viaggio table that match the criteria 'ugv_id = :ugvId'.
	 */
	public UtenteGruppiViaggio findByPrimaryKey(long ugvId) throws UtenteGruppiViaggioDaoException
	{
		UtenteGruppiViaggio ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ugv_id = ?", new Object[] {  new Long(ugvId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the utente_gruppi_viaggio table that match the criteria ''.
	 */
	public UtenteGruppiViaggio[] findAll() throws UtenteGruppiViaggioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ugv_id", null );
	}

	/** 
	 * Returns all rows from the utente_gruppi_viaggio table that match the criteria 'utente_ute_id = :utenteUteId'.
	 */
	public UtenteGruppiViaggio[] findByUtente(long utenteUteId) throws UtenteGruppiViaggioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE utente_ute_id = ?", new Object[] {  new Long(utenteUteId) } );
	}

	/** 
	 * Returns all rows from the utente_gruppi_viaggio table that match the criteria 'ugv_id = :ugvId'.
	 */
	public UtenteGruppiViaggio[] findWhereUgvIdEquals(long ugvId) throws UtenteGruppiViaggioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ugv_id = ? ORDER BY ugv_id", new Object[] {  new Long(ugvId) } );
	}

	/** 
	 * Returns all rows from the utente_gruppi_viaggio table that match the criteria 'uid_nome = :uidNome'.
	 */
	public UtenteGruppiViaggio[] findWhereUidNomeEquals(String uidNome) throws UtenteGruppiViaggioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE uid_nome = ? ORDER BY uid_nome", new Object[] { uidNome } );
	}

	/** 
	 * Returns all rows from the utente_gruppi_viaggio table that match the criteria 'ugv_camere = :ugvCamere'.
	 */
	public UtenteGruppiViaggio[] findWhereUgvCamereEquals(int ugvCamere) throws UtenteGruppiViaggioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ugv_camere = ? ORDER BY ugv_camere", new Object[] {  new Integer(ugvCamere) } );
	}

	/** 
	 * Returns all rows from the utente_gruppi_viaggio table that match the criteria 'ugv_adulti = :ugvAdulti'.
	 */
	public UtenteGruppiViaggio[] findWhereUgvAdultiEquals(int ugvAdulti) throws UtenteGruppiViaggioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ugv_adulti = ? ORDER BY ugv_adulti", new Object[] {  new Integer(ugvAdulti) } );
	}

	/** 
	 * Returns all rows from the utente_gruppi_viaggio table that match the criteria 'ugv_bambini = :ugvBambini'.
	 */
	public UtenteGruppiViaggio[] findWhereUgvBambiniEquals(int ugvBambini) throws UtenteGruppiViaggioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ugv_bambini = ? ORDER BY ugv_bambini", new Object[] {  new Integer(ugvBambini) } );
	}

	/** 
	 * Returns all rows from the utente_gruppi_viaggio table that match the criteria 'utente_ute_id = :utenteUteId'.
	 */
	public UtenteGruppiViaggio[] findWhereUtenteUteIdEquals(long utenteUteId) throws UtenteGruppiViaggioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE utente_ute_id = ? ORDER BY utente_ute_id", new Object[] {  new Long(utenteUteId) } );
	}

	/**
	 * Method 'UtenteGruppiViaggioDaoImpl'
	 * 
	 */
	public UtenteGruppiViaggioDaoImpl()
	{
	}

	/**
	 * Method 'UtenteGruppiViaggioDaoImpl'
	 * 
	 * @param userConn
	 */
	public UtenteGruppiViaggioDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "utente_gruppi_viaggio";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected UtenteGruppiViaggio fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			UtenteGruppiViaggio dto = new UtenteGruppiViaggio();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected UtenteGruppiViaggio[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			UtenteGruppiViaggio dto = new UtenteGruppiViaggio();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		UtenteGruppiViaggio ret[] = new UtenteGruppiViaggio[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(UtenteGruppiViaggio dto, ResultSet rs) throws SQLException
	{
		dto.setUgvId( rs.getLong( COLUMN_UGV_ID ) );
		dto.setUidNome( rs.getString( COLUMN_UID_NOME ) );
		dto.setUgvCamere( rs.getInt( COLUMN_UGV_CAMERE ) );
		if (rs.wasNull()) {
			dto.setUgvCamereNull( true );
		}
		
		dto.setUgvAdulti( rs.getInt( COLUMN_UGV_ADULTI ) );
		if (rs.wasNull()) {
			dto.setUgvAdultiNull( true );
		}
		
		dto.setUgvBambini( rs.getInt( COLUMN_UGV_BAMBINI ) );
		if (rs.wasNull()) {
			dto.setUgvBambiniNull( true );
		}
		
		dto.setUtenteUteId( rs.getLong( COLUMN_UTENTE_UTE_ID ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(UtenteGruppiViaggio dto)
	{
	}

	/** 
	 * Returns all rows from the utente_gruppi_viaggio table that match the specified arbitrary SQL statement
	 */
	public UtenteGruppiViaggio[] findByDynamicSelect(String sql, Object[] sqlParams) throws UtenteGruppiViaggioDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UtenteGruppiViaggioDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the utente_gruppi_viaggio table that match the specified arbitrary SQL statement
	 */
	public UtenteGruppiViaggio[] findByDynamicWhere(String sql, Object[] sqlParams) throws UtenteGruppiViaggioDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UtenteGruppiViaggioDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
