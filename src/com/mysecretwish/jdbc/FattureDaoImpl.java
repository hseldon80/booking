/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.jdbc;

import com.mysecretwish.dao.*;
import com.mysecretwish.factory.*;
import java.util.Date;
import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class FattureDaoImpl extends AbstractDAO implements FattureDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT fatture_id, periodo, data_emissione, tipo_fattura, data_scadenza, importo, data_saldo FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( fatture_id, periodo, data_emissione, tipo_fattura, data_scadenza, importo, data_saldo ) VALUES ( ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET fatture_id = ?, periodo = ?, data_emissione = ?, tipo_fattura = ?, data_scadenza = ?, importo = ?, data_saldo = ? WHERE fatture_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE fatture_id = ?";

	/** 
	 * Index of column fatture_id
	 */
	protected static final int COLUMN_FATTURE_ID = 1;

	/** 
	 * Index of column periodo
	 */
	protected static final int COLUMN_PERIODO = 2;

	/** 
	 * Index of column data_emissione
	 */
	protected static final int COLUMN_DATA_EMISSIONE = 3;

	/** 
	 * Index of column tipo_fattura
	 */
	protected static final int COLUMN_TIPO_FATTURA = 4;

	/** 
	 * Index of column data_scadenza
	 */
	protected static final int COLUMN_DATA_SCADENZA = 5;

	/** 
	 * Index of column importo
	 */
	protected static final int COLUMN_IMPORTO = 6;

	/** 
	 * Index of column data_saldo
	 */
	protected static final int COLUMN_DATA_SALDO = 7;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 7;

	/** 
	 * Index of primary-key column fatture_id
	 */
	protected static final int PK_COLUMN_FATTURE_ID = 1;

	/** 
	 * Inserts a new row in the fatture table.
	 */
	public FatturePk insert(Fatture dto) throws FattureDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_tabelle_dominio')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setFattureId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getFattureId() );
			if (dto.isPeriodoNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getPeriodo() );
			}
		
			stmt.setDate(index++, dto.getDataEmissione()==null ? null : new java.sql.Date( dto.getDataEmissione().getTime() ) );
			if (dto.isTipoFatturaNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getTipoFattura() );
			}
		
			stmt.setDate(index++, dto.getDataScadenza()==null ? null : new java.sql.Date( dto.getDataScadenza().getTime() ) );
			if (dto.isImportoNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getImporto() );
			}
		
			stmt.setDate(index++, dto.getDataSaldo()==null ? null : new java.sql.Date( dto.getDataSaldo().getTime() ) );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new FattureDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the fatture table.
	 */
	public void update(FatturePk pk, Fatture dto) throws FattureDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getFattureId() );
			if (dto.isPeriodoNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getPeriodo() );
			}
		
			stmt.setDate(index++, dto.getDataEmissione()==null ? null : new java.sql.Date( dto.getDataEmissione().getTime() ) );
			if (dto.isTipoFatturaNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getTipoFattura() );
			}
		
			stmt.setDate(index++, dto.getDataScadenza()==null ? null : new java.sql.Date( dto.getDataScadenza().getTime() ) );
			if (dto.isImportoNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getImporto() );
			}
		
			stmt.setDate(index++, dto.getDataSaldo()==null ? null : new java.sql.Date( dto.getDataSaldo().getTime() ) );
			stmt.setLong( 8, pk.getFattureId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new FattureDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the fatture table.
	 */
	public void delete(FatturePk pk) throws FattureDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getFattureId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new FattureDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the fatture table that matches the specified primary-key value.
	 */
	public Fatture findByPrimaryKey(FatturePk pk) throws FattureDaoException
	{
		return findByPrimaryKey( pk.getFattureId() );
	}

	/** 
	 * Returns all rows from the fatture table that match the criteria 'fatture_id = :fattureId'.
	 */
	public Fatture findByPrimaryKey(long fattureId) throws FattureDaoException
	{
		Fatture ret[] = findByDynamicSelect( SQL_SELECT + " WHERE fatture_id = ?", new Object[] {  new Long(fattureId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the fatture table that match the criteria ''.
	 */
	public Fatture[] findAll() throws FattureDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY fatture_id", null );
	}

	/** 
	 * Returns all rows from the fatture table that match the criteria 'fatture_id = :fattureId'.
	 */
	public Fatture[] findWhereFattureIdEquals(long fattureId) throws FattureDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fatture_id = ? ORDER BY fatture_id", new Object[] {  new Long(fattureId) } );
	}

	/** 
	 * Returns all rows from the fatture table that match the criteria 'periodo = :periodo'.
	 */
	public Fatture[] findWherePeriodoEquals(int periodo) throws FattureDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE periodo = ? ORDER BY periodo", new Object[] {  new Integer(periodo) } );
	}

	/** 
	 * Returns all rows from the fatture table that match the criteria 'data_emissione = :dataEmissione'.
	 */
	public Fatture[] findWhereDataEmissioneEquals(Date dataEmissione) throws FattureDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE data_emissione = ? ORDER BY data_emissione", new Object[] { dataEmissione==null ? null : new java.sql.Date( dataEmissione.getTime() ) } );
	}

	/** 
	 * Returns all rows from the fatture table that match the criteria 'tipo_fattura = :tipoFattura'.
	 */
	public Fatture[] findWhereTipoFatturaEquals(long tipoFattura) throws FattureDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE tipo_fattura = ? ORDER BY tipo_fattura", new Object[] {  new Long(tipoFattura) } );
	}

	/** 
	 * Returns all rows from the fatture table that match the criteria 'data_scadenza = :dataScadenza'.
	 */
	public Fatture[] findWhereDataScadenzaEquals(Date dataScadenza) throws FattureDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE data_scadenza = ? ORDER BY data_scadenza", new Object[] { dataScadenza==null ? null : new java.sql.Date( dataScadenza.getTime() ) } );
	}

	/** 
	 * Returns all rows from the fatture table that match the criteria 'importo = :importo'.
	 */
	public Fatture[] findWhereImportoEquals(float importo) throws FattureDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE importo = ? ORDER BY importo", new Object[] {  new Float(importo) } );
	}

	/** 
	 * Returns all rows from the fatture table that match the criteria 'data_saldo = :dataSaldo'.
	 */
	public Fatture[] findWhereDataSaldoEquals(Date dataSaldo) throws FattureDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE data_saldo = ? ORDER BY data_saldo", new Object[] { dataSaldo==null ? null : new java.sql.Date( dataSaldo.getTime() ) } );
	}

	/**
	 * Method 'FattureDaoImpl'
	 * 
	 */
	public FattureDaoImpl()
	{
	}

	/**
	 * Method 'FattureDaoImpl'
	 * 
	 * @param userConn
	 */
	public FattureDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "fatture";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Fatture fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Fatture dto = new Fatture();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Fatture[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Fatture dto = new Fatture();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Fatture ret[] = new Fatture[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Fatture dto, ResultSet rs) throws SQLException
	{
		dto.setFattureId( rs.getLong( COLUMN_FATTURE_ID ) );
		dto.setPeriodo( rs.getInt( COLUMN_PERIODO ) );
		if (rs.wasNull()) {
			dto.setPeriodoNull( true );
		}
		
		dto.setDataEmissione( rs.getDate(COLUMN_DATA_EMISSIONE ) );
		dto.setTipoFattura( rs.getLong( COLUMN_TIPO_FATTURA ) );
		if (rs.wasNull()) {
			dto.setTipoFatturaNull( true );
		}
		
		dto.setDataScadenza( rs.getDate(COLUMN_DATA_SCADENZA ) );
		dto.setImporto( rs.getFloat( COLUMN_IMPORTO ) );
		if (rs.wasNull()) {
			dto.setImportoNull( true );
		}
		
		dto.setDataSaldo( rs.getDate(COLUMN_DATA_SALDO ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Fatture dto)
	{
	}

	/** 
	 * Returns all rows from the fatture table that match the specified arbitrary SQL statement
	 */
	public Fatture[] findByDynamicSelect(String sql, Object[] sqlParams) throws FattureDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new FattureDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the fatture table that match the specified arbitrary SQL statement
	 */
	public Fatture[] findByDynamicWhere(String sql, Object[] sqlParams) throws FattureDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new FattureDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
