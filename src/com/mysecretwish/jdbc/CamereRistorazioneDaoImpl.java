/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.jdbc;

import com.mysecretwish.dao.*;
import com.mysecretwish.factory.*;
import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class CamereRistorazioneDaoImpl extends AbstractDAO implements CamereRistorazioneDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT scr_id, scr_zona_pran, scr_tavolo_pran, scr_calici_vin, scr_bottiglia_acq, scr_bott_acq_cam, scr_cioccolatini, scr_biscotti, scr_ciocc_bisc_cam, scr_frutta, scr_frutta_cam, scr_vino_champ, scr_vino_champ_str, scr_barbecue, scr_forno, scr_piano_cott, scr_tostapane, scr_lavatov, scr_bollitore_elet, scr_zona_pran_aper, scr_arred_est, scr_minibar, scr_cucina, scr_ang_cott, scr_utensili_cuc, scr_microonde, scr_frigorifero, scr_macc_caffe, scr_bollitore, scr_seggiolone, scr_serv_extra, scr_acc_executive, scr_sveglia, scr_sveglia_tel, scr_svelia_o_tel, scr_biancheria_casa, scr_asciug_lenz_pag, scr_asciugamani, camere_cam_id FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( scr_id, scr_zona_pran, scr_tavolo_pran, scr_calici_vin, scr_bottiglia_acq, scr_bott_acq_cam, scr_cioccolatini, scr_biscotti, scr_ciocc_bisc_cam, scr_frutta, scr_frutta_cam, scr_vino_champ, scr_vino_champ_str, scr_barbecue, scr_forno, scr_piano_cott, scr_tostapane, scr_lavatov, scr_bollitore_elet, scr_zona_pran_aper, scr_arred_est, scr_minibar, scr_cucina, scr_ang_cott, scr_utensili_cuc, scr_microonde, scr_frigorifero, scr_macc_caffe, scr_bollitore, scr_seggiolone, scr_serv_extra, scr_acc_executive, scr_sveglia, scr_sveglia_tel, scr_svelia_o_tel, scr_biancheria_casa, scr_asciug_lenz_pag, scr_asciugamani, camere_cam_id ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET scr_id = ?, scr_zona_pran = ?, scr_tavolo_pran = ?, scr_calici_vin = ?, scr_bottiglia_acq = ?, scr_bott_acq_cam = ?, scr_cioccolatini = ?, scr_biscotti = ?, scr_ciocc_bisc_cam = ?, scr_frutta = ?, scr_frutta_cam = ?, scr_vino_champ = ?, scr_vino_champ_str = ?, scr_barbecue = ?, scr_forno = ?, scr_piano_cott = ?, scr_tostapane = ?, scr_lavatov = ?, scr_bollitore_elet = ?, scr_zona_pran_aper = ?, scr_arred_est = ?, scr_minibar = ?, scr_cucina = ?, scr_ang_cott = ?, scr_utensili_cuc = ?, scr_microonde = ?, scr_frigorifero = ?, scr_macc_caffe = ?, scr_bollitore = ?, scr_seggiolone = ?, scr_serv_extra = ?, scr_acc_executive = ?, scr_sveglia = ?, scr_sveglia_tel = ?, scr_svelia_o_tel = ?, scr_biancheria_casa = ?, scr_asciug_lenz_pag = ?, scr_asciugamani = ?, camere_cam_id = ? WHERE scr_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE scr_id = ?";

	/** 
	 * Index of column scr_id
	 */
	protected static final int COLUMN_SCR_ID = 1;

	/** 
	 * Index of column scr_zona_pran
	 */
	protected static final int COLUMN_SCR_ZONA_PRAN = 2;

	/** 
	 * Index of column scr_tavolo_pran
	 */
	protected static final int COLUMN_SCR_TAVOLO_PRAN = 3;

	/** 
	 * Index of column scr_calici_vin
	 */
	protected static final int COLUMN_SCR_CALICI_VIN = 4;

	/** 
	 * Index of column scr_bottiglia_acq
	 */
	protected static final int COLUMN_SCR_BOTTIGLIA_ACQ = 5;

	/** 
	 * Index of column scr_bott_acq_cam
	 */
	protected static final int COLUMN_SCR_BOTT_ACQ_CAM = 6;

	/** 
	 * Index of column scr_cioccolatini
	 */
	protected static final int COLUMN_SCR_CIOCCOLATINI = 7;

	/** 
	 * Index of column scr_biscotti
	 */
	protected static final int COLUMN_SCR_BISCOTTI = 8;

	/** 
	 * Index of column scr_ciocc_bisc_cam
	 */
	protected static final int COLUMN_SCR_CIOCC_BISC_CAM = 9;

	/** 
	 * Index of column scr_frutta
	 */
	protected static final int COLUMN_SCR_FRUTTA = 10;

	/** 
	 * Index of column scr_frutta_cam
	 */
	protected static final int COLUMN_SCR_FRUTTA_CAM = 11;

	/** 
	 * Index of column scr_vino_champ
	 */
	protected static final int COLUMN_SCR_VINO_CHAMP = 12;

	/** 
	 * Index of column scr_vino_champ_str
	 */
	protected static final int COLUMN_SCR_VINO_CHAMP_STR = 13;

	/** 
	 * Index of column scr_barbecue
	 */
	protected static final int COLUMN_SCR_BARBECUE = 14;

	/** 
	 * Index of column scr_forno
	 */
	protected static final int COLUMN_SCR_FORNO = 15;

	/** 
	 * Index of column scr_piano_cott
	 */
	protected static final int COLUMN_SCR_PIANO_COTT = 16;

	/** 
	 * Index of column scr_tostapane
	 */
	protected static final int COLUMN_SCR_TOSTAPANE = 17;

	/** 
	 * Index of column scr_lavatov
	 */
	protected static final int COLUMN_SCR_LAVATOV = 18;

	/** 
	 * Index of column scr_bollitore_elet
	 */
	protected static final int COLUMN_SCR_BOLLITORE_ELET = 19;

	/** 
	 * Index of column scr_zona_pran_aper
	 */
	protected static final int COLUMN_SCR_ZONA_PRAN_APER = 20;

	/** 
	 * Index of column scr_arred_est
	 */
	protected static final int COLUMN_SCR_ARRED_EST = 21;

	/** 
	 * Index of column scr_minibar
	 */
	protected static final int COLUMN_SCR_MINIBAR = 22;

	/** 
	 * Index of column scr_cucina
	 */
	protected static final int COLUMN_SCR_CUCINA = 23;

	/** 
	 * Index of column scr_ang_cott
	 */
	protected static final int COLUMN_SCR_ANG_COTT = 24;

	/** 
	 * Index of column scr_utensili_cuc
	 */
	protected static final int COLUMN_SCR_UTENSILI_CUC = 25;

	/** 
	 * Index of column scr_microonde
	 */
	protected static final int COLUMN_SCR_MICROONDE = 26;

	/** 
	 * Index of column scr_frigorifero
	 */
	protected static final int COLUMN_SCR_FRIGORIFERO = 27;

	/** 
	 * Index of column scr_macc_caffe
	 */
	protected static final int COLUMN_SCR_MACC_CAFFE = 28;

	/** 
	 * Index of column scr_bollitore
	 */
	protected static final int COLUMN_SCR_BOLLITORE = 29;

	/** 
	 * Index of column scr_seggiolone
	 */
	protected static final int COLUMN_SCR_SEGGIOLONE = 30;

	/** 
	 * Index of column scr_serv_extra
	 */
	protected static final int COLUMN_SCR_SERV_EXTRA = 31;

	/** 
	 * Index of column scr_acc_executive
	 */
	protected static final int COLUMN_SCR_ACC_EXECUTIVE = 32;

	/** 
	 * Index of column scr_sveglia
	 */
	protected static final int COLUMN_SCR_SVEGLIA = 33;

	/** 
	 * Index of column scr_sveglia_tel
	 */
	protected static final int COLUMN_SCR_SVEGLIA_TEL = 34;

	/** 
	 * Index of column scr_svelia_o_tel
	 */
	protected static final int COLUMN_SCR_SVELIA_O_TEL = 35;

	/** 
	 * Index of column scr_biancheria_casa
	 */
	protected static final int COLUMN_SCR_BIANCHERIA_CASA = 36;

	/** 
	 * Index of column scr_asciug_lenz_pag
	 */
	protected static final int COLUMN_SCR_ASCIUG_LENZ_PAG = 37;

	/** 
	 * Index of column scr_asciugamani
	 */
	protected static final int COLUMN_SCR_ASCIUGAMANI = 38;

	/** 
	 * Index of column camere_cam_id
	 */
	protected static final int COLUMN_CAMERE_CAM_ID = 39;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 39;

	/** 
	 * Index of primary-key column scr_id
	 */
	protected static final int PK_COLUMN_SCR_ID = 1;

	/** 
	 * Inserts a new row in the camere_ristorazione table.
	 */
	public CamereRistorazionePk insert(CamereRistorazione dto) throws CamereRistorazioneDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_camere')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setScrId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getScrId() );
			stmt.setString( index++, dto.getScrZonaPran() );
			stmt.setString( index++, dto.getScrTavoloPran() );
			stmt.setString( index++, dto.getScrCaliciVin() );
			stmt.setString( index++, dto.getScrBottigliaAcq() );
			stmt.setString( index++, dto.getScrBottAcqCam() );
			stmt.setString( index++, dto.getScrCioccolatini() );
			stmt.setString( index++, dto.getScrBiscotti() );
			stmt.setString( index++, dto.getScrCioccBiscCam() );
			stmt.setString( index++, dto.getScrFrutta() );
			stmt.setString( index++, dto.getScrFruttaCam() );
			stmt.setString( index++, dto.getScrVinoChamp() );
			stmt.setString( index++, dto.getScrVinoChampStr() );
			stmt.setString( index++, dto.getScrBarbecue() );
			stmt.setString( index++, dto.getScrForno() );
			stmt.setString( index++, dto.getScrPianoCott() );
			stmt.setString( index++, dto.getScrTostapane() );
			stmt.setString( index++, dto.getScrLavatov() );
			stmt.setString( index++, dto.getScrBollitoreElet() );
			stmt.setString( index++, dto.getScrZonaPranAper() );
			stmt.setString( index++, dto.getScrArredEst() );
			stmt.setString( index++, dto.getScrMinibar() );
			stmt.setString( index++, dto.getScrCucina() );
			stmt.setString( index++, dto.getScrAngCott() );
			stmt.setString( index++, dto.getScrUtensiliCuc() );
			stmt.setString( index++, dto.getScrMicroonde() );
			stmt.setString( index++, dto.getScrFrigorifero() );
			stmt.setString( index++, dto.getScrMaccCaffe() );
			stmt.setString( index++, dto.getScrBollitore() );
			stmt.setString( index++, dto.getScrSeggiolone() );
			stmt.setString( index++, dto.getScrServExtra() );
			stmt.setString( index++, dto.getScrAccExecutive() );
			stmt.setString( index++, dto.getScrSveglia() );
			stmt.setString( index++, dto.getScrSvegliaTel() );
			stmt.setString( index++, dto.getScrSveliaOTel() );
			stmt.setString( index++, dto.getScrBiancheriaCasa() );
			stmt.setString( index++, dto.getScrAsciugLenzPag() );
			stmt.setString( index++, dto.getScrAsciugamani() );
			stmt.setLong( index++, dto.getCamereCamId() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CamereRistorazioneDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the camere_ristorazione table.
	 */
	public void update(CamereRistorazionePk pk, CamereRistorazione dto) throws CamereRistorazioneDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getScrId() );
			stmt.setString( index++, dto.getScrZonaPran() );
			stmt.setString( index++, dto.getScrTavoloPran() );
			stmt.setString( index++, dto.getScrCaliciVin() );
			stmt.setString( index++, dto.getScrBottigliaAcq() );
			stmt.setString( index++, dto.getScrBottAcqCam() );
			stmt.setString( index++, dto.getScrCioccolatini() );
			stmt.setString( index++, dto.getScrBiscotti() );
			stmt.setString( index++, dto.getScrCioccBiscCam() );
			stmt.setString( index++, dto.getScrFrutta() );
			stmt.setString( index++, dto.getScrFruttaCam() );
			stmt.setString( index++, dto.getScrVinoChamp() );
			stmt.setString( index++, dto.getScrVinoChampStr() );
			stmt.setString( index++, dto.getScrBarbecue() );
			stmt.setString( index++, dto.getScrForno() );
			stmt.setString( index++, dto.getScrPianoCott() );
			stmt.setString( index++, dto.getScrTostapane() );
			stmt.setString( index++, dto.getScrLavatov() );
			stmt.setString( index++, dto.getScrBollitoreElet() );
			stmt.setString( index++, dto.getScrZonaPranAper() );
			stmt.setString( index++, dto.getScrArredEst() );
			stmt.setString( index++, dto.getScrMinibar() );
			stmt.setString( index++, dto.getScrCucina() );
			stmt.setString( index++, dto.getScrAngCott() );
			stmt.setString( index++, dto.getScrUtensiliCuc() );
			stmt.setString( index++, dto.getScrMicroonde() );
			stmt.setString( index++, dto.getScrFrigorifero() );
			stmt.setString( index++, dto.getScrMaccCaffe() );
			stmt.setString( index++, dto.getScrBollitore() );
			stmt.setString( index++, dto.getScrSeggiolone() );
			stmt.setString( index++, dto.getScrServExtra() );
			stmt.setString( index++, dto.getScrAccExecutive() );
			stmt.setString( index++, dto.getScrSveglia() );
			stmt.setString( index++, dto.getScrSvegliaTel() );
			stmt.setString( index++, dto.getScrSveliaOTel() );
			stmt.setString( index++, dto.getScrBiancheriaCasa() );
			stmt.setString( index++, dto.getScrAsciugLenzPag() );
			stmt.setString( index++, dto.getScrAsciugamani() );
			stmt.setLong( index++, dto.getCamereCamId() );
			stmt.setLong( 40, pk.getScrId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CamereRistorazioneDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the camere_ristorazione table.
	 */
	public void delete(CamereRistorazionePk pk) throws CamereRistorazioneDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getScrId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CamereRistorazioneDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the camere_ristorazione table that matches the specified primary-key value.
	 */
	public CamereRistorazione findByPrimaryKey(CamereRistorazionePk pk) throws CamereRistorazioneDaoException
	{
		return findByPrimaryKey( pk.getScrId() );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_id = :scrId'.
	 */
	public CamereRistorazione findByPrimaryKey(long scrId) throws CamereRistorazioneDaoException
	{
		CamereRistorazione ret[] = findByDynamicSelect( SQL_SELECT + " WHERE scr_id = ?", new Object[] {  new Long(scrId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria ''.
	 */
	public CamereRistorazione[] findAll() throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY scr_id", null );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'camere_cam_id = :camereCamId'.
	 */
	public CamereRistorazione[] findByCamere(long camereCamId) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE camere_cam_id = ?", new Object[] {  new Long(camereCamId) } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_id = :scrId'.
	 */
	public CamereRistorazione[] findWhereScrIdEquals(long scrId) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_id = ? ORDER BY scr_id", new Object[] {  new Long(scrId) } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_zona_pran = :scrZonaPran'.
	 */
	public CamereRistorazione[] findWhereScrZonaPranEquals(String scrZonaPran) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_zona_pran = ? ORDER BY scr_zona_pran", new Object[] { scrZonaPran } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_tavolo_pran = :scrTavoloPran'.
	 */
	public CamereRistorazione[] findWhereScrTavoloPranEquals(String scrTavoloPran) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_tavolo_pran = ? ORDER BY scr_tavolo_pran", new Object[] { scrTavoloPran } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_calici_vin = :scrCaliciVin'.
	 */
	public CamereRistorazione[] findWhereScrCaliciVinEquals(String scrCaliciVin) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_calici_vin = ? ORDER BY scr_calici_vin", new Object[] { scrCaliciVin } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_bottiglia_acq = :scrBottigliaAcq'.
	 */
	public CamereRistorazione[] findWhereScrBottigliaAcqEquals(String scrBottigliaAcq) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_bottiglia_acq = ? ORDER BY scr_bottiglia_acq", new Object[] { scrBottigliaAcq } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_bott_acq_cam = :scrBottAcqCam'.
	 */
	public CamereRistorazione[] findWhereScrBottAcqCamEquals(String scrBottAcqCam) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_bott_acq_cam = ? ORDER BY scr_bott_acq_cam", new Object[] { scrBottAcqCam } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_cioccolatini = :scrCioccolatini'.
	 */
	public CamereRistorazione[] findWhereScrCioccolatiniEquals(String scrCioccolatini) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_cioccolatini = ? ORDER BY scr_cioccolatini", new Object[] { scrCioccolatini } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_biscotti = :scrBiscotti'.
	 */
	public CamereRistorazione[] findWhereScrBiscottiEquals(String scrBiscotti) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_biscotti = ? ORDER BY scr_biscotti", new Object[] { scrBiscotti } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_ciocc_bisc_cam = :scrCioccBiscCam'.
	 */
	public CamereRistorazione[] findWhereScrCioccBiscCamEquals(String scrCioccBiscCam) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_ciocc_bisc_cam = ? ORDER BY scr_ciocc_bisc_cam", new Object[] { scrCioccBiscCam } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_frutta = :scrFrutta'.
	 */
	public CamereRistorazione[] findWhereScrFruttaEquals(String scrFrutta) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_frutta = ? ORDER BY scr_frutta", new Object[] { scrFrutta } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_frutta_cam = :scrFruttaCam'.
	 */
	public CamereRistorazione[] findWhereScrFruttaCamEquals(String scrFruttaCam) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_frutta_cam = ? ORDER BY scr_frutta_cam", new Object[] { scrFruttaCam } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_vino_champ = :scrVinoChamp'.
	 */
	public CamereRistorazione[] findWhereScrVinoChampEquals(String scrVinoChamp) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_vino_champ = ? ORDER BY scr_vino_champ", new Object[] { scrVinoChamp } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_vino_champ_str = :scrVinoChampStr'.
	 */
	public CamereRistorazione[] findWhereScrVinoChampStrEquals(String scrVinoChampStr) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_vino_champ_str = ? ORDER BY scr_vino_champ_str", new Object[] { scrVinoChampStr } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_barbecue = :scrBarbecue'.
	 */
	public CamereRistorazione[] findWhereScrBarbecueEquals(String scrBarbecue) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_barbecue = ? ORDER BY scr_barbecue", new Object[] { scrBarbecue } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_forno = :scrForno'.
	 */
	public CamereRistorazione[] findWhereScrFornoEquals(String scrForno) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_forno = ? ORDER BY scr_forno", new Object[] { scrForno } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_piano_cott = :scrPianoCott'.
	 */
	public CamereRistorazione[] findWhereScrPianoCottEquals(String scrPianoCott) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_piano_cott = ? ORDER BY scr_piano_cott", new Object[] { scrPianoCott } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_tostapane = :scrTostapane'.
	 */
	public CamereRistorazione[] findWhereScrTostapaneEquals(String scrTostapane) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_tostapane = ? ORDER BY scr_tostapane", new Object[] { scrTostapane } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_lavatov = :scrLavatov'.
	 */
	public CamereRistorazione[] findWhereScrLavatovEquals(String scrLavatov) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_lavatov = ? ORDER BY scr_lavatov", new Object[] { scrLavatov } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_bollitore_elet = :scrBollitoreElet'.
	 */
	public CamereRistorazione[] findWhereScrBollitoreEletEquals(String scrBollitoreElet) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_bollitore_elet = ? ORDER BY scr_bollitore_elet", new Object[] { scrBollitoreElet } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_zona_pran_aper = :scrZonaPranAper'.
	 */
	public CamereRistorazione[] findWhereScrZonaPranAperEquals(String scrZonaPranAper) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_zona_pran_aper = ? ORDER BY scr_zona_pran_aper", new Object[] { scrZonaPranAper } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_arred_est = :scrArredEst'.
	 */
	public CamereRistorazione[] findWhereScrArredEstEquals(String scrArredEst) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_arred_est = ? ORDER BY scr_arred_est", new Object[] { scrArredEst } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_minibar = :scrMinibar'.
	 */
	public CamereRistorazione[] findWhereScrMinibarEquals(String scrMinibar) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_minibar = ? ORDER BY scr_minibar", new Object[] { scrMinibar } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_cucina = :scrCucina'.
	 */
	public CamereRistorazione[] findWhereScrCucinaEquals(String scrCucina) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_cucina = ? ORDER BY scr_cucina", new Object[] { scrCucina } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_ang_cott = :scrAngCott'.
	 */
	public CamereRistorazione[] findWhereScrAngCottEquals(String scrAngCott) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_ang_cott = ? ORDER BY scr_ang_cott", new Object[] { scrAngCott } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_utensili_cuc = :scrUtensiliCuc'.
	 */
	public CamereRistorazione[] findWhereScrUtensiliCucEquals(String scrUtensiliCuc) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_utensili_cuc = ? ORDER BY scr_utensili_cuc", new Object[] { scrUtensiliCuc } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_microonde = :scrMicroonde'.
	 */
	public CamereRistorazione[] findWhereScrMicroondeEquals(String scrMicroonde) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_microonde = ? ORDER BY scr_microonde", new Object[] { scrMicroonde } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_frigorifero = :scrFrigorifero'.
	 */
	public CamereRistorazione[] findWhereScrFrigoriferoEquals(String scrFrigorifero) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_frigorifero = ? ORDER BY scr_frigorifero", new Object[] { scrFrigorifero } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_macc_caffe = :scrMaccCaffe'.
	 */
	public CamereRistorazione[] findWhereScrMaccCaffeEquals(String scrMaccCaffe) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_macc_caffe = ? ORDER BY scr_macc_caffe", new Object[] { scrMaccCaffe } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_bollitore = :scrBollitore'.
	 */
	public CamereRistorazione[] findWhereScrBollitoreEquals(String scrBollitore) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_bollitore = ? ORDER BY scr_bollitore", new Object[] { scrBollitore } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_seggiolone = :scrSeggiolone'.
	 */
	public CamereRistorazione[] findWhereScrSeggioloneEquals(String scrSeggiolone) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_seggiolone = ? ORDER BY scr_seggiolone", new Object[] { scrSeggiolone } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_serv_extra = :scrServExtra'.
	 */
	public CamereRistorazione[] findWhereScrServExtraEquals(String scrServExtra) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_serv_extra = ? ORDER BY scr_serv_extra", new Object[] { scrServExtra } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_acc_executive = :scrAccExecutive'.
	 */
	public CamereRistorazione[] findWhereScrAccExecutiveEquals(String scrAccExecutive) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_acc_executive = ? ORDER BY scr_acc_executive", new Object[] { scrAccExecutive } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_sveglia = :scrSveglia'.
	 */
	public CamereRistorazione[] findWhereScrSvegliaEquals(String scrSveglia) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_sveglia = ? ORDER BY scr_sveglia", new Object[] { scrSveglia } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_sveglia_tel = :scrSvegliaTel'.
	 */
	public CamereRistorazione[] findWhereScrSvegliaTelEquals(String scrSvegliaTel) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_sveglia_tel = ? ORDER BY scr_sveglia_tel", new Object[] { scrSvegliaTel } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_svelia_o_tel = :scrSveliaOTel'.
	 */
	public CamereRistorazione[] findWhereScrSveliaOTelEquals(String scrSveliaOTel) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_svelia_o_tel = ? ORDER BY scr_svelia_o_tel", new Object[] { scrSveliaOTel } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_biancheria_casa = :scrBiancheriaCasa'.
	 */
	public CamereRistorazione[] findWhereScrBiancheriaCasaEquals(String scrBiancheriaCasa) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_biancheria_casa = ? ORDER BY scr_biancheria_casa", new Object[] { scrBiancheriaCasa } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_asciug_lenz_pag = :scrAsciugLenzPag'.
	 */
	public CamereRistorazione[] findWhereScrAsciugLenzPagEquals(String scrAsciugLenzPag) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_asciug_lenz_pag = ? ORDER BY scr_asciug_lenz_pag", new Object[] { scrAsciugLenzPag } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'scr_asciugamani = :scrAsciugamani'.
	 */
	public CamereRistorazione[] findWhereScrAsciugamaniEquals(String scrAsciugamani) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scr_asciugamani = ? ORDER BY scr_asciugamani", new Object[] { scrAsciugamani } );
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the criteria 'camere_cam_id = :camereCamId'.
	 */
	public CamereRistorazione[] findWhereCamereCamIdEquals(long camereCamId) throws CamereRistorazioneDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE camere_cam_id = ? ORDER BY camere_cam_id", new Object[] {  new Long(camereCamId) } );
	}

	/**
	 * Method 'CamereRistorazioneDaoImpl'
	 * 
	 */
	public CamereRistorazioneDaoImpl()
	{
	}

	/**
	 * Method 'CamereRistorazioneDaoImpl'
	 * 
	 * @param userConn
	 */
	public CamereRistorazioneDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "camere_ristorazione";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected CamereRistorazione fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			CamereRistorazione dto = new CamereRistorazione();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected CamereRistorazione[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			CamereRistorazione dto = new CamereRistorazione();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		CamereRistorazione ret[] = new CamereRistorazione[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(CamereRistorazione dto, ResultSet rs) throws SQLException
	{
		dto.setScrId( rs.getLong( COLUMN_SCR_ID ) );
		dto.setScrZonaPran( rs.getString( COLUMN_SCR_ZONA_PRAN ) );
		dto.setScrTavoloPran( rs.getString( COLUMN_SCR_TAVOLO_PRAN ) );
		dto.setScrCaliciVin( rs.getString( COLUMN_SCR_CALICI_VIN ) );
		dto.setScrBottigliaAcq( rs.getString( COLUMN_SCR_BOTTIGLIA_ACQ ) );
		dto.setScrBottAcqCam( rs.getString( COLUMN_SCR_BOTT_ACQ_CAM ) );
		dto.setScrCioccolatini( rs.getString( COLUMN_SCR_CIOCCOLATINI ) );
		dto.setScrBiscotti( rs.getString( COLUMN_SCR_BISCOTTI ) );
		dto.setScrCioccBiscCam( rs.getString( COLUMN_SCR_CIOCC_BISC_CAM ) );
		dto.setScrFrutta( rs.getString( COLUMN_SCR_FRUTTA ) );
		dto.setScrFruttaCam( rs.getString( COLUMN_SCR_FRUTTA_CAM ) );
		dto.setScrVinoChamp( rs.getString( COLUMN_SCR_VINO_CHAMP ) );
		dto.setScrVinoChampStr( rs.getString( COLUMN_SCR_VINO_CHAMP_STR ) );
		dto.setScrBarbecue( rs.getString( COLUMN_SCR_BARBECUE ) );
		dto.setScrForno( rs.getString( COLUMN_SCR_FORNO ) );
		dto.setScrPianoCott( rs.getString( COLUMN_SCR_PIANO_COTT ) );
		dto.setScrTostapane( rs.getString( COLUMN_SCR_TOSTAPANE ) );
		dto.setScrLavatov( rs.getString( COLUMN_SCR_LAVATOV ) );
		dto.setScrBollitoreElet( rs.getString( COLUMN_SCR_BOLLITORE_ELET ) );
		dto.setScrZonaPranAper( rs.getString( COLUMN_SCR_ZONA_PRAN_APER ) );
		dto.setScrArredEst( rs.getString( COLUMN_SCR_ARRED_EST ) );
		dto.setScrMinibar( rs.getString( COLUMN_SCR_MINIBAR ) );
		dto.setScrCucina( rs.getString( COLUMN_SCR_CUCINA ) );
		dto.setScrAngCott( rs.getString( COLUMN_SCR_ANG_COTT ) );
		dto.setScrUtensiliCuc( rs.getString( COLUMN_SCR_UTENSILI_CUC ) );
		dto.setScrMicroonde( rs.getString( COLUMN_SCR_MICROONDE ) );
		dto.setScrFrigorifero( rs.getString( COLUMN_SCR_FRIGORIFERO ) );
		dto.setScrMaccCaffe( rs.getString( COLUMN_SCR_MACC_CAFFE ) );
		dto.setScrBollitore( rs.getString( COLUMN_SCR_BOLLITORE ) );
		dto.setScrSeggiolone( rs.getString( COLUMN_SCR_SEGGIOLONE ) );
		dto.setScrServExtra( rs.getString( COLUMN_SCR_SERV_EXTRA ) );
		dto.setScrAccExecutive( rs.getString( COLUMN_SCR_ACC_EXECUTIVE ) );
		dto.setScrSveglia( rs.getString( COLUMN_SCR_SVEGLIA ) );
		dto.setScrSvegliaTel( rs.getString( COLUMN_SCR_SVEGLIA_TEL ) );
		dto.setScrSveliaOTel( rs.getString( COLUMN_SCR_SVELIA_O_TEL ) );
		dto.setScrBiancheriaCasa( rs.getString( COLUMN_SCR_BIANCHERIA_CASA ) );
		dto.setScrAsciugLenzPag( rs.getString( COLUMN_SCR_ASCIUG_LENZ_PAG ) );
		dto.setScrAsciugamani( rs.getString( COLUMN_SCR_ASCIUGAMANI ) );
		dto.setCamereCamId( rs.getLong( COLUMN_CAMERE_CAM_ID ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(CamereRistorazione dto)
	{
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the specified arbitrary SQL statement
	 */
	public CamereRistorazione[] findByDynamicSelect(String sql, Object[] sqlParams) throws CamereRistorazioneDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CamereRistorazioneDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the camere_ristorazione table that match the specified arbitrary SQL statement
	 */
	public CamereRistorazione[] findByDynamicWhere(String sql, Object[] sqlParams) throws CamereRistorazioneDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CamereRistorazioneDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
