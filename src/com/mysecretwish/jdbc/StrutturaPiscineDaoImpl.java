/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.jdbc;

import com.mysecretwish.dao.*;
import com.mysecretwish.factory.*;
import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class StrutturaPiscineDaoImpl extends AbstractDAO implements StrutturaPiscineDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT spi_id, spi_scivolo, spi_spa, spi_teli, spi_bagno_turco, spi_lettini, spi_area_relax, spi_ombrelloni, spi_pediluvio, spi_servizi_bellezza, spi_pacchetti_spa, spi_poltra_massag, spi_fitness, spi_lezioni_yoga, spi_lezioni_fitness, spi_personal_trainer, spi_piscina_bamb, spi_armadietti_spa, spi_piscina, spi_giochi_acqua, spi_pisc_ultimo_piano, spi_pisc_sfioro, spi_riscaldata, spi_pisc_vista, spi_pisc_salata, spi_vasca_imm_fredda, spi_bar_bordo, spi_recinto, spi_pisc_coperta, spi_pisc_coperta_stag, spi_pisc_coperta_anno, spi_pisc_aperto, spi_pisc_aperto_stag, spi_pisc_aperto_anno, spi_costo, struttura_str_id FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( spi_id, spi_scivolo, spi_spa, spi_teli, spi_bagno_turco, spi_lettini, spi_area_relax, spi_ombrelloni, spi_pediluvio, spi_servizi_bellezza, spi_pacchetti_spa, spi_poltra_massag, spi_fitness, spi_lezioni_yoga, spi_lezioni_fitness, spi_personal_trainer, spi_piscina_bamb, spi_armadietti_spa, spi_piscina, spi_giochi_acqua, spi_pisc_ultimo_piano, spi_pisc_sfioro, spi_riscaldata, spi_pisc_vista, spi_pisc_salata, spi_vasca_imm_fredda, spi_bar_bordo, spi_recinto, spi_pisc_coperta, spi_pisc_coperta_stag, spi_pisc_coperta_anno, spi_pisc_aperto, spi_pisc_aperto_stag, spi_pisc_aperto_anno, spi_costo, struttura_str_id ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET spi_id = ?, spi_scivolo = ?, spi_spa = ?, spi_teli = ?, spi_bagno_turco = ?, spi_lettini = ?, spi_area_relax = ?, spi_ombrelloni = ?, spi_pediluvio = ?, spi_servizi_bellezza = ?, spi_pacchetti_spa = ?, spi_poltra_massag = ?, spi_fitness = ?, spi_lezioni_yoga = ?, spi_lezioni_fitness = ?, spi_personal_trainer = ?, spi_piscina_bamb = ?, spi_armadietti_spa = ?, spi_piscina = ?, spi_giochi_acqua = ?, spi_pisc_ultimo_piano = ?, spi_pisc_sfioro = ?, spi_riscaldata = ?, spi_pisc_vista = ?, spi_pisc_salata = ?, spi_vasca_imm_fredda = ?, spi_bar_bordo = ?, spi_recinto = ?, spi_pisc_coperta = ?, spi_pisc_coperta_stag = ?, spi_pisc_coperta_anno = ?, spi_pisc_aperto = ?, spi_pisc_aperto_stag = ?, spi_pisc_aperto_anno = ?, spi_costo = ?, struttura_str_id = ? WHERE spi_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE spi_id = ?";

	/** 
	 * Index of column spi_id
	 */
	protected static final int COLUMN_SPI_ID = 1;

	/** 
	 * Index of column spi_scivolo
	 */
	protected static final int COLUMN_SPI_SCIVOLO = 2;

	/** 
	 * Index of column spi_spa
	 */
	protected static final int COLUMN_SPI_SPA = 3;

	/** 
	 * Index of column spi_teli
	 */
	protected static final int COLUMN_SPI_TELI = 4;

	/** 
	 * Index of column spi_bagno_turco
	 */
	protected static final int COLUMN_SPI_BAGNO_TURCO = 5;

	/** 
	 * Index of column spi_lettini
	 */
	protected static final int COLUMN_SPI_LETTINI = 6;

	/** 
	 * Index of column spi_area_relax
	 */
	protected static final int COLUMN_SPI_AREA_RELAX = 7;

	/** 
	 * Index of column spi_ombrelloni
	 */
	protected static final int COLUMN_SPI_OMBRELLONI = 8;

	/** 
	 * Index of column spi_pediluvio
	 */
	protected static final int COLUMN_SPI_PEDILUVIO = 9;

	/** 
	 * Index of column spi_servizi_bellezza
	 */
	protected static final int COLUMN_SPI_SERVIZI_BELLEZZA = 10;

	/** 
	 * Index of column spi_pacchetti_spa
	 */
	protected static final int COLUMN_SPI_PACCHETTI_SPA = 11;

	/** 
	 * Index of column spi_poltra_massag
	 */
	protected static final int COLUMN_SPI_POLTRA_MASSAG = 12;

	/** 
	 * Index of column spi_fitness
	 */
	protected static final int COLUMN_SPI_FITNESS = 13;

	/** 
	 * Index of column spi_lezioni_yoga
	 */
	protected static final int COLUMN_SPI_LEZIONI_YOGA = 14;

	/** 
	 * Index of column spi_lezioni_fitness
	 */
	protected static final int COLUMN_SPI_LEZIONI_FITNESS = 15;

	/** 
	 * Index of column spi_personal_trainer
	 */
	protected static final int COLUMN_SPI_PERSONAL_TRAINER = 16;

	/** 
	 * Index of column spi_piscina_bamb
	 */
	protected static final int COLUMN_SPI_PISCINA_BAMB = 17;

	/** 
	 * Index of column spi_armadietti_spa
	 */
	protected static final int COLUMN_SPI_ARMADIETTI_SPA = 18;

	/** 
	 * Index of column spi_piscina
	 */
	protected static final int COLUMN_SPI_PISCINA = 19;

	/** 
	 * Index of column spi_giochi_acqua
	 */
	protected static final int COLUMN_SPI_GIOCHI_ACQUA = 20;

	/** 
	 * Index of column spi_pisc_ultimo_piano
	 */
	protected static final int COLUMN_SPI_PISC_ULTIMO_PIANO = 21;

	/** 
	 * Index of column spi_pisc_sfioro
	 */
	protected static final int COLUMN_SPI_PISC_SFIORO = 22;

	/** 
	 * Index of column spi_riscaldata
	 */
	protected static final int COLUMN_SPI_RISCALDATA = 23;

	/** 
	 * Index of column spi_pisc_vista
	 */
	protected static final int COLUMN_SPI_PISC_VISTA = 24;

	/** 
	 * Index of column spi_pisc_salata
	 */
	protected static final int COLUMN_SPI_PISC_SALATA = 25;

	/** 
	 * Index of column spi_vasca_imm_fredda
	 */
	protected static final int COLUMN_SPI_VASCA_IMM_FREDDA = 26;

	/** 
	 * Index of column spi_bar_bordo
	 */
	protected static final int COLUMN_SPI_BAR_BORDO = 27;

	/** 
	 * Index of column spi_recinto
	 */
	protected static final int COLUMN_SPI_RECINTO = 28;

	/** 
	 * Index of column spi_pisc_coperta
	 */
	protected static final int COLUMN_SPI_PISC_COPERTA = 29;

	/** 
	 * Index of column spi_pisc_coperta_stag
	 */
	protected static final int COLUMN_SPI_PISC_COPERTA_STAG = 30;

	/** 
	 * Index of column spi_pisc_coperta_anno
	 */
	protected static final int COLUMN_SPI_PISC_COPERTA_ANNO = 31;

	/** 
	 * Index of column spi_pisc_aperto
	 */
	protected static final int COLUMN_SPI_PISC_APERTO = 32;

	/** 
	 * Index of column spi_pisc_aperto_stag
	 */
	protected static final int COLUMN_SPI_PISC_APERTO_STAG = 33;

	/** 
	 * Index of column spi_pisc_aperto_anno
	 */
	protected static final int COLUMN_SPI_PISC_APERTO_ANNO = 34;

	/** 
	 * Index of column spi_costo
	 */
	protected static final int COLUMN_SPI_COSTO = 35;

	/** 
	 * Index of column struttura_str_id
	 */
	protected static final int COLUMN_STRUTTURA_STR_ID = 36;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 36;

	/** 
	 * Index of primary-key column spi_id
	 */
	protected static final int PK_COLUMN_SPI_ID = 1;

	/** 
	 * Inserts a new row in the struttura_piscine table.
	 */
	public StrutturaPiscinePk insert(StrutturaPiscine dto) throws StrutturaPiscineDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_strutture')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setSpiId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getSpiId() );
			stmt.setString( index++, dto.getSpiScivolo() );
			stmt.setString( index++, dto.getSpiSpa() );
			stmt.setString( index++, dto.getSpiTeli() );
			stmt.setString( index++, dto.getSpiBagnoTurco() );
			stmt.setString( index++, dto.getSpiLettini() );
			stmt.setString( index++, dto.getSpiAreaRelax() );
			stmt.setString( index++, dto.getSpiOmbrelloni() );
			stmt.setString( index++, dto.getSpiPediluvio() );
			stmt.setString( index++, dto.getSpiServiziBellezza() );
			stmt.setString( index++, dto.getSpiPacchettiSpa() );
			stmt.setString( index++, dto.getSpiPoltraMassag() );
			stmt.setString( index++, dto.getSpiFitness() );
			stmt.setString( index++, dto.getSpiLezioniYoga() );
			stmt.setString( index++, dto.getSpiLezioniFitness() );
			stmt.setString( index++, dto.getSpiPersonalTrainer() );
			stmt.setString( index++, dto.getSpiPiscinaBamb() );
			stmt.setString( index++, dto.getSpiArmadiettiSpa() );
			stmt.setString( index++, dto.getSpiPiscina() );
			stmt.setString( index++, dto.getSpiGiochiAcqua() );
			stmt.setString( index++, dto.getSpiPiscUltimoPiano() );
			stmt.setString( index++, dto.getSpiPiscSfioro() );
			stmt.setString( index++, dto.getSpiRiscaldata() );
			stmt.setString( index++, dto.getSpiPiscVista() );
			stmt.setString( index++, dto.getSpiPiscSalata() );
			stmt.setString( index++, dto.getSpiVascaImmFredda() );
			stmt.setString( index++, dto.getSpiBarBordo() );
			stmt.setString( index++, dto.getSpiRecinto() );
			stmt.setString( index++, dto.getSpiPiscCoperta() );
			stmt.setString( index++, dto.getSpiPiscCopertaStag() );
			stmt.setString( index++, dto.getSpiPiscCopertaAnno() );
			stmt.setString( index++, dto.getSpiPiscAperto() );
			stmt.setString( index++, dto.getSpiPiscApertoStag() );
			stmt.setString( index++, dto.getSpiPiscApertoAnno() );
			stmt.setFloat( index++, dto.getSpiCosto() );
			stmt.setLong( index++, dto.getStrutturaStrId() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaPiscineDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the struttura_piscine table.
	 */
	public void update(StrutturaPiscinePk pk, StrutturaPiscine dto) throws StrutturaPiscineDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getSpiId() );
			stmt.setString( index++, dto.getSpiScivolo() );
			stmt.setString( index++, dto.getSpiSpa() );
			stmt.setString( index++, dto.getSpiTeli() );
			stmt.setString( index++, dto.getSpiBagnoTurco() );
			stmt.setString( index++, dto.getSpiLettini() );
			stmt.setString( index++, dto.getSpiAreaRelax() );
			stmt.setString( index++, dto.getSpiOmbrelloni() );
			stmt.setString( index++, dto.getSpiPediluvio() );
			stmt.setString( index++, dto.getSpiServiziBellezza() );
			stmt.setString( index++, dto.getSpiPacchettiSpa() );
			stmt.setString( index++, dto.getSpiPoltraMassag() );
			stmt.setString( index++, dto.getSpiFitness() );
			stmt.setString( index++, dto.getSpiLezioniYoga() );
			stmt.setString( index++, dto.getSpiLezioniFitness() );
			stmt.setString( index++, dto.getSpiPersonalTrainer() );
			stmt.setString( index++, dto.getSpiPiscinaBamb() );
			stmt.setString( index++, dto.getSpiArmadiettiSpa() );
			stmt.setString( index++, dto.getSpiPiscina() );
			stmt.setString( index++, dto.getSpiGiochiAcqua() );
			stmt.setString( index++, dto.getSpiPiscUltimoPiano() );
			stmt.setString( index++, dto.getSpiPiscSfioro() );
			stmt.setString( index++, dto.getSpiRiscaldata() );
			stmt.setString( index++, dto.getSpiPiscVista() );
			stmt.setString( index++, dto.getSpiPiscSalata() );
			stmt.setString( index++, dto.getSpiVascaImmFredda() );
			stmt.setString( index++, dto.getSpiBarBordo() );
			stmt.setString( index++, dto.getSpiRecinto() );
			stmt.setString( index++, dto.getSpiPiscCoperta() );
			stmt.setString( index++, dto.getSpiPiscCopertaStag() );
			stmt.setString( index++, dto.getSpiPiscCopertaAnno() );
			stmt.setString( index++, dto.getSpiPiscAperto() );
			stmt.setString( index++, dto.getSpiPiscApertoStag() );
			stmt.setString( index++, dto.getSpiPiscApertoAnno() );
			stmt.setFloat( index++, dto.getSpiCosto() );
			stmt.setLong( index++, dto.getStrutturaStrId() );
			stmt.setLong( 37, pk.getSpiId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaPiscineDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the struttura_piscine table.
	 */
	public void delete(StrutturaPiscinePk pk) throws StrutturaPiscineDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getSpiId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaPiscineDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the struttura_piscine table that matches the specified primary-key value.
	 */
	public StrutturaPiscine findByPrimaryKey(StrutturaPiscinePk pk) throws StrutturaPiscineDaoException
	{
		return findByPrimaryKey( pk.getSpiId() );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'spi_id = :spiId'.
	 */
	public StrutturaPiscine findByPrimaryKey(long spiId) throws StrutturaPiscineDaoException
	{
		StrutturaPiscine ret[] = findByDynamicSelect( SQL_SELECT + " WHERE spi_id = ?", new Object[] {  new Long(spiId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria ''.
	 */
	public StrutturaPiscine[] findAll() throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY spi_id", null );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaPiscine[] findByStruttura(long strutturaStrId) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_str_id = ?", new Object[] {  new Long(strutturaStrId) } );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'spi_id = :spiId'.
	 */
	public StrutturaPiscine[] findWhereSpiIdEquals(long spiId) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spi_id = ? ORDER BY spi_id", new Object[] {  new Long(spiId) } );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'spi_scivolo = :spiScivolo'.
	 */
	public StrutturaPiscine[] findWhereSpiScivoloEquals(String spiScivolo) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spi_scivolo = ? ORDER BY spi_scivolo", new Object[] { spiScivolo } );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'spi_spa = :spiSpa'.
	 */
	public StrutturaPiscine[] findWhereSpiSpaEquals(String spiSpa) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spi_spa = ? ORDER BY spi_spa", new Object[] { spiSpa } );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'spi_teli = :spiTeli'.
	 */
	public StrutturaPiscine[] findWhereSpiTeliEquals(String spiTeli) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spi_teli = ? ORDER BY spi_teli", new Object[] { spiTeli } );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'spi_bagno_turco = :spiBagnoTurco'.
	 */
	public StrutturaPiscine[] findWhereSpiBagnoTurcoEquals(String spiBagnoTurco) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spi_bagno_turco = ? ORDER BY spi_bagno_turco", new Object[] { spiBagnoTurco } );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'spi_lettini = :spiLettini'.
	 */
	public StrutturaPiscine[] findWhereSpiLettiniEquals(String spiLettini) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spi_lettini = ? ORDER BY spi_lettini", new Object[] { spiLettini } );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'spi_area_relax = :spiAreaRelax'.
	 */
	public StrutturaPiscine[] findWhereSpiAreaRelaxEquals(String spiAreaRelax) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spi_area_relax = ? ORDER BY spi_area_relax", new Object[] { spiAreaRelax } );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'spi_ombrelloni = :spiOmbrelloni'.
	 */
	public StrutturaPiscine[] findWhereSpiOmbrelloniEquals(String spiOmbrelloni) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spi_ombrelloni = ? ORDER BY spi_ombrelloni", new Object[] { spiOmbrelloni } );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'spi_pediluvio = :spiPediluvio'.
	 */
	public StrutturaPiscine[] findWhereSpiPediluvioEquals(String spiPediluvio) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spi_pediluvio = ? ORDER BY spi_pediluvio", new Object[] { spiPediluvio } );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'spi_servizi_bellezza = :spiServiziBellezza'.
	 */
	public StrutturaPiscine[] findWhereSpiServiziBellezzaEquals(String spiServiziBellezza) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spi_servizi_bellezza = ? ORDER BY spi_servizi_bellezza", new Object[] { spiServiziBellezza } );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'spi_pacchetti_spa = :spiPacchettiSpa'.
	 */
	public StrutturaPiscine[] findWhereSpiPacchettiSpaEquals(String spiPacchettiSpa) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spi_pacchetti_spa = ? ORDER BY spi_pacchetti_spa", new Object[] { spiPacchettiSpa } );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'spi_poltra_massag = :spiPoltraMassag'.
	 */
	public StrutturaPiscine[] findWhereSpiPoltraMassagEquals(String spiPoltraMassag) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spi_poltra_massag = ? ORDER BY spi_poltra_massag", new Object[] { spiPoltraMassag } );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'spi_fitness = :spiFitness'.
	 */
	public StrutturaPiscine[] findWhereSpiFitnessEquals(String spiFitness) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spi_fitness = ? ORDER BY spi_fitness", new Object[] { spiFitness } );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'spi_lezioni_yoga = :spiLezioniYoga'.
	 */
	public StrutturaPiscine[] findWhereSpiLezioniYogaEquals(String spiLezioniYoga) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spi_lezioni_yoga = ? ORDER BY spi_lezioni_yoga", new Object[] { spiLezioniYoga } );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'spi_lezioni_fitness = :spiLezioniFitness'.
	 */
	public StrutturaPiscine[] findWhereSpiLezioniFitnessEquals(String spiLezioniFitness) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spi_lezioni_fitness = ? ORDER BY spi_lezioni_fitness", new Object[] { spiLezioniFitness } );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'spi_personal_trainer = :spiPersonalTrainer'.
	 */
	public StrutturaPiscine[] findWhereSpiPersonalTrainerEquals(String spiPersonalTrainer) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spi_personal_trainer = ? ORDER BY spi_personal_trainer", new Object[] { spiPersonalTrainer } );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'spi_piscina_bamb = :spiPiscinaBamb'.
	 */
	public StrutturaPiscine[] findWhereSpiPiscinaBambEquals(String spiPiscinaBamb) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spi_piscina_bamb = ? ORDER BY spi_piscina_bamb", new Object[] { spiPiscinaBamb } );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'spi_armadietti_spa = :spiArmadiettiSpa'.
	 */
	public StrutturaPiscine[] findWhereSpiArmadiettiSpaEquals(String spiArmadiettiSpa) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spi_armadietti_spa = ? ORDER BY spi_armadietti_spa", new Object[] { spiArmadiettiSpa } );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'spi_piscina = :spiPiscina'.
	 */
	public StrutturaPiscine[] findWhereSpiPiscinaEquals(String spiPiscina) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spi_piscina = ? ORDER BY spi_piscina", new Object[] { spiPiscina } );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'spi_giochi_acqua = :spiGiochiAcqua'.
	 */
	public StrutturaPiscine[] findWhereSpiGiochiAcquaEquals(String spiGiochiAcqua) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spi_giochi_acqua = ? ORDER BY spi_giochi_acqua", new Object[] { spiGiochiAcqua } );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'spi_pisc_ultimo_piano = :spiPiscUltimoPiano'.
	 */
	public StrutturaPiscine[] findWhereSpiPiscUltimoPianoEquals(String spiPiscUltimoPiano) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spi_pisc_ultimo_piano = ? ORDER BY spi_pisc_ultimo_piano", new Object[] { spiPiscUltimoPiano } );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'spi_pisc_sfioro = :spiPiscSfioro'.
	 */
	public StrutturaPiscine[] findWhereSpiPiscSfioroEquals(String spiPiscSfioro) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spi_pisc_sfioro = ? ORDER BY spi_pisc_sfioro", new Object[] { spiPiscSfioro } );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'spi_riscaldata = :spiRiscaldata'.
	 */
	public StrutturaPiscine[] findWhereSpiRiscaldataEquals(String spiRiscaldata) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spi_riscaldata = ? ORDER BY spi_riscaldata", new Object[] { spiRiscaldata } );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'spi_pisc_vista = :spiPiscVista'.
	 */
	public StrutturaPiscine[] findWhereSpiPiscVistaEquals(String spiPiscVista) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spi_pisc_vista = ? ORDER BY spi_pisc_vista", new Object[] { spiPiscVista } );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'spi_pisc_salata = :spiPiscSalata'.
	 */
	public StrutturaPiscine[] findWhereSpiPiscSalataEquals(String spiPiscSalata) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spi_pisc_salata = ? ORDER BY spi_pisc_salata", new Object[] { spiPiscSalata } );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'spi_vasca_imm_fredda = :spiVascaImmFredda'.
	 */
	public StrutturaPiscine[] findWhereSpiVascaImmFreddaEquals(String spiVascaImmFredda) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spi_vasca_imm_fredda = ? ORDER BY spi_vasca_imm_fredda", new Object[] { spiVascaImmFredda } );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'spi_bar_bordo = :spiBarBordo'.
	 */
	public StrutturaPiscine[] findWhereSpiBarBordoEquals(String spiBarBordo) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spi_bar_bordo = ? ORDER BY spi_bar_bordo", new Object[] { spiBarBordo } );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'spi_recinto = :spiRecinto'.
	 */
	public StrutturaPiscine[] findWhereSpiRecintoEquals(String spiRecinto) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spi_recinto = ? ORDER BY spi_recinto", new Object[] { spiRecinto } );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'spi_pisc_coperta = :spiPiscCoperta'.
	 */
	public StrutturaPiscine[] findWhereSpiPiscCopertaEquals(String spiPiscCoperta) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spi_pisc_coperta = ? ORDER BY spi_pisc_coperta", new Object[] { spiPiscCoperta } );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'spi_pisc_coperta_stag = :spiPiscCopertaStag'.
	 */
	public StrutturaPiscine[] findWhereSpiPiscCopertaStagEquals(String spiPiscCopertaStag) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spi_pisc_coperta_stag = ? ORDER BY spi_pisc_coperta_stag", new Object[] { spiPiscCopertaStag } );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'spi_pisc_coperta_anno = :spiPiscCopertaAnno'.
	 */
	public StrutturaPiscine[] findWhereSpiPiscCopertaAnnoEquals(String spiPiscCopertaAnno) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spi_pisc_coperta_anno = ? ORDER BY spi_pisc_coperta_anno", new Object[] { spiPiscCopertaAnno } );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'spi_pisc_aperto = :spiPiscAperto'.
	 */
	public StrutturaPiscine[] findWhereSpiPiscApertoEquals(String spiPiscAperto) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spi_pisc_aperto = ? ORDER BY spi_pisc_aperto", new Object[] { spiPiscAperto } );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'spi_pisc_aperto_stag = :spiPiscApertoStag'.
	 */
	public StrutturaPiscine[] findWhereSpiPiscApertoStagEquals(String spiPiscApertoStag) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spi_pisc_aperto_stag = ? ORDER BY spi_pisc_aperto_stag", new Object[] { spiPiscApertoStag } );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'spi_pisc_aperto_anno = :spiPiscApertoAnno'.
	 */
	public StrutturaPiscine[] findWhereSpiPiscApertoAnnoEquals(String spiPiscApertoAnno) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spi_pisc_aperto_anno = ? ORDER BY spi_pisc_aperto_anno", new Object[] { spiPiscApertoAnno } );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'spi_costo = :spiCosto'.
	 */
	public StrutturaPiscine[] findWhereSpiCostoEquals(float spiCosto) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE spi_costo = ? ORDER BY spi_costo", new Object[] {  new Float(spiCosto) } );
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaPiscine[] findWhereStrutturaStrIdEquals(long strutturaStrId) throws StrutturaPiscineDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_str_id = ? ORDER BY struttura_str_id", new Object[] {  new Long(strutturaStrId) } );
	}

	/**
	 * Method 'StrutturaPiscineDaoImpl'
	 * 
	 */
	public StrutturaPiscineDaoImpl()
	{
	}

	/**
	 * Method 'StrutturaPiscineDaoImpl'
	 * 
	 * @param userConn
	 */
	public StrutturaPiscineDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "struttura_piscine";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected StrutturaPiscine fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			StrutturaPiscine dto = new StrutturaPiscine();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected StrutturaPiscine[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			StrutturaPiscine dto = new StrutturaPiscine();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		StrutturaPiscine ret[] = new StrutturaPiscine[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(StrutturaPiscine dto, ResultSet rs) throws SQLException
	{
		dto.setSpiId( rs.getLong( COLUMN_SPI_ID ) );
		dto.setSpiScivolo( rs.getString( COLUMN_SPI_SCIVOLO ) );
		dto.setSpiSpa( rs.getString( COLUMN_SPI_SPA ) );
		dto.setSpiTeli( rs.getString( COLUMN_SPI_TELI ) );
		dto.setSpiBagnoTurco( rs.getString( COLUMN_SPI_BAGNO_TURCO ) );
		dto.setSpiLettini( rs.getString( COLUMN_SPI_LETTINI ) );
		dto.setSpiAreaRelax( rs.getString( COLUMN_SPI_AREA_RELAX ) );
		dto.setSpiOmbrelloni( rs.getString( COLUMN_SPI_OMBRELLONI ) );
		dto.setSpiPediluvio( rs.getString( COLUMN_SPI_PEDILUVIO ) );
		dto.setSpiServiziBellezza( rs.getString( COLUMN_SPI_SERVIZI_BELLEZZA ) );
		dto.setSpiPacchettiSpa( rs.getString( COLUMN_SPI_PACCHETTI_SPA ) );
		dto.setSpiPoltraMassag( rs.getString( COLUMN_SPI_POLTRA_MASSAG ) );
		dto.setSpiFitness( rs.getString( COLUMN_SPI_FITNESS ) );
		dto.setSpiLezioniYoga( rs.getString( COLUMN_SPI_LEZIONI_YOGA ) );
		dto.setSpiLezioniFitness( rs.getString( COLUMN_SPI_LEZIONI_FITNESS ) );
		dto.setSpiPersonalTrainer( rs.getString( COLUMN_SPI_PERSONAL_TRAINER ) );
		dto.setSpiPiscinaBamb( rs.getString( COLUMN_SPI_PISCINA_BAMB ) );
		dto.setSpiArmadiettiSpa( rs.getString( COLUMN_SPI_ARMADIETTI_SPA ) );
		dto.setSpiPiscina( rs.getString( COLUMN_SPI_PISCINA ) );
		dto.setSpiGiochiAcqua( rs.getString( COLUMN_SPI_GIOCHI_ACQUA ) );
		dto.setSpiPiscUltimoPiano( rs.getString( COLUMN_SPI_PISC_ULTIMO_PIANO ) );
		dto.setSpiPiscSfioro( rs.getString( COLUMN_SPI_PISC_SFIORO ) );
		dto.setSpiRiscaldata( rs.getString( COLUMN_SPI_RISCALDATA ) );
		dto.setSpiPiscVista( rs.getString( COLUMN_SPI_PISC_VISTA ) );
		dto.setSpiPiscSalata( rs.getString( COLUMN_SPI_PISC_SALATA ) );
		dto.setSpiVascaImmFredda( rs.getString( COLUMN_SPI_VASCA_IMM_FREDDA ) );
		dto.setSpiBarBordo( rs.getString( COLUMN_SPI_BAR_BORDO ) );
		dto.setSpiRecinto( rs.getString( COLUMN_SPI_RECINTO ) );
		dto.setSpiPiscCoperta( rs.getString( COLUMN_SPI_PISC_COPERTA ) );
		dto.setSpiPiscCopertaStag( rs.getString( COLUMN_SPI_PISC_COPERTA_STAG ) );
		dto.setSpiPiscCopertaAnno( rs.getString( COLUMN_SPI_PISC_COPERTA_ANNO ) );
		dto.setSpiPiscAperto( rs.getString( COLUMN_SPI_PISC_APERTO ) );
		dto.setSpiPiscApertoStag( rs.getString( COLUMN_SPI_PISC_APERTO_STAG ) );
		dto.setSpiPiscApertoAnno( rs.getString( COLUMN_SPI_PISC_APERTO_ANNO ) );
		dto.setSpiCosto( rs.getFloat( COLUMN_SPI_COSTO ) );
		dto.setStrutturaStrId( rs.getLong( COLUMN_STRUTTURA_STR_ID ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(StrutturaPiscine dto)
	{
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the specified arbitrary SQL statement
	 */
	public StrutturaPiscine[] findByDynamicSelect(String sql, Object[] sqlParams) throws StrutturaPiscineDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaPiscineDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the struttura_piscine table that match the specified arbitrary SQL statement
	 */
	public StrutturaPiscine[] findByDynamicWhere(String sql, Object[] sqlParams) throws StrutturaPiscineDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaPiscineDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
