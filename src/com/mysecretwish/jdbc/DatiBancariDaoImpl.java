/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.jdbc;

import com.mysecretwish.dao.*;
import com.mysecretwish.factory.*;
import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class DatiBancariDaoImpl extends AbstractDAO implements DatiBancariDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ban_id, ban_iban, ban_nominativo, ban_indirizzo, ban_cap, ban_nome_banca, ban_branch_code, ban_bic_swift, utente_ute_id, fk_comune, fk_struttura, ban_usa_attuale FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ban_id, ban_iban, ban_nominativo, ban_indirizzo, ban_cap, ban_nome_banca, ban_branch_code, ban_bic_swift, utente_ute_id, fk_comune, fk_struttura, ban_usa_attuale ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ban_id = ?, ban_iban = ?, ban_nominativo = ?, ban_indirizzo = ?, ban_cap = ?, ban_nome_banca = ?, ban_branch_code = ?, ban_bic_swift = ?, utente_ute_id = ?, fk_comune = ?, fk_struttura = ?, ban_usa_attuale = ? WHERE ban_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ban_id = ?";

	/** 
	 * Index of column ban_id
	 */
	protected static final int COLUMN_BAN_ID = 1;

	/** 
	 * Index of column ban_iban
	 */
	protected static final int COLUMN_BAN_IBAN = 2;

	/** 
	 * Index of column ban_nominativo
	 */
	protected static final int COLUMN_BAN_NOMINATIVO = 3;

	/** 
	 * Index of column ban_indirizzo
	 */
	protected static final int COLUMN_BAN_INDIRIZZO = 4;

	/** 
	 * Index of column ban_cap
	 */
	protected static final int COLUMN_BAN_CAP = 5;

	/** 
	 * Index of column ban_nome_banca
	 */
	protected static final int COLUMN_BAN_NOME_BANCA = 6;

	/** 
	 * Index of column ban_branch_code
	 */
	protected static final int COLUMN_BAN_BRANCH_CODE = 7;

	/** 
	 * Index of column ban_bic_swift
	 */
	protected static final int COLUMN_BAN_BIC_SWIFT = 8;

	/** 
	 * Index of column utente_ute_id
	 */
	protected static final int COLUMN_UTENTE_UTE_ID = 9;

	/** 
	 * Index of column fk_comune
	 */
	protected static final int COLUMN_FK_COMUNE = 10;

	/** 
	 * Index of column fk_struttura
	 */
	protected static final int COLUMN_FK_STRUTTURA = 11;

	/** 
	 * Index of column ban_usa_attuale
	 */
	protected static final int COLUMN_BAN_USA_ATTUALE = 12;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 12;

	/** 
	 * Index of primary-key column ban_id
	 */
	protected static final int PK_COLUMN_BAN_ID = 1;

	/** 
	 * Inserts a new row in the dati_bancari table.
	 */
	public DatiBancariPk insert(DatiBancari dto) throws DatiBancariDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_tabelle_dominio')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setBanId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getBanId() );
			stmt.setString( index++, dto.getBanIban() );
			stmt.setString( index++, dto.getBanNominativo() );
			stmt.setString( index++, dto.getBanIndirizzo() );
			stmt.setString( index++, dto.getBanCap() );
			stmt.setString( index++, dto.getBanNomeBanca() );
			stmt.setString( index++, dto.getBanBranchCode() );
			stmt.setString( index++, dto.getBanBicSwift() );
			stmt.setLong( index++, dto.getUtenteUteId() );
			if (dto.isFkComuneNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getFkComune() );
			}
		
			if (dto.isFkStrutturaNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getFkStruttura() );
			}
		
			stmt.setString( index++, dto.getBanUsaAttuale() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DatiBancariDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the dati_bancari table.
	 */
	public void update(DatiBancariPk pk, DatiBancari dto) throws DatiBancariDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getBanId() );
			stmt.setString( index++, dto.getBanIban() );
			stmt.setString( index++, dto.getBanNominativo() );
			stmt.setString( index++, dto.getBanIndirizzo() );
			stmt.setString( index++, dto.getBanCap() );
			stmt.setString( index++, dto.getBanNomeBanca() );
			stmt.setString( index++, dto.getBanBranchCode() );
			stmt.setString( index++, dto.getBanBicSwift() );
			stmt.setLong( index++, dto.getUtenteUteId() );
			if (dto.isFkComuneNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getFkComune() );
			}
		
			if (dto.isFkStrutturaNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getFkStruttura() );
			}
		
			stmt.setString( index++, dto.getBanUsaAttuale() );
			stmt.setLong( 13, pk.getBanId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DatiBancariDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the dati_bancari table.
	 */
	public void delete(DatiBancariPk pk) throws DatiBancariDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getBanId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DatiBancariDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the dati_bancari table that matches the specified primary-key value.
	 */
	public DatiBancari findByPrimaryKey(DatiBancariPk pk) throws DatiBancariDaoException
	{
		return findByPrimaryKey( pk.getBanId() );
	}

	/** 
	 * Returns all rows from the dati_bancari table that match the criteria 'ban_id = :banId'.
	 */
	public DatiBancari findByPrimaryKey(long banId) throws DatiBancariDaoException
	{
		DatiBancari ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ban_id = ?", new Object[] {  new Long(banId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the dati_bancari table that match the criteria ''.
	 */
	public DatiBancari[] findAll() throws DatiBancariDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ban_id", null );
	}

	/** 
	 * Returns all rows from the dati_bancari table that match the criteria 'fk_comune = :fkComune'.
	 */
	public DatiBancari[] findByComuni(long fkComune) throws DatiBancariDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fk_comune = ?", new Object[] {  new Long(fkComune) } );
	}

	/** 
	 * Returns all rows from the dati_bancari table that match the criteria 'fk_struttura = :fkStruttura'.
	 */
	public DatiBancari[] findByStruttura(long fkStruttura) throws DatiBancariDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fk_struttura = ?", new Object[] {  new Long(fkStruttura) } );
	}

	/** 
	 * Returns all rows from the dati_bancari table that match the criteria 'ban_id = :banId'.
	 */
	public DatiBancari[] findWhereBanIdEquals(long banId) throws DatiBancariDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ban_id = ? ORDER BY ban_id", new Object[] {  new Long(banId) } );
	}

	/** 
	 * Returns all rows from the dati_bancari table that match the criteria 'ban_iban = :banIban'.
	 */
	public DatiBancari[] findWhereBanIbanEquals(String banIban) throws DatiBancariDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ban_iban = ? ORDER BY ban_iban", new Object[] { banIban } );
	}

	/** 
	 * Returns all rows from the dati_bancari table that match the criteria 'ban_nominativo = :banNominativo'.
	 */
	public DatiBancari[] findWhereBanNominativoEquals(String banNominativo) throws DatiBancariDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ban_nominativo = ? ORDER BY ban_nominativo", new Object[] { banNominativo } );
	}

	/** 
	 * Returns all rows from the dati_bancari table that match the criteria 'ban_indirizzo = :banIndirizzo'.
	 */
	public DatiBancari[] findWhereBanIndirizzoEquals(String banIndirizzo) throws DatiBancariDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ban_indirizzo = ? ORDER BY ban_indirizzo", new Object[] { banIndirizzo } );
	}

	/** 
	 * Returns all rows from the dati_bancari table that match the criteria 'ban_cap = :banCap'.
	 */
	public DatiBancari[] findWhereBanCapEquals(String banCap) throws DatiBancariDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ban_cap = ? ORDER BY ban_cap", new Object[] { banCap } );
	}

	/** 
	 * Returns all rows from the dati_bancari table that match the criteria 'ban_nome_banca = :banNomeBanca'.
	 */
	public DatiBancari[] findWhereBanNomeBancaEquals(String banNomeBanca) throws DatiBancariDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ban_nome_banca = ? ORDER BY ban_nome_banca", new Object[] { banNomeBanca } );
	}

	/** 
	 * Returns all rows from the dati_bancari table that match the criteria 'ban_branch_code = :banBranchCode'.
	 */
	public DatiBancari[] findWhereBanBranchCodeEquals(String banBranchCode) throws DatiBancariDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ban_branch_code = ? ORDER BY ban_branch_code", new Object[] { banBranchCode } );
	}

	/** 
	 * Returns all rows from the dati_bancari table that match the criteria 'ban_bic_swift = :banBicSwift'.
	 */
	public DatiBancari[] findWhereBanBicSwiftEquals(String banBicSwift) throws DatiBancariDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ban_bic_swift = ? ORDER BY ban_bic_swift", new Object[] { banBicSwift } );
	}

	/** 
	 * Returns all rows from the dati_bancari table that match the criteria 'utente_ute_id = :utenteUteId'.
	 */
	public DatiBancari[] findWhereUtenteUteIdEquals(long utenteUteId) throws DatiBancariDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE utente_ute_id = ? ORDER BY utente_ute_id", new Object[] {  new Long(utenteUteId) } );
	}

	/** 
	 * Returns all rows from the dati_bancari table that match the criteria 'fk_comune = :fkComune'.
	 */
	public DatiBancari[] findWhereFkComuneEquals(long fkComune) throws DatiBancariDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fk_comune = ? ORDER BY fk_comune", new Object[] {  new Long(fkComune) } );
	}

	/** 
	 * Returns all rows from the dati_bancari table that match the criteria 'fk_struttura = :fkStruttura'.
	 */
	public DatiBancari[] findWhereFkStrutturaEquals(long fkStruttura) throws DatiBancariDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fk_struttura = ? ORDER BY fk_struttura", new Object[] {  new Long(fkStruttura) } );
	}

	/** 
	 * Returns all rows from the dati_bancari table that match the criteria 'ban_usa_attuale = :banUsaAttuale'.
	 */
	public DatiBancari[] findWhereBanUsaAttualeEquals(String banUsaAttuale) throws DatiBancariDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ban_usa_attuale = ? ORDER BY ban_usa_attuale", new Object[] { banUsaAttuale } );
	}

	/**
	 * Method 'DatiBancariDaoImpl'
	 * 
	 */
	public DatiBancariDaoImpl()
	{
	}

	/**
	 * Method 'DatiBancariDaoImpl'
	 * 
	 * @param userConn
	 */
	public DatiBancariDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "dati_bancari";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected DatiBancari fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			DatiBancari dto = new DatiBancari();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected DatiBancari[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			DatiBancari dto = new DatiBancari();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		DatiBancari ret[] = new DatiBancari[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(DatiBancari dto, ResultSet rs) throws SQLException
	{
		dto.setBanId( rs.getLong( COLUMN_BAN_ID ) );
		dto.setBanIban( rs.getString( COLUMN_BAN_IBAN ) );
		dto.setBanNominativo( rs.getString( COLUMN_BAN_NOMINATIVO ) );
		dto.setBanIndirizzo( rs.getString( COLUMN_BAN_INDIRIZZO ) );
		dto.setBanCap( rs.getString( COLUMN_BAN_CAP ) );
		dto.setBanNomeBanca( rs.getString( COLUMN_BAN_NOME_BANCA ) );
		dto.setBanBranchCode( rs.getString( COLUMN_BAN_BRANCH_CODE ) );
		dto.setBanBicSwift( rs.getString( COLUMN_BAN_BIC_SWIFT ) );
		dto.setUtenteUteId( rs.getLong( COLUMN_UTENTE_UTE_ID ) );
		dto.setFkComune( rs.getLong( COLUMN_FK_COMUNE ) );
		if (rs.wasNull()) {
			dto.setFkComuneNull( true );
		}
		
		dto.setFkStruttura( rs.getLong( COLUMN_FK_STRUTTURA ) );
		if (rs.wasNull()) {
			dto.setFkStrutturaNull( true );
		}
		
		dto.setBanUsaAttuale( rs.getString( COLUMN_BAN_USA_ATTUALE ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(DatiBancari dto)
	{
	}

	/** 
	 * Returns all rows from the dati_bancari table that match the specified arbitrary SQL statement
	 */
	public DatiBancari[] findByDynamicSelect(String sql, Object[] sqlParams) throws DatiBancariDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DatiBancariDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the dati_bancari table that match the specified arbitrary SQL statement
	 */
	public DatiBancari[] findByDynamicWhere(String sql, Object[] sqlParams) throws DatiBancariDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DatiBancariDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
