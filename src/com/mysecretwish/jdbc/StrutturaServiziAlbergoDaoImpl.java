/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.jdbc;

import com.mysecretwish.dao.*;
import com.mysecretwish.factory.*;
import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class StrutturaServiziAlbergoDaoImpl extends AbstractDAO implements StrutturaServiziAlbergoDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ssa_id, ssa_pren_risto, ssa_pren_tavolo, ssa_costo_pren_tav, ssa_pren_cibi_part, ssa_costo_pren_cibi, ssa_pren_spa, ssa_serv_turi_est, ssa_ric_latecheck, ssa_tv_giochi_cam, ssa_ric_aiuto_bag, ssa_pren_serv_sport, ssa_serv_sociali_int, struttura_str_id, ssa_servizi_camera FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ssa_id, ssa_pren_risto, ssa_pren_tavolo, ssa_costo_pren_tav, ssa_pren_cibi_part, ssa_costo_pren_cibi, ssa_pren_spa, ssa_serv_turi_est, ssa_ric_latecheck, ssa_tv_giochi_cam, ssa_ric_aiuto_bag, ssa_pren_serv_sport, ssa_serv_sociali_int, struttura_str_id, ssa_servizi_camera ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ssa_id = ?, ssa_pren_risto = ?, ssa_pren_tavolo = ?, ssa_costo_pren_tav = ?, ssa_pren_cibi_part = ?, ssa_costo_pren_cibi = ?, ssa_pren_spa = ?, ssa_serv_turi_est = ?, ssa_ric_latecheck = ?, ssa_tv_giochi_cam = ?, ssa_ric_aiuto_bag = ?, ssa_pren_serv_sport = ?, ssa_serv_sociali_int = ?, struttura_str_id = ?, ssa_servizi_camera = ? WHERE ssa_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ssa_id = ?";

	/** 
	 * Index of column ssa_id
	 */
	protected static final int COLUMN_SSA_ID = 1;

	/** 
	 * Index of column ssa_pren_risto
	 */
	protected static final int COLUMN_SSA_PREN_RISTO = 2;

	/** 
	 * Index of column ssa_pren_tavolo
	 */
	protected static final int COLUMN_SSA_PREN_TAVOLO = 3;

	/** 
	 * Index of column ssa_costo_pren_tav
	 */
	protected static final int COLUMN_SSA_COSTO_PREN_TAV = 4;

	/** 
	 * Index of column ssa_pren_cibi_part
	 */
	protected static final int COLUMN_SSA_PREN_CIBI_PART = 5;

	/** 
	 * Index of column ssa_costo_pren_cibi
	 */
	protected static final int COLUMN_SSA_COSTO_PREN_CIBI = 6;

	/** 
	 * Index of column ssa_pren_spa
	 */
	protected static final int COLUMN_SSA_PREN_SPA = 7;

	/** 
	 * Index of column ssa_serv_turi_est
	 */
	protected static final int COLUMN_SSA_SERV_TURI_EST = 8;

	/** 
	 * Index of column ssa_ric_latecheck
	 */
	protected static final int COLUMN_SSA_RIC_LATECHECK = 9;

	/** 
	 * Index of column ssa_tv_giochi_cam
	 */
	protected static final int COLUMN_SSA_TV_GIOCHI_CAM = 10;

	/** 
	 * Index of column ssa_ric_aiuto_bag
	 */
	protected static final int COLUMN_SSA_RIC_AIUTO_BAG = 11;

	/** 
	 * Index of column ssa_pren_serv_sport
	 */
	protected static final int COLUMN_SSA_PREN_SERV_SPORT = 12;

	/** 
	 * Index of column ssa_serv_sociali_int
	 */
	protected static final int COLUMN_SSA_SERV_SOCIALI_INT = 13;

	/** 
	 * Index of column struttura_str_id
	 */
	protected static final int COLUMN_STRUTTURA_STR_ID = 14;

	/** 
	 * Index of column ssa_servizi_camera
	 */
	protected static final int COLUMN_SSA_SERVIZI_CAMERA = 15;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 15;

	/** 
	 * Index of primary-key column ssa_id
	 */
	protected static final int PK_COLUMN_SSA_ID = 1;

	/** 
	 * Inserts a new row in the struttura_servizi_albergo table.
	 */
	public StrutturaServiziAlbergoPk insert(StrutturaServiziAlbergo dto) throws StrutturaServiziAlbergoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_strutture')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setSsaId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getSsaId() );
			stmt.setString( index++, dto.getSsaPrenRisto() );
			stmt.setString( index++, dto.getSsaPrenTavolo() );
			stmt.setFloat( index++, dto.getSsaCostoPrenTav() );
			stmt.setString( index++, dto.getSsaPrenCibiPart() );
			stmt.setFloat( index++, dto.getSsaCostoPrenCibi() );
			stmt.setString( index++, dto.getSsaPrenSpa() );
			stmt.setString( index++, dto.getSsaServTuriEst() );
			stmt.setString( index++, dto.getSsaRicLatecheck() );
			stmt.setString( index++, dto.getSsaTvGiochiCam() );
			stmt.setString( index++, dto.getSsaRicAiutoBag() );
			stmt.setString( index++, dto.getSsaPrenServSport() );
			stmt.setString( index++, dto.getSsaServSocialiInt() );
			stmt.setLong( index++, dto.getStrutturaStrId() );
			if (dto.isSsaServiziCameraNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getSsaServiziCamera() );
			}
		
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaServiziAlbergoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the struttura_servizi_albergo table.
	 */
	public void update(StrutturaServiziAlbergoPk pk, StrutturaServiziAlbergo dto) throws StrutturaServiziAlbergoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getSsaId() );
			stmt.setString( index++, dto.getSsaPrenRisto() );
			stmt.setString( index++, dto.getSsaPrenTavolo() );
			stmt.setFloat( index++, dto.getSsaCostoPrenTav() );
			stmt.setString( index++, dto.getSsaPrenCibiPart() );
			stmt.setFloat( index++, dto.getSsaCostoPrenCibi() );
			stmt.setString( index++, dto.getSsaPrenSpa() );
			stmt.setString( index++, dto.getSsaServTuriEst() );
			stmt.setString( index++, dto.getSsaRicLatecheck() );
			stmt.setString( index++, dto.getSsaTvGiochiCam() );
			stmt.setString( index++, dto.getSsaRicAiutoBag() );
			stmt.setString( index++, dto.getSsaPrenServSport() );
			stmt.setString( index++, dto.getSsaServSocialiInt() );
			stmt.setLong( index++, dto.getStrutturaStrId() );
			if (dto.isSsaServiziCameraNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getSsaServiziCamera() );
			}
		
			stmt.setLong( 16, pk.getSsaId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaServiziAlbergoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the struttura_servizi_albergo table.
	 */
	public void delete(StrutturaServiziAlbergoPk pk) throws StrutturaServiziAlbergoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getSsaId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaServiziAlbergoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the struttura_servizi_albergo table that matches the specified primary-key value.
	 */
	public StrutturaServiziAlbergo findByPrimaryKey(StrutturaServiziAlbergoPk pk) throws StrutturaServiziAlbergoDaoException
	{
		return findByPrimaryKey( pk.getSsaId() );
	}

	/** 
	 * Returns all rows from the struttura_servizi_albergo table that match the criteria 'ssa_id = :ssaId'.
	 */
	public StrutturaServiziAlbergo findByPrimaryKey(long ssaId) throws StrutturaServiziAlbergoDaoException
	{
		StrutturaServiziAlbergo ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ssa_id = ?", new Object[] {  new Long(ssaId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the struttura_servizi_albergo table that match the criteria ''.
	 */
	public StrutturaServiziAlbergo[] findAll() throws StrutturaServiziAlbergoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ssa_id", null );
	}

	/** 
	 * Returns all rows from the struttura_servizi_albergo table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaServiziAlbergo[] findByStruttura(long strutturaStrId) throws StrutturaServiziAlbergoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_str_id = ?", new Object[] {  new Long(strutturaStrId) } );
	}

	/** 
	 * Returns all rows from the struttura_servizi_albergo table that match the criteria 'ssa_id = :ssaId'.
	 */
	public StrutturaServiziAlbergo[] findWhereSsaIdEquals(long ssaId) throws StrutturaServiziAlbergoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssa_id = ? ORDER BY ssa_id", new Object[] {  new Long(ssaId) } );
	}

	/** 
	 * Returns all rows from the struttura_servizi_albergo table that match the criteria 'ssa_pren_risto = :ssaPrenRisto'.
	 */
	public StrutturaServiziAlbergo[] findWhereSsaPrenRistoEquals(String ssaPrenRisto) throws StrutturaServiziAlbergoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssa_pren_risto = ? ORDER BY ssa_pren_risto", new Object[] { ssaPrenRisto } );
	}

	/** 
	 * Returns all rows from the struttura_servizi_albergo table that match the criteria 'ssa_pren_tavolo = :ssaPrenTavolo'.
	 */
	public StrutturaServiziAlbergo[] findWhereSsaPrenTavoloEquals(String ssaPrenTavolo) throws StrutturaServiziAlbergoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssa_pren_tavolo = ? ORDER BY ssa_pren_tavolo", new Object[] { ssaPrenTavolo } );
	}

	/** 
	 * Returns all rows from the struttura_servizi_albergo table that match the criteria 'ssa_costo_pren_tav = :ssaCostoPrenTav'.
	 */
	public StrutturaServiziAlbergo[] findWhereSsaCostoPrenTavEquals(float ssaCostoPrenTav) throws StrutturaServiziAlbergoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssa_costo_pren_tav = ? ORDER BY ssa_costo_pren_tav", new Object[] {  new Float(ssaCostoPrenTav) } );
	}

	/** 
	 * Returns all rows from the struttura_servizi_albergo table that match the criteria 'ssa_pren_cibi_part = :ssaPrenCibiPart'.
	 */
	public StrutturaServiziAlbergo[] findWhereSsaPrenCibiPartEquals(String ssaPrenCibiPart) throws StrutturaServiziAlbergoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssa_pren_cibi_part = ? ORDER BY ssa_pren_cibi_part", new Object[] { ssaPrenCibiPart } );
	}

	/** 
	 * Returns all rows from the struttura_servizi_albergo table that match the criteria 'ssa_costo_pren_cibi = :ssaCostoPrenCibi'.
	 */
	public StrutturaServiziAlbergo[] findWhereSsaCostoPrenCibiEquals(float ssaCostoPrenCibi) throws StrutturaServiziAlbergoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssa_costo_pren_cibi = ? ORDER BY ssa_costo_pren_cibi", new Object[] {  new Float(ssaCostoPrenCibi) } );
	}

	/** 
	 * Returns all rows from the struttura_servizi_albergo table that match the criteria 'ssa_pren_spa = :ssaPrenSpa'.
	 */
	public StrutturaServiziAlbergo[] findWhereSsaPrenSpaEquals(String ssaPrenSpa) throws StrutturaServiziAlbergoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssa_pren_spa = ? ORDER BY ssa_pren_spa", new Object[] { ssaPrenSpa } );
	}

	/** 
	 * Returns all rows from the struttura_servizi_albergo table that match the criteria 'ssa_serv_turi_est = :ssaServTuriEst'.
	 */
	public StrutturaServiziAlbergo[] findWhereSsaServTuriEstEquals(String ssaServTuriEst) throws StrutturaServiziAlbergoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssa_serv_turi_est = ? ORDER BY ssa_serv_turi_est", new Object[] { ssaServTuriEst } );
	}

	/** 
	 * Returns all rows from the struttura_servizi_albergo table that match the criteria 'ssa_ric_latecheck = :ssaRicLatecheck'.
	 */
	public StrutturaServiziAlbergo[] findWhereSsaRicLatecheckEquals(String ssaRicLatecheck) throws StrutturaServiziAlbergoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssa_ric_latecheck = ? ORDER BY ssa_ric_latecheck", new Object[] { ssaRicLatecheck } );
	}

	/** 
	 * Returns all rows from the struttura_servizi_albergo table that match the criteria 'ssa_tv_giochi_cam = :ssaTvGiochiCam'.
	 */
	public StrutturaServiziAlbergo[] findWhereSsaTvGiochiCamEquals(String ssaTvGiochiCam) throws StrutturaServiziAlbergoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssa_tv_giochi_cam = ? ORDER BY ssa_tv_giochi_cam", new Object[] { ssaTvGiochiCam } );
	}

	/** 
	 * Returns all rows from the struttura_servizi_albergo table that match the criteria 'ssa_ric_aiuto_bag = :ssaRicAiutoBag'.
	 */
	public StrutturaServiziAlbergo[] findWhereSsaRicAiutoBagEquals(String ssaRicAiutoBag) throws StrutturaServiziAlbergoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssa_ric_aiuto_bag = ? ORDER BY ssa_ric_aiuto_bag", new Object[] { ssaRicAiutoBag } );
	}

	/** 
	 * Returns all rows from the struttura_servizi_albergo table that match the criteria 'ssa_pren_serv_sport = :ssaPrenServSport'.
	 */
	public StrutturaServiziAlbergo[] findWhereSsaPrenServSportEquals(String ssaPrenServSport) throws StrutturaServiziAlbergoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssa_pren_serv_sport = ? ORDER BY ssa_pren_serv_sport", new Object[] { ssaPrenServSport } );
	}

	/** 
	 * Returns all rows from the struttura_servizi_albergo table that match the criteria 'ssa_serv_sociali_int = :ssaServSocialiInt'.
	 */
	public StrutturaServiziAlbergo[] findWhereSsaServSocialiIntEquals(String ssaServSocialiInt) throws StrutturaServiziAlbergoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssa_serv_sociali_int = ? ORDER BY ssa_serv_sociali_int", new Object[] { ssaServSocialiInt } );
	}

	/** 
	 * Returns all rows from the struttura_servizi_albergo table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaServiziAlbergo[] findWhereStrutturaStrIdEquals(long strutturaStrId) throws StrutturaServiziAlbergoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_str_id = ? ORDER BY struttura_str_id", new Object[] {  new Long(strutturaStrId) } );
	}

	/** 
	 * Returns all rows from the struttura_servizi_albergo table that match the criteria 'ssa_servizi_camera = :ssaServiziCamera'.
	 */
	public StrutturaServiziAlbergo[] findWhereSsaServiziCameraEquals(long ssaServiziCamera) throws StrutturaServiziAlbergoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssa_servizi_camera = ? ORDER BY ssa_servizi_camera", new Object[] {  new Long(ssaServiziCamera) } );
	}

	/**
	 * Method 'StrutturaServiziAlbergoDaoImpl'
	 * 
	 */
	public StrutturaServiziAlbergoDaoImpl()
	{
	}

	/**
	 * Method 'StrutturaServiziAlbergoDaoImpl'
	 * 
	 * @param userConn
	 */
	public StrutturaServiziAlbergoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "struttura_servizi_albergo";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected StrutturaServiziAlbergo fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			StrutturaServiziAlbergo dto = new StrutturaServiziAlbergo();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected StrutturaServiziAlbergo[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			StrutturaServiziAlbergo dto = new StrutturaServiziAlbergo();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		StrutturaServiziAlbergo ret[] = new StrutturaServiziAlbergo[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(StrutturaServiziAlbergo dto, ResultSet rs) throws SQLException
	{
		dto.setSsaId( rs.getLong( COLUMN_SSA_ID ) );
		dto.setSsaPrenRisto( rs.getString( COLUMN_SSA_PREN_RISTO ) );
		dto.setSsaPrenTavolo( rs.getString( COLUMN_SSA_PREN_TAVOLO ) );
		dto.setSsaCostoPrenTav( rs.getFloat( COLUMN_SSA_COSTO_PREN_TAV ) );
		dto.setSsaPrenCibiPart( rs.getString( COLUMN_SSA_PREN_CIBI_PART ) );
		dto.setSsaCostoPrenCibi( rs.getFloat( COLUMN_SSA_COSTO_PREN_CIBI ) );
		dto.setSsaPrenSpa( rs.getString( COLUMN_SSA_PREN_SPA ) );
		dto.setSsaServTuriEst( rs.getString( COLUMN_SSA_SERV_TURI_EST ) );
		dto.setSsaRicLatecheck( rs.getString( COLUMN_SSA_RIC_LATECHECK ) );
		dto.setSsaTvGiochiCam( rs.getString( COLUMN_SSA_TV_GIOCHI_CAM ) );
		dto.setSsaRicAiutoBag( rs.getString( COLUMN_SSA_RIC_AIUTO_BAG ) );
		dto.setSsaPrenServSport( rs.getString( COLUMN_SSA_PREN_SERV_SPORT ) );
		dto.setSsaServSocialiInt( rs.getString( COLUMN_SSA_SERV_SOCIALI_INT ) );
		dto.setStrutturaStrId( rs.getLong( COLUMN_STRUTTURA_STR_ID ) );
		dto.setSsaServiziCamera( rs.getLong( COLUMN_SSA_SERVIZI_CAMERA ) );
		if (rs.wasNull()) {
			dto.setSsaServiziCameraNull( true );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(StrutturaServiziAlbergo dto)
	{
	}

	/** 
	 * Returns all rows from the struttura_servizi_albergo table that match the specified arbitrary SQL statement
	 */
	public StrutturaServiziAlbergo[] findByDynamicSelect(String sql, Object[] sqlParams) throws StrutturaServiziAlbergoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaServiziAlbergoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the struttura_servizi_albergo table that match the specified arbitrary SQL statement
	 */
	public StrutturaServiziAlbergo[] findByDynamicWhere(String sql, Object[] sqlParams) throws StrutturaServiziAlbergoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaServiziAlbergoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
