/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.jdbc;

import com.mysecretwish.dao.*;
import com.mysecretwish.factory.*;
import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class StrutturaTemplateMessaggioDaoImpl extends AbstractDAO implements StrutturaTemplateMessaggioDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT stm_id, stm_rientra_cond_checkin, stm_rietnra_cond_checkout, stm_risp_parc, struttura_str_id, condizioni_con_id FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( stm_id, stm_rientra_cond_checkin, stm_rietnra_cond_checkout, stm_risp_parc, struttura_str_id, condizioni_con_id ) VALUES ( ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET stm_id = ?, stm_rientra_cond_checkin = ?, stm_rietnra_cond_checkout = ?, stm_risp_parc = ?, struttura_str_id = ?, condizioni_con_id = ? WHERE stm_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE stm_id = ?";

	/** 
	 * Index of column stm_id
	 */
	protected static final int COLUMN_STM_ID = 1;

	/** 
	 * Index of column stm_rientra_cond_checkin
	 */
	protected static final int COLUMN_STM_RIENTRA_COND_CHECKIN = 2;

	/** 
	 * Index of column stm_rietnra_cond_checkout
	 */
	protected static final int COLUMN_STM_RIETNRA_COND_CHECKOUT = 3;

	/** 
	 * Index of column stm_risp_parc
	 */
	protected static final int COLUMN_STM_RISP_PARC = 4;

	/** 
	 * Index of column struttura_str_id
	 */
	protected static final int COLUMN_STRUTTURA_STR_ID = 5;

	/** 
	 * Index of column condizioni_con_id
	 */
	protected static final int COLUMN_CONDIZIONI_CON_ID = 6;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 6;

	/** 
	 * Index of primary-key column stm_id
	 */
	protected static final int PK_COLUMN_STM_ID = 1;

	/** 
	 * Inserts a new row in the struttura_template_messaggio table.
	 */
	public StrutturaTemplateMessaggioPk insert(StrutturaTemplateMessaggio dto) throws StrutturaTemplateMessaggioDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_strutture')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setStmId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getStmId() );
			stmt.setString( index++, dto.getStmRientraCondCheckin() );
			stmt.setString( index++, dto.getStmRietnraCondCheckout() );
			stmt.setInt( index++, dto.getStmRispParc() );
			stmt.setLong( index++, dto.getStrutturaStrId() );
			stmt.setLong( index++, dto.getCondizioniConId() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaTemplateMessaggioDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the struttura_template_messaggio table.
	 */
	public void update(StrutturaTemplateMessaggioPk pk, StrutturaTemplateMessaggio dto) throws StrutturaTemplateMessaggioDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getStmId() );
			stmt.setString( index++, dto.getStmRientraCondCheckin() );
			stmt.setString( index++, dto.getStmRietnraCondCheckout() );
			stmt.setInt( index++, dto.getStmRispParc() );
			stmt.setLong( index++, dto.getStrutturaStrId() );
			stmt.setLong( index++, dto.getCondizioniConId() );
			stmt.setLong( 7, pk.getStmId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaTemplateMessaggioDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the struttura_template_messaggio table.
	 */
	public void delete(StrutturaTemplateMessaggioPk pk) throws StrutturaTemplateMessaggioDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getStmId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaTemplateMessaggioDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the struttura_template_messaggio table that matches the specified primary-key value.
	 */
	public StrutturaTemplateMessaggio findByPrimaryKey(StrutturaTemplateMessaggioPk pk) throws StrutturaTemplateMessaggioDaoException
	{
		return findByPrimaryKey( pk.getStmId() );
	}

	/** 
	 * Returns all rows from the struttura_template_messaggio table that match the criteria 'stm_id = :stmId'.
	 */
	public StrutturaTemplateMessaggio findByPrimaryKey(long stmId) throws StrutturaTemplateMessaggioDaoException
	{
		StrutturaTemplateMessaggio ret[] = findByDynamicSelect( SQL_SELECT + " WHERE stm_id = ?", new Object[] {  new Long(stmId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the struttura_template_messaggio table that match the criteria ''.
	 */
	public StrutturaTemplateMessaggio[] findAll() throws StrutturaTemplateMessaggioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY stm_id", null );
	}

	/** 
	 * Returns all rows from the struttura_template_messaggio table that match the criteria 'condizioni_con_id = :condizioniConId'.
	 */
	public StrutturaTemplateMessaggio[] findByCondizioniTemplateMessaggi(long condizioniConId) throws StrutturaTemplateMessaggioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE condizioni_con_id = ?", new Object[] {  new Long(condizioniConId) } );
	}

	/** 
	 * Returns all rows from the struttura_template_messaggio table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaTemplateMessaggio[] findByStruttura(long strutturaStrId) throws StrutturaTemplateMessaggioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_str_id = ?", new Object[] {  new Long(strutturaStrId) } );
	}

	/** 
	 * Returns all rows from the struttura_template_messaggio table that match the criteria 'stm_id = :stmId'.
	 */
	public StrutturaTemplateMessaggio[] findWhereStmIdEquals(int stmId) throws StrutturaTemplateMessaggioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE stm_id = ? ORDER BY stm_id", new Object[] {  new Integer(stmId) } );
	}

	/** 
	 * Returns all rows from the struttura_template_messaggio table that match the criteria 'stm_rientra_cond_checkin = :stmRientraCondCheckin'.
	 */
	public StrutturaTemplateMessaggio[] findWhereStmRientraCondCheckinEquals(String stmRientraCondCheckin) throws StrutturaTemplateMessaggioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE stm_rientra_cond_checkin = ? ORDER BY stm_rientra_cond_checkin", new Object[] { stmRientraCondCheckin } );
	}

	/** 
	 * Returns all rows from the struttura_template_messaggio table that match the criteria 'stm_rietnra_cond_checkout = :stmRietnraCondCheckout'.
	 */
	public StrutturaTemplateMessaggio[] findWhereStmRietnraCondCheckoutEquals(String stmRietnraCondCheckout) throws StrutturaTemplateMessaggioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE stm_rietnra_cond_checkout = ? ORDER BY stm_rietnra_cond_checkout", new Object[] { stmRietnraCondCheckout } );
	}

	/** 
	 * Returns all rows from the struttura_template_messaggio table that match the criteria 'stm_risp_parc = :stmRispParc'.
	 */
	public StrutturaTemplateMessaggio[] findWhereStmRispParcEquals(String stmRispParc) throws StrutturaTemplateMessaggioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE stm_risp_parc = ? ORDER BY stm_risp_parc", new Object[] { stmRispParc } );
	}

	/** 
	 * Returns all rows from the struttura_template_messaggio table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaTemplateMessaggio[] findWhereStrutturaStrIdEquals(long strutturaStrId) throws StrutturaTemplateMessaggioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_str_id = ? ORDER BY struttura_str_id", new Object[] {  new Long(strutturaStrId) } );
	}

	/** 
	 * Returns all rows from the struttura_template_messaggio table that match the criteria 'condizioni_con_id = :condizioniConId'.
	 */
	public StrutturaTemplateMessaggio[] findWhereCondizioniConIdEquals(long condizioniConId) throws StrutturaTemplateMessaggioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE condizioni_con_id = ? ORDER BY condizioni_con_id", new Object[] {  new Long(condizioniConId) } );
	}

	/**
	 * Method 'StrutturaTemplateMessaggioDaoImpl'
	 * 
	 */
	public StrutturaTemplateMessaggioDaoImpl()
	{
	}

	/**
	 * Method 'StrutturaTemplateMessaggioDaoImpl'
	 * 
	 * @param userConn
	 */
	public StrutturaTemplateMessaggioDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "struttura_template_messaggio";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected StrutturaTemplateMessaggio fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			StrutturaTemplateMessaggio dto = new StrutturaTemplateMessaggio();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected StrutturaTemplateMessaggio[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			StrutturaTemplateMessaggio dto = new StrutturaTemplateMessaggio();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		StrutturaTemplateMessaggio ret[] = new StrutturaTemplateMessaggio[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(StrutturaTemplateMessaggio dto, ResultSet rs) throws SQLException
	{
		dto.setStmId( rs.getLong( COLUMN_STM_ID ) );
		dto.setStmRientraCondCheckin( rs.getString( COLUMN_STM_RIENTRA_COND_CHECKIN ) );
		dto.setStmRietnraCondCheckout( rs.getString( COLUMN_STM_RIETNRA_COND_CHECKOUT ) );
		dto.setStmRispParc( rs.getInt( COLUMN_STM_RISP_PARC ) );
		dto.setStrutturaStrId( rs.getLong( COLUMN_STRUTTURA_STR_ID ) );
		dto.setCondizioniConId( rs.getLong( COLUMN_CONDIZIONI_CON_ID ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(StrutturaTemplateMessaggio dto)
	{
	}

	/** 
	 * Returns all rows from the struttura_template_messaggio table that match the specified arbitrary SQL statement
	 */
	public StrutturaTemplateMessaggio[] findByDynamicSelect(String sql, Object[] sqlParams) throws StrutturaTemplateMessaggioDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaTemplateMessaggioDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the struttura_template_messaggio table that match the specified arbitrary SQL statement
	 */
	public StrutturaTemplateMessaggio[] findByDynamicWhere(String sql, Object[] sqlParams) throws StrutturaTemplateMessaggioDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaTemplateMessaggioDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
