/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.jdbc;

import com.mysecretwish.dao.*;
import com.mysecretwish.factory.*;
import java.util.Date;
import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class PreventiviDaoImpl extends AbstractDAO implements PreventiviDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT pre_id, pre_numero, pre_num_adulti, pre_num_bamb, pre_messaggio, utente_ute_id, pre_stato, pre_prezzo_def, pre_commissioni, pre_mess_osp, pre_conf_rif_data, pre_check_in, camere_cam_id, pre_data_richiesta, pre_check_out, fk_promozione FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( pre_id, pre_numero, pre_num_adulti, pre_num_bamb, pre_messaggio, utente_ute_id, pre_stato, pre_prezzo_def, pre_commissioni, pre_mess_osp, pre_conf_rif_data, pre_check_in, camere_cam_id, pre_data_richiesta, pre_check_out, fk_promozione ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET pre_id = ?, pre_numero = ?, pre_num_adulti = ?, pre_num_bamb = ?, pre_messaggio = ?, utente_ute_id = ?, pre_stato = ?, pre_prezzo_def = ?, pre_commissioni = ?, pre_mess_osp = ?, pre_conf_rif_data = ?, pre_check_in = ?, camere_cam_id = ?, pre_data_richiesta = ?, pre_check_out = ?, fk_promozione = ? WHERE pre_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE pre_id = ?";

	/** 
	 * Index of column pre_id
	 */
	protected static final int COLUMN_PRE_ID = 1;

	/** 
	 * Index of column pre_numero
	 */
	protected static final int COLUMN_PRE_NUMERO = 2;

	/** 
	 * Index of column pre_num_adulti
	 */
	protected static final int COLUMN_PRE_NUM_ADULTI = 3;

	/** 
	 * Index of column pre_num_bamb
	 */
	protected static final int COLUMN_PRE_NUM_BAMB = 4;

	/** 
	 * Index of column pre_messaggio
	 */
	protected static final int COLUMN_PRE_MESSAGGIO = 5;

	/** 
	 * Index of column utente_ute_id
	 */
	protected static final int COLUMN_UTENTE_UTE_ID = 6;

	/** 
	 * Index of column pre_stato
	 */
	protected static final int COLUMN_PRE_STATO = 7;

	/** 
	 * Index of column pre_prezzo_def
	 */
	protected static final int COLUMN_PRE_PREZZO_DEF = 8;

	/** 
	 * Index of column pre_commissioni
	 */
	protected static final int COLUMN_PRE_COMMISSIONI = 9;

	/** 
	 * Index of column pre_mess_osp
	 */
	protected static final int COLUMN_PRE_MESS_OSP = 10;

	/** 
	 * Index of column pre_conf_rif_data
	 */
	protected static final int COLUMN_PRE_CONF_RIF_DATA = 11;

	/** 
	 * Index of column pre_check_in
	 */
	protected static final int COLUMN_PRE_CHECK_IN = 12;

	/** 
	 * Index of column camere_cam_id
	 */
	protected static final int COLUMN_CAMERE_CAM_ID = 13;

	/** 
	 * Index of column pre_data_richiesta
	 */
	protected static final int COLUMN_PRE_DATA_RICHIESTA = 14;

	/** 
	 * Index of column pre_check_out
	 */
	protected static final int COLUMN_PRE_CHECK_OUT = 15;

	/** 
	 * Index of column fk_promozione
	 */
	protected static final int COLUMN_FK_PROMOZIONE = 16;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 16;

	/** 
	 * Index of primary-key column pre_id
	 */
	protected static final int PK_COLUMN_PRE_ID = 1;

	/** 
	 * Inserts a new row in the preventivi table.
	 */
	public PreventiviPk insert(Preventivi dto) throws PreventiviDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_preventivi')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setPreId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getPreId() );
			stmt.setString( index++, dto.getPreNumero() );
			stmt.setInt( index++, dto.getPreNumAdulti() );
			stmt.setInt( index++, dto.getPreNumBamb() );
			stmt.setString( index++, dto.getPreMessaggio() );
			stmt.setLong( index++, dto.getUtenteUteId() );
			stmt.setString( index++, dto.getPreStato() );
			if (dto.isPrePrezzoDefNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getPrePrezzoDef() );
			}
		
			if (dto.isPreCommissioniNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getPreCommissioni() );
			}
		
			stmt.setString( index++, dto.getPreMessOsp() );
			stmt.setDate(index++, dto.getPreConfRifData()==null ? null : new java.sql.Date( dto.getPreConfRifData().getTime() ) );
			stmt.setDate(index++, dto.getPreCheckIn()==null ? null : new java.sql.Date( dto.getPreCheckIn().getTime() ) );
			stmt.setLong( index++, dto.getCamereCamId() );
			stmt.setDate(index++, dto.getPreDataRichiesta()==null ? null : new java.sql.Date( dto.getPreDataRichiesta().getTime() ) );
			stmt.setDate(index++, dto.getPreCheckOut()==null ? null : new java.sql.Date( dto.getPreCheckOut().getTime() ) );
			if (dto.isFkPromozioneNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getFkPromozione() );
			}
		
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PreventiviDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the preventivi table.
	 */
	public void update(PreventiviPk pk, Preventivi dto) throws PreventiviDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getPreId() );
			stmt.setString( index++, dto.getPreNumero() );
			stmt.setInt( index++, dto.getPreNumAdulti() );
			stmt.setInt( index++, dto.getPreNumBamb() );
			stmt.setString( index++, dto.getPreMessaggio() );
			stmt.setLong( index++, dto.getUtenteUteId() );
			stmt.setString( index++, dto.getPreStato() );
			if (dto.isPrePrezzoDefNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getPrePrezzoDef() );
			}
		
			if (dto.isPreCommissioniNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getPreCommissioni() );
			}
		
			stmt.setString( index++, dto.getPreMessOsp() );
			stmt.setDate(index++, dto.getPreConfRifData()==null ? null : new java.sql.Date( dto.getPreConfRifData().getTime() ) );
			stmt.setDate(index++, dto.getPreCheckIn()==null ? null : new java.sql.Date( dto.getPreCheckIn().getTime() ) );
			stmt.setLong( index++, dto.getCamereCamId() );
			stmt.setDate(index++, dto.getPreDataRichiesta()==null ? null : new java.sql.Date( dto.getPreDataRichiesta().getTime() ) );
			stmt.setDate(index++, dto.getPreCheckOut()==null ? null : new java.sql.Date( dto.getPreCheckOut().getTime() ) );
			if (dto.isFkPromozioneNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getFkPromozione() );
			}
		
			stmt.setLong( 17, pk.getPreId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PreventiviDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the preventivi table.
	 */
	public void delete(PreventiviPk pk) throws PreventiviDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getPreId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PreventiviDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the preventivi table that matches the specified primary-key value.
	 */
	public Preventivi findByPrimaryKey(PreventiviPk pk) throws PreventiviDaoException
	{
		return findByPrimaryKey( pk.getPreId() );
	}

	/** 
	 * Returns all rows from the preventivi table that match the criteria 'pre_id = :preId'.
	 */
	public Preventivi findByPrimaryKey(long preId) throws PreventiviDaoException
	{
		Preventivi ret[] = findByDynamicSelect( SQL_SELECT + " WHERE pre_id = ?", new Object[] {  new Long(preId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the preventivi table that match the criteria 'struttura_camere_cam_id = :strutturaCamereCamId'.
	 */
	public Preventivi[] findByStrutturaCamere(int strutturaCamereCamId) throws PreventiviDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_camere_cam_id = ?", new Object[] {  new Integer(strutturaCamereCamId) } );
	}

	/** 
	 * Returns all rows from the preventivi table that match the criteria 'pre_ric_data = :preRicData'.
	 */
	public Preventivi[] findWherePreRicDataEquals(Date preRicData) throws PreventiviDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pre_ric_data = ? ORDER BY pre_ric_data", new Object[] { preRicData==null ? null : new java.sql.Date( preRicData.getTime() ) } );
	}

	/** 
	 * Returns all rows from the preventivi table that match the criteria 'pre_ric_ora = :preRicOra'.
	 */
	public Preventivi[] findWherePreRicOraEquals(String preRicOra) throws PreventiviDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pre_ric_ora = ? ORDER BY pre_ric_ora", new Object[] { preRicOra } );
	}

	/** 
	 * Returns all rows from the preventivi table that match the criteria 'struttura_camere_cam_id = :strutturaCamereCamId'.
	 */
	public Preventivi[] findWhereStrutturaCamereCamIdEquals(int strutturaCamereCamId) throws PreventiviDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_camere_cam_id = ? ORDER BY struttura_camere_cam_id", new Object[] {  new Integer(strutturaCamereCamId) } );
	}

	/** 
	 * Returns all rows from the preventivi table that match the criteria 'pre_risp_data = :preRispData'.
	 */
	public Preventivi[] findWherePreRispDataEquals(Date preRispData) throws PreventiviDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pre_risp_data = ? ORDER BY pre_risp_data", new Object[] { preRispData==null ? null : new java.sql.Date( preRispData.getTime() ) } );
	}

	/** 
	 * Returns all rows from the preventivi table that match the criteria 'pre_risp_ora = :preRispOra'.
	 */
	public Preventivi[] findWherePreRispOraEquals(String preRispOra) throws PreventiviDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pre_risp_ora = ? ORDER BY pre_risp_ora", new Object[] { preRispOra } );
	}

	/** 
	 * Returns all rows from the preventivi table that match the criteria 'pre_conf_rif_ora = :preConfRifOra'.
	 */
	public Preventivi[] findWherePreConfRifOraEquals(String preConfRifOra) throws PreventiviDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pre_conf_rif_ora = ? ORDER BY pre_conf_rif_ora", new Object[] { preConfRifOra } );
	}

	/** 
	 * Returns all rows from the preventivi table that match the criteria ''.
	 */
	public Preventivi[] findAll() throws PreventiviDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY pre_id", null );
	}

	/** 
	 * Returns all rows from the preventivi table that match the criteria 'camere_cam_id = :camereCamId'.
	 */
	public Preventivi[] findByCamere(long camereCamId) throws PreventiviDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE camere_cam_id = ?", new Object[] {  new Long(camereCamId) } );
	}

	/** 
	 * Returns all rows from the preventivi table that match the criteria 'utente_ute_id = :utenteUteId'.
	 */
	public Preventivi[] findByUtente(long utenteUteId) throws PreventiviDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE utente_ute_id = ?", new Object[] {  new Long(utenteUteId) } );
	}

	/** 
	 * Returns all rows from the preventivi table that match the criteria 'pre_id = :preId'.
	 */
	public Preventivi[] findWherePreIdEquals(long preId) throws PreventiviDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pre_id = ? ORDER BY pre_id", new Object[] {  new Long(preId) } );
	}

	/** 
	 * Returns all rows from the preventivi table that match the criteria 'pre_numero = :preNumero'.
	 */
	public Preventivi[] findWherePreNumeroEquals(String preNumero) throws PreventiviDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pre_numero = ? ORDER BY pre_numero", new Object[] { preNumero } );
	}

	/** 
	 * Returns all rows from the preventivi table that match the criteria 'pre_check_in = :preCheckIn'.
	 */
	public Preventivi[] findWherePreCheckInEquals(Date preCheckIn) throws PreventiviDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pre_check_in = ? ORDER BY pre_check_in", new Object[] { preCheckIn==null ? null : new java.sql.Date( preCheckIn.getTime() ) } );
	}

	/** 
	 * Returns all rows from the preventivi table that match the criteria 'pre_num_adulti = :preNumAdulti'.
	 */
	public Preventivi[] findWherePreNumAdultiEquals(int preNumAdulti) throws PreventiviDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pre_num_adulti = ? ORDER BY pre_num_adulti", new Object[] {  new Integer(preNumAdulti) } );
	}

	/** 
	 * Returns all rows from the preventivi table that match the criteria 'pre_num_bamb = :preNumBamb'.
	 */
	public Preventivi[] findWherePreNumBambEquals(int preNumBamb) throws PreventiviDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pre_num_bamb = ? ORDER BY pre_num_bamb", new Object[] {  new Integer(preNumBamb) } );
	}

	/** 
	 * Returns all rows from the preventivi table that match the criteria 'pre_messaggio = :preMessaggio'.
	 */
	public Preventivi[] findWherePreMessaggioEquals(String preMessaggio) throws PreventiviDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pre_messaggio = ? ORDER BY pre_messaggio", new Object[] { preMessaggio } );
	}

	/** 
	 * Returns all rows from the preventivi table that match the criteria 'utente_ute_id = :utenteUteId'.
	 */
	public Preventivi[] findWhereUtenteUteIdEquals(long utenteUteId) throws PreventiviDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE utente_ute_id = ? ORDER BY utente_ute_id", new Object[] {  new Long(utenteUteId) } );
	}

	/** 
	 * Returns all rows from the preventivi table that match the criteria 'camere_cam_id = :camereCamId'.
	 */
	public Preventivi[] findWhereCamereCamIdEquals(long camereCamId) throws PreventiviDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE camere_cam_id = ? ORDER BY camere_cam_id", new Object[] {  new Long(camereCamId) } );
	}

	/** 
	 * Returns all rows from the preventivi table that match the criteria 'pre_stato = :preStato'.
	 */
	public Preventivi[] findWherePreStatoEquals(String preStato) throws PreventiviDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pre_stato = ? ORDER BY pre_stato", new Object[] { preStato } );
	}

	/** 
	 * Returns all rows from the preventivi table that match the criteria 'pre_data_richiesta = :preDataRichiesta'.
	 */
	public Preventivi[] findWherePreDataRichiestaEquals(Date preDataRichiesta) throws PreventiviDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pre_data_richiesta = ? ORDER BY pre_data_richiesta", new Object[] { preDataRichiesta==null ? null : new java.sql.Date( preDataRichiesta.getTime() ) } );
	}

	/** 
	 * Returns all rows from the preventivi table that match the criteria 'pre_prezzo_def = :prePrezzoDef'.
	 */
	public Preventivi[] findWherePrePrezzoDefEquals(float prePrezzoDef) throws PreventiviDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pre_prezzo_def = ? ORDER BY pre_prezzo_def", new Object[] {  new Float(prePrezzoDef) } );
	}

	/** 
	 * Returns all rows from the preventivi table that match the criteria 'pre_commissioni = :preCommissioni'.
	 */
	public Preventivi[] findWherePreCommissioniEquals(float preCommissioni) throws PreventiviDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pre_commissioni = ? ORDER BY pre_commissioni", new Object[] {  new Float(preCommissioni) } );
	}

	/** 
	 * Returns all rows from the preventivi table that match the criteria 'pre_mess_osp = :preMessOsp'.
	 */
	public Preventivi[] findWherePreMessOspEquals(String preMessOsp) throws PreventiviDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pre_mess_osp = ? ORDER BY pre_mess_osp", new Object[] { preMessOsp } );
	}

	/** 
	 * Returns all rows from the preventivi table that match the criteria 'pre_conf_rif_data = :preConfRifData'.
	 */
	public Preventivi[] findWherePreConfRifDataEquals(Date preConfRifData) throws PreventiviDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pre_conf_rif_data = ? ORDER BY pre_conf_rif_data", new Object[] { preConfRifData==null ? null : new java.sql.Date( preConfRifData.getTime() ) } );
	}

	/** 
	 * Returns all rows from the preventivi table that match the criteria 'pre_check_out = :preCheckOut'.
	 */
	public Preventivi[] findWherePreCheckOutEquals(Date preCheckOut) throws PreventiviDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pre_check_out = ? ORDER BY pre_check_out", new Object[] { preCheckOut==null ? null : new java.sql.Date( preCheckOut.getTime() ) } );
	}

	/** 
	 * Returns all rows from the preventivi table that match the criteria 'fk_promozione = :fkPromozione'.
	 */
	public Preventivi[] findWhereFkPromozioneEquals(long fkPromozione) throws PreventiviDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fk_promozione = ? ORDER BY fk_promozione", new Object[] {  new Long(fkPromozione) } );
	}

	/**
	 * Method 'PreventiviDaoImpl'
	 * 
	 */
	public PreventiviDaoImpl()
	{
	}

	/**
	 * Method 'PreventiviDaoImpl'
	 * 
	 * @param userConn
	 */
	public PreventiviDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "preventivi";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Preventivi fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Preventivi dto = new Preventivi();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Preventivi[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Preventivi dto = new Preventivi();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Preventivi ret[] = new Preventivi[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Preventivi dto, ResultSet rs) throws SQLException
	{
		dto.setPreId( rs.getLong( COLUMN_PRE_ID ) );
		dto.setPreNumero( rs.getString( COLUMN_PRE_NUMERO ) );
		dto.setPreNumAdulti( rs.getInt( COLUMN_PRE_NUM_ADULTI ) );
		dto.setPreNumBamb( rs.getInt( COLUMN_PRE_NUM_BAMB ) );
		dto.setPreMessaggio( rs.getString( COLUMN_PRE_MESSAGGIO ) );
		dto.setUtenteUteId( rs.getLong( COLUMN_UTENTE_UTE_ID ) );
		dto.setPreStato( rs.getString( COLUMN_PRE_STATO ) );
		dto.setPrePrezzoDef( rs.getFloat( COLUMN_PRE_PREZZO_DEF ) );
		if (rs.wasNull()) {
			dto.setPrePrezzoDefNull( true );
		}
		
		dto.setPreCommissioni( rs.getFloat( COLUMN_PRE_COMMISSIONI ) );
		if (rs.wasNull()) {
			dto.setPreCommissioniNull( true );
		}
		
		dto.setPreMessOsp( rs.getString( COLUMN_PRE_MESS_OSP ) );
		dto.setPreConfRifData( rs.getDate(COLUMN_PRE_CONF_RIF_DATA ) );
		dto.setPreCheckIn( rs.getDate(COLUMN_PRE_CHECK_IN ) );
		dto.setCamereCamId( rs.getLong( COLUMN_CAMERE_CAM_ID ) );
		dto.setPreDataRichiesta( rs.getDate(COLUMN_PRE_DATA_RICHIESTA ) );
		dto.setPreCheckOut( rs.getDate(COLUMN_PRE_CHECK_OUT ) );
		dto.setFkPromozione( rs.getLong( COLUMN_FK_PROMOZIONE ) );
		if (rs.wasNull()) {
			dto.setFkPromozioneNull( true );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Preventivi dto)
	{
	}

	/** 
	 * Returns all rows from the preventivi table that match the specified arbitrary SQL statement
	 */
	public Preventivi[] findByDynamicSelect(String sql, Object[] sqlParams) throws PreventiviDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PreventiviDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the preventivi table that match the specified arbitrary SQL statement
	 */
	public Preventivi[] findByDynamicWhere(String sql, Object[] sqlParams) throws PreventiviDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PreventiviDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
