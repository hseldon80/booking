/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.jdbc;

import com.mysecretwish.dao.*;
import com.mysecretwish.factory.*;
import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class UtenteMessaggiDaoImpl extends AbstractDAO implements UtenteMessaggiDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ums_id, ums_titolo, ums_messaggio, ums_destinatario, ums_mittente, argomenti_arg_id, tipo_mittente, ums_contrassegna FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ums_id, ums_titolo, ums_messaggio, ums_destinatario, ums_mittente, argomenti_arg_id, tipo_mittente, ums_contrassegna ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ums_id = ?, ums_titolo = ?, ums_messaggio = ?, ums_destinatario = ?, ums_mittente = ?, argomenti_arg_id = ?, tipo_mittente = ?, ums_contrassegna = ? WHERE ums_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ums_id = ?";

	/** 
	 * Index of column ums_id
	 */
	protected static final int COLUMN_UMS_ID = 1;

	/** 
	 * Index of column ums_titolo
	 */
	protected static final int COLUMN_UMS_TITOLO = 2;

	/** 
	 * Index of column ums_messaggio
	 */
	protected static final int COLUMN_UMS_MESSAGGIO = 3;

	/** 
	 * Index of column ums_destinatario
	 */
	protected static final int COLUMN_UMS_DESTINATARIO = 4;

	/** 
	 * Index of column ums_mittente
	 */
	protected static final int COLUMN_UMS_MITTENTE = 5;

	/** 
	 * Index of column argomenti_arg_id
	 */
	protected static final int COLUMN_ARGOMENTI_ARG_ID = 6;

	/** 
	 * Index of column tipo_mittente
	 */
	protected static final int COLUMN_TIPO_MITTENTE = 7;

	/** 
	 * Index of column ums_contrassegna
	 */
	protected static final int COLUMN_UMS_CONTRASSEGNA = 8;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 8;

	/** 
	 * Index of primary-key column ums_id
	 */
	protected static final int PK_COLUMN_UMS_ID = 1;

	/** 
	 * Inserts a new row in the utente_messaggi table.
	 */
	public UtenteMessaggiPk insert(UtenteMessaggi dto) throws UtenteMessaggiDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_messaggi')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setUmsId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getUmsId() );
			stmt.setString( index++, dto.getUmsTitolo() );
			stmt.setString( index++, dto.getUmsMessaggio() );
			stmt.setLong( index++, dto.getUmsDestinatario() );
			stmt.setLong( index++, dto.getUmsMittente() );
			stmt.setLong( index++, dto.getArgomentiArgId() );
			stmt.setString( index++, dto.getTipoMittente() );
			stmt.setString( index++, dto.getUmsContrassegna() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UtenteMessaggiDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the utente_messaggi table.
	 */
	public void update(UtenteMessaggiPk pk, UtenteMessaggi dto) throws UtenteMessaggiDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getUmsId() );
			stmt.setString( index++, dto.getUmsTitolo() );
			stmt.setString( index++, dto.getUmsMessaggio() );
			stmt.setLong( index++, dto.getUmsDestinatario() );
			stmt.setLong( index++, dto.getUmsMittente() );
			stmt.setLong( index++, dto.getArgomentiArgId() );
			stmt.setString( index++, dto.getTipoMittente() );
			stmt.setString( index++, dto.getUmsContrassegna() );
			stmt.setLong( 9, pk.getUmsId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UtenteMessaggiDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the utente_messaggi table.
	 */
	public void delete(UtenteMessaggiPk pk) throws UtenteMessaggiDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getUmsId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UtenteMessaggiDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the utente_messaggi table that matches the specified primary-key value.
	 */
	public UtenteMessaggi findByPrimaryKey(UtenteMessaggiPk pk) throws UtenteMessaggiDaoException
	{
		return findByPrimaryKey( pk.getUmsId() );
	}

	/** 
	 * Returns all rows from the utente_messaggi table that match the criteria 'ums_id = :umsId'.
	 */
	public UtenteMessaggi findByPrimaryKey(long umsId) throws UtenteMessaggiDaoException
	{
		UtenteMessaggi ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ums_id = ?", new Object[] {  new Long(umsId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the utente_messaggi table that match the criteria ''.
	 */
	public UtenteMessaggi[] findAll() throws UtenteMessaggiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ums_id", null );
	}

	/** 
	 * Returns all rows from the utente_messaggi table that match the criteria 'argomenti_arg_id = :argomentiArgId'.
	 */
	public UtenteMessaggi[] findByArgomenti(long argomentiArgId) throws UtenteMessaggiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE argomenti_arg_id = ?", new Object[] {  new Long(argomentiArgId) } );
	}

	/** 
	 * Returns all rows from the utente_messaggi table that match the criteria 'ums_id = :umsId'.
	 */
	public UtenteMessaggi[] findWhereUmsIdEquals(long umsId) throws UtenteMessaggiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ums_id = ? ORDER BY ums_id", new Object[] {  new Long(umsId) } );
	}

	/** 
	 * Returns all rows from the utente_messaggi table that match the criteria 'ums_titolo = :umsTitolo'.
	 */
	public UtenteMessaggi[] findWhereUmsTitoloEquals(String umsTitolo) throws UtenteMessaggiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ums_titolo = ? ORDER BY ums_titolo", new Object[] { umsTitolo } );
	}

	/** 
	 * Returns all rows from the utente_messaggi table that match the criteria 'ums_messaggio = :umsMessaggio'.
	 */
	public UtenteMessaggi[] findWhereUmsMessaggioEquals(String umsMessaggio) throws UtenteMessaggiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ums_messaggio = ? ORDER BY ums_messaggio", new Object[] { umsMessaggio } );
	}

	/** 
	 * Returns all rows from the utente_messaggi table that match the criteria 'ums_destinatario = :umsDestinatario'.
	 */
	public UtenteMessaggi[] findWhereUmsDestinatarioEquals(long umsDestinatario) throws UtenteMessaggiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ums_destinatario = ? ORDER BY ums_destinatario", new Object[] {  new Long(umsDestinatario) } );
	}

	/** 
	 * Returns all rows from the utente_messaggi table that match the criteria 'ums_mittente = :umsMittente'.
	 */
	public UtenteMessaggi[] findWhereUmsMittenteEquals(long umsMittente) throws UtenteMessaggiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ums_mittente = ? ORDER BY ums_mittente", new Object[] {  new Long(umsMittente) } );
	}

	/** 
	 * Returns all rows from the utente_messaggi table that match the criteria 'argomenti_arg_id = :argomentiArgId'.
	 */
	public UtenteMessaggi[] findWhereArgomentiArgIdEquals(long argomentiArgId) throws UtenteMessaggiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE argomenti_arg_id = ? ORDER BY argomenti_arg_id", new Object[] {  new Long(argomentiArgId) } );
	}

	/** 
	 * Returns all rows from the utente_messaggi table that match the criteria 'tipo_mittente = :tipoMittente'.
	 */
	public UtenteMessaggi[] findWhereTipoMittenteEquals(String tipoMittente) throws UtenteMessaggiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE tipo_mittente = ? ORDER BY tipo_mittente", new Object[] { tipoMittente } );
	}

	/** 
	 * Returns all rows from the utente_messaggi table that match the criteria 'ums_contrassegna = :umsContrassegna'.
	 */
	public UtenteMessaggi[] findWhereUmsContrassegnaEquals(String umsContrassegna) throws UtenteMessaggiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ums_contrassegna = ? ORDER BY ums_contrassegna", new Object[] { umsContrassegna } );
	}

	/**
	 * Method 'UtenteMessaggiDaoImpl'
	 * 
	 */
	public UtenteMessaggiDaoImpl()
	{
	}

	/**
	 * Method 'UtenteMessaggiDaoImpl'
	 * 
	 * @param userConn
	 */
	public UtenteMessaggiDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "utente_messaggi";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected UtenteMessaggi fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			UtenteMessaggi dto = new UtenteMessaggi();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected UtenteMessaggi[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			UtenteMessaggi dto = new UtenteMessaggi();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		UtenteMessaggi ret[] = new UtenteMessaggi[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(UtenteMessaggi dto, ResultSet rs) throws SQLException
	{
		dto.setUmsId( rs.getLong( COLUMN_UMS_ID ) );
		dto.setUmsTitolo( rs.getString( COLUMN_UMS_TITOLO ) );
		dto.setUmsMessaggio( rs.getString( COLUMN_UMS_MESSAGGIO ) );
		dto.setUmsDestinatario( rs.getLong( COLUMN_UMS_DESTINATARIO ) );
		dto.setUmsMittente( rs.getLong( COLUMN_UMS_MITTENTE ) );
		dto.setArgomentiArgId( rs.getLong( COLUMN_ARGOMENTI_ARG_ID ) );
		dto.setTipoMittente( rs.getString( COLUMN_TIPO_MITTENTE ) );
		dto.setUmsContrassegna( rs.getString( COLUMN_UMS_CONTRASSEGNA ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(UtenteMessaggi dto)
	{
	}

	/** 
	 * Returns all rows from the utente_messaggi table that match the specified arbitrary SQL statement
	 */
	public UtenteMessaggi[] findByDynamicSelect(String sql, Object[] sqlParams) throws UtenteMessaggiDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UtenteMessaggiDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the utente_messaggi table that match the specified arbitrary SQL statement
	 */
	public UtenteMessaggi[] findByDynamicWhere(String sql, Object[] sqlParams) throws UtenteMessaggiDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UtenteMessaggiDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
