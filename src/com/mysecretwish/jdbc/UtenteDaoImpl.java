/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.jdbc;

import com.mysecretwish.dao.*;
import com.mysecretwish.factory.*;
import java.util.Date;
import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class UtenteDaoImpl extends AbstractDAO implements UtenteDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ute_id, ute_cognome, ute_nome, ute_email, ute_password, ute_last_login, ute_cellulare, ute_sesso, ute_data_nascita, ute_titolo, fk_paesi, ute_carta_numero, ute_carta_titolare, ute_carta_scad_mese, ute_carta_scad_anno, ute_carta_usa_per_lav, ute_carta_usa_per_premio, ute_tipologia, ute_indirizzo, fk_comune, ute_azienda, fk_comune_azienda, ute_telefono_azienda, ute_piva_azienda, ute_foto_profilo_path, ute_pagamenti_online, ute_quando_pagare, ute_fumatore, utente_stelle, ute_camere_ospiti_disabili, ute_ristorante, ute_connessione_internet, ute_camera_nonfumatori, ute_palestra, ute_camere_familiari, ute_animali, ute_parcheggio, ute_spa_benessere, ute_wifi, ute_piscina_coperta, ute_navetta_aeroportuale, ute_connessione_wifi_gratuita, ute_bar, ute_deposito_bagagli, ute_reception_24ore, ute_per_chi_prenoti, fk_preferenza_valuta, ute_carta_tipo, ute_cap, ute_cap_azienda FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ute_id, ute_cognome, ute_nome, ute_email, ute_password, ute_last_login, ute_cellulare, ute_sesso, ute_data_nascita, ute_titolo, fk_paesi, ute_carta_numero, ute_carta_titolare, ute_carta_scad_mese, ute_carta_scad_anno, ute_carta_usa_per_lav, ute_carta_usa_per_premio, ute_tipologia, ute_indirizzo, fk_comune, ute_azienda, fk_comune_azienda, ute_telefono_azienda, ute_piva_azienda, ute_foto_profilo_path, ute_pagamenti_online, ute_quando_pagare, ute_fumatore, utente_stelle, ute_camere_ospiti_disabili, ute_ristorante, ute_connessione_internet, ute_camera_nonfumatori, ute_palestra, ute_camere_familiari, ute_animali, ute_parcheggio, ute_spa_benessere, ute_wifi, ute_piscina_coperta, ute_navetta_aeroportuale, ute_connessione_wifi_gratuita, ute_bar, ute_deposito_bagagli, ute_reception_24ore, ute_per_chi_prenoti, fk_preferenza_valuta, ute_carta_tipo, ute_cap, ute_cap_azienda ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ute_id = ?, ute_cognome = ?, ute_nome = ?, ute_email = ?, ute_password = ?, ute_last_login = ?, ute_cellulare = ?, ute_sesso = ?, ute_data_nascita = ?, ute_titolo = ?, fk_paesi = ?, ute_carta_numero = ?, ute_carta_titolare = ?, ute_carta_scad_mese = ?, ute_carta_scad_anno = ?, ute_carta_usa_per_lav = ?, ute_carta_usa_per_premio = ?, ute_tipologia = ?, ute_indirizzo = ?, fk_comune = ?, ute_azienda = ?, fk_comune_azienda = ?, ute_telefono_azienda = ?, ute_piva_azienda = ?, ute_foto_profilo_path = ?, ute_pagamenti_online = ?, ute_quando_pagare = ?, ute_fumatore = ?, utente_stelle = ?, ute_camere_ospiti_disabili = ?, ute_ristorante = ?, ute_connessione_internet = ?, ute_camera_nonfumatori = ?, ute_palestra = ?, ute_camere_familiari = ?, ute_animali = ?, ute_parcheggio = ?, ute_spa_benessere = ?, ute_wifi = ?, ute_piscina_coperta = ?, ute_navetta_aeroportuale = ?, ute_connessione_wifi_gratuita = ?, ute_bar = ?, ute_deposito_bagagli = ?, ute_reception_24ore = ?, ute_per_chi_prenoti = ?, fk_preferenza_valuta = ?, ute_carta_tipo = ?, ute_cap = ?, ute_cap_azienda = ? WHERE ute_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ute_id = ?";

	/** 
	 * Index of column ute_id
	 */
	protected static final int COLUMN_UTE_ID = 1;

	/** 
	 * Index of column ute_cognome
	 */
	protected static final int COLUMN_UTE_COGNOME = 2;

	/** 
	 * Index of column ute_nome
	 */
	protected static final int COLUMN_UTE_NOME = 3;

	/** 
	 * Index of column ute_email
	 */
	protected static final int COLUMN_UTE_EMAIL = 4;

	/** 
	 * Index of column ute_password
	 */
	protected static final int COLUMN_UTE_PASSWORD = 5;

	/** 
	 * Index of column ute_last_login
	 */
	protected static final int COLUMN_UTE_LAST_LOGIN = 6;

	/** 
	 * Index of column ute_cellulare
	 */
	protected static final int COLUMN_UTE_CELLULARE = 7;

	/** 
	 * Index of column ute_sesso
	 */
	protected static final int COLUMN_UTE_SESSO = 8;

	/** 
	 * Index of column ute_data_nascita
	 */
	protected static final int COLUMN_UTE_DATA_NASCITA = 9;

	/** 
	 * Index of column ute_titolo
	 */
	protected static final int COLUMN_UTE_TITOLO = 10;

	/** 
	 * Index of column fk_paesi
	 */
	protected static final int COLUMN_FK_PAESI = 11;

	/** 
	 * Index of column ute_carta_numero
	 */
	protected static final int COLUMN_UTE_CARTA_NUMERO = 12;

	/** 
	 * Index of column ute_carta_titolare
	 */
	protected static final int COLUMN_UTE_CARTA_TITOLARE = 13;

	/** 
	 * Index of column ute_carta_scad_mese
	 */
	protected static final int COLUMN_UTE_CARTA_SCAD_MESE = 14;

	/** 
	 * Index of column ute_carta_scad_anno
	 */
	protected static final int COLUMN_UTE_CARTA_SCAD_ANNO = 15;

	/** 
	 * Index of column ute_carta_usa_per_lav
	 */
	protected static final int COLUMN_UTE_CARTA_USA_PER_LAV = 16;

	/** 
	 * Index of column ute_carta_usa_per_premio
	 */
	protected static final int COLUMN_UTE_CARTA_USA_PER_PREMIO = 17;

	/** 
	 * Index of column ute_tipologia
	 */
	protected static final int COLUMN_UTE_TIPOLOGIA = 18;

	/** 
	 * Index of column ute_indirizzo
	 */
	protected static final int COLUMN_UTE_INDIRIZZO = 19;

	/** 
	 * Index of column fk_comune
	 */
	protected static final int COLUMN_FK_COMUNE = 20;

	/** 
	 * Index of column ute_azienda
	 */
	protected static final int COLUMN_UTE_AZIENDA = 21;

	/** 
	 * Index of column fk_comune_azienda
	 */
	protected static final int COLUMN_FK_COMUNE_AZIENDA = 22;

	/** 
	 * Index of column ute_telefono_azienda
	 */
	protected static final int COLUMN_UTE_TELEFONO_AZIENDA = 23;

	/** 
	 * Index of column ute_piva_azienda
	 */
	protected static final int COLUMN_UTE_PIVA_AZIENDA = 24;

	/** 
	 * Index of column ute_foto_profilo_path
	 */
	protected static final int COLUMN_UTE_FOTO_PROFILO_PATH = 25;

	/** 
	 * Index of column ute_pagamenti_online
	 */
	protected static final int COLUMN_UTE_PAGAMENTI_ONLINE = 26;

	/** 
	 * Index of column ute_quando_pagare
	 */
	protected static final int COLUMN_UTE_QUANDO_PAGARE = 27;

	/** 
	 * Index of column ute_fumatore
	 */
	protected static final int COLUMN_UTE_FUMATORE = 28;

	/** 
	 * Index of column utente_stelle
	 */
	protected static final int COLUMN_UTENTE_STELLE = 29;

	/** 
	 * Index of column ute_camere_ospiti_disabili
	 */
	protected static final int COLUMN_UTE_CAMERE_OSPITI_DISABILI = 30;

	/** 
	 * Index of column ute_ristorante
	 */
	protected static final int COLUMN_UTE_RISTORANTE = 31;

	/** 
	 * Index of column ute_connessione_internet
	 */
	protected static final int COLUMN_UTE_CONNESSIONE_INTERNET = 32;

	/** 
	 * Index of column ute_camera_nonfumatori
	 */
	protected static final int COLUMN_UTE_CAMERA_NONFUMATORI = 33;

	/** 
	 * Index of column ute_palestra
	 */
	protected static final int COLUMN_UTE_PALESTRA = 34;

	/** 
	 * Index of column ute_camere_familiari
	 */
	protected static final int COLUMN_UTE_CAMERE_FAMILIARI = 35;

	/** 
	 * Index of column ute_animali
	 */
	protected static final int COLUMN_UTE_ANIMALI = 36;

	/** 
	 * Index of column ute_parcheggio
	 */
	protected static final int COLUMN_UTE_PARCHEGGIO = 37;

	/** 
	 * Index of column ute_spa_benessere
	 */
	protected static final int COLUMN_UTE_SPA_BENESSERE = 38;

	/** 
	 * Index of column ute_wifi
	 */
	protected static final int COLUMN_UTE_WIFI = 39;

	/** 
	 * Index of column ute_piscina_coperta
	 */
	protected static final int COLUMN_UTE_PISCINA_COPERTA = 40;

	/** 
	 * Index of column ute_navetta_aeroportuale
	 */
	protected static final int COLUMN_UTE_NAVETTA_AEROPORTUALE = 41;

	/** 
	 * Index of column ute_connessione_wifi_gratuita
	 */
	protected static final int COLUMN_UTE_CONNESSIONE_WIFI_GRATUITA = 42;

	/** 
	 * Index of column ute_bar
	 */
	protected static final int COLUMN_UTE_BAR = 43;

	/** 
	 * Index of column ute_deposito_bagagli
	 */
	protected static final int COLUMN_UTE_DEPOSITO_BAGAGLI = 44;

	/** 
	 * Index of column ute_reception_24ore
	 */
	protected static final int COLUMN_UTE_RECEPTION24ORE = 45;

	/** 
	 * Index of column ute_per_chi_prenoti
	 */
	protected static final int COLUMN_UTE_PER_CHI_PRENOTI = 46;

	/** 
	 * Index of column fk_preferenza_valuta
	 */
	protected static final int COLUMN_FK_PREFERENZA_VALUTA = 47;

	/** 
	 * Index of column ute_carta_tipo
	 */
	protected static final int COLUMN_UTE_CARTA_TIPO = 48;

	/** 
	 * Index of column ute_cap
	 */
	protected static final int COLUMN_UTE_CAP = 49;

	/** 
	 * Index of column ute_cap_azienda
	 */
	protected static final int COLUMN_UTE_CAP_AZIENDA = 50;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 50;

	/** 
	 * Index of primary-key column ute_id
	 */
	protected static final int PK_COLUMN_UTE_ID = 1;

	/** 
	 * Inserts a new row in the utente table.
	 */
	public UtentePk insert(Utente dto) throws UtenteDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_utenti')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setUteId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getUteId() );
			stmt.setString( index++, dto.getUteCognome() );
			stmt.setString( index++, dto.getUteNome() );
			stmt.setString( index++, dto.getUteEmail() );
			stmt.setString( index++, dto.getUtePassword() );
			stmt.setDate(index++, dto.getUteLastLogin()==null ? null : new java.sql.Date( dto.getUteLastLogin().getTime() ) );
			stmt.setString( index++, dto.getUteCellulare() );
			stmt.setString( index++, dto.getUteSesso() );
			stmt.setDate(index++, dto.getUteDataNascita()==null ? null : new java.sql.Date( dto.getUteDataNascita().getTime() ) );
			stmt.setLong( index++, dto.getUteTitolo() );
			stmt.setLong( index++, dto.getFkPaesi() );
			stmt.setString( index++, dto.getUteCartaNumero() );
			stmt.setString( index++, dto.getUteCartaTitolare() );
			stmt.setString( index++, dto.getUteCartaScadMese() );
			stmt.setString( index++, dto.getUteCartaScadAnno() );
			stmt.setString( index++, dto.getUteCartaUsaPerLav() );
			stmt.setString( index++, dto.getUteCartaUsaPerPremio() );
			if (dto.isUteTipologiaNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getUteTipologia() );
			}
		
			stmt.setString( index++, dto.getUteIndirizzo() );
			if (dto.isFkComuneNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getFkComune() );
			}
		
			stmt.setString( index++, dto.getUteAzienda() );
			if (dto.isFkComuneAziendaNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getFkComuneAzienda() );
			}
		
			stmt.setString( index++, dto.getUteTelefonoAzienda() );
			stmt.setString( index++, dto.getUtePivaAzienda() );
			stmt.setString( index++, dto.getUteFotoProfiloPath() );
			stmt.setString( index++, dto.getUtePagamentiOnline() );
			stmt.setString( index++, dto.getUteQuandoPagare() );
			stmt.setString( index++, dto.getUteFumatore() );
			stmt.setString( index++, dto.getUtenteStelle() );
			stmt.setString( index++, dto.getUteCamereOspitiDisabili() );
			stmt.setString( index++, dto.getUteRistorante() );
			stmt.setString( index++, dto.getUteConnessioneInternet() );
			stmt.setString( index++, dto.getUteCameraNonfumatori() );
			stmt.setString( index++, dto.getUtePalestra() );
			stmt.setString( index++, dto.getUteCamereFamiliari() );
			stmt.setString( index++, dto.getUteAnimali() );
			stmt.setString( index++, dto.getUteParcheggio() );
			stmt.setString( index++, dto.getUteSpaBenessere() );
			stmt.setString( index++, dto.getUteWifi() );
			stmt.setString( index++, dto.getUtePiscinaCoperta() );
			stmt.setString( index++, dto.getUteNavettaAeroportuale() );
			stmt.setString( index++, dto.getUteConnessioneWifiGratuita() );
			stmt.setString( index++, dto.getUteBar() );
			stmt.setString( index++, dto.getUteDepositoBagagli() );
			stmt.setString( index++, dto.getUteReception24ore() );
			stmt.setString( index++, dto.getUtePerChiPrenoti() );
			if (dto.isFkPreferenzaValutaNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getFkPreferenzaValuta() );
			}
		
			if (dto.isUteCartaTipoNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getUteCartaTipo() );
			}
		
			stmt.setString( index++, dto.getUteCap() );
			stmt.setString( index++, dto.getUteCapAzienda() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UtenteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the utente table.
	 */
	public void update(UtentePk pk, Utente dto) throws UtenteDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getUteId() );
			stmt.setString( index++, dto.getUteCognome() );
			stmt.setString( index++, dto.getUteNome() );
			stmt.setString( index++, dto.getUteEmail() );
			stmt.setString( index++, dto.getUtePassword() );
			stmt.setDate(index++, dto.getUteLastLogin()==null ? null : new java.sql.Date( dto.getUteLastLogin().getTime() ) );
			stmt.setString( index++, dto.getUteCellulare() );
			stmt.setString( index++, dto.getUteSesso() );
			stmt.setDate(index++, dto.getUteDataNascita()==null ? null : new java.sql.Date( dto.getUteDataNascita().getTime() ) );
			stmt.setLong( index++, dto.getUteTitolo() );
			stmt.setLong( index++, dto.getFkPaesi() );
			stmt.setString( index++, dto.getUteCartaNumero() );
			stmt.setString( index++, dto.getUteCartaTitolare() );
			stmt.setString( index++, dto.getUteCartaScadMese() );
			stmt.setString( index++, dto.getUteCartaScadAnno() );
			stmt.setString( index++, dto.getUteCartaUsaPerLav() );
			stmt.setString( index++, dto.getUteCartaUsaPerPremio() );
			if (dto.isUteTipologiaNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getUteTipologia() );
			}
		
			stmt.setString( index++, dto.getUteIndirizzo() );
			if (dto.isFkComuneNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getFkComune() );
			}
		
			stmt.setString( index++, dto.getUteAzienda() );
			if (dto.isFkComuneAziendaNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getFkComuneAzienda() );
			}
		
			stmt.setString( index++, dto.getUteTelefonoAzienda() );
			stmt.setString( index++, dto.getUtePivaAzienda() );
			stmt.setString( index++, dto.getUteFotoProfiloPath() );
			stmt.setString( index++, dto.getUtePagamentiOnline() );
			stmt.setString( index++, dto.getUteQuandoPagare() );
			stmt.setString( index++, dto.getUteFumatore() );
			stmt.setString( index++, dto.getUtenteStelle() );
			stmt.setString( index++, dto.getUteCamereOspitiDisabili() );
			stmt.setString( index++, dto.getUteRistorante() );
			stmt.setString( index++, dto.getUteConnessioneInternet() );
			stmt.setString( index++, dto.getUteCameraNonfumatori() );
			stmt.setString( index++, dto.getUtePalestra() );
			stmt.setString( index++, dto.getUteCamereFamiliari() );
			stmt.setString( index++, dto.getUteAnimali() );
			stmt.setString( index++, dto.getUteParcheggio() );
			stmt.setString( index++, dto.getUteSpaBenessere() );
			stmt.setString( index++, dto.getUteWifi() );
			stmt.setString( index++, dto.getUtePiscinaCoperta() );
			stmt.setString( index++, dto.getUteNavettaAeroportuale() );
			stmt.setString( index++, dto.getUteConnessioneWifiGratuita() );
			stmt.setString( index++, dto.getUteBar() );
			stmt.setString( index++, dto.getUteDepositoBagagli() );
			stmt.setString( index++, dto.getUteReception24ore() );
			stmt.setString( index++, dto.getUtePerChiPrenoti() );
			if (dto.isFkPreferenzaValutaNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getFkPreferenzaValuta() );
			}
		
			if (dto.isUteCartaTipoNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getUteCartaTipo() );
			}
		
			stmt.setString( index++, dto.getUteCap() );
			stmt.setString( index++, dto.getUteCapAzienda() );
			stmt.setLong( 51, pk.getUteId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UtenteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the utente table.
	 */
	public void delete(UtentePk pk) throws UtenteDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getUteId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UtenteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the utente table that matches the specified primary-key value.
	 */
	public Utente findByPrimaryKey(UtentePk pk) throws UtenteDaoException
	{
		return findByPrimaryKey( pk.getUteId() );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_id = :uteId'.
	 */
	public Utente findByPrimaryKey(long uteId) throws UtenteDaoException
	{
		Utente ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ute_id = ?", new Object[] {  new Long(uteId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the utente table that match the criteria ''.
	 */
	public Utente[] findAll() throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ute_id", null );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'fk_comune = :fkComune'.
	 */
	public Utente[] findByComuni(long fkComune) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fk_comune = ?", new Object[] {  new Long(fkComune) } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'fk_comune_azienda = :fkComuneAzienda'.
	 */
	public Utente[] findByComuni2(long fkComuneAzienda) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fk_comune_azienda = ?", new Object[] {  new Long(fkComuneAzienda) } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'fk_paesi = :fkPaesi'.
	 */
	public Utente[] findByPaesi(long fkPaesi) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fk_paesi = ?", new Object[] {  new Long(fkPaesi) } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_tipologia = :uteTipologia'.
	 */
	public Utente[] findByTipologiaUtente(long uteTipologia) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_tipologia = ?", new Object[] {  new Long(uteTipologia) } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'fk_preferenza_valuta = :fkPreferenzaValuta'.
	 */
	public Utente[] findByValute(long fkPreferenzaValuta) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fk_preferenza_valuta = ?", new Object[] {  new Long(fkPreferenzaValuta) } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_id = :uteId'.
	 */
	public Utente[] findWhereUteIdEquals(long uteId) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_id = ? ORDER BY ute_id", new Object[] {  new Long(uteId) } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_cognome = :uteCognome'.
	 */
	public Utente[] findWhereUteCognomeEquals(String uteCognome) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_cognome = ? ORDER BY ute_cognome", new Object[] { uteCognome } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_nome = :uteNome'.
	 */
	public Utente[] findWhereUteNomeEquals(String uteNome) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_nome = ? ORDER BY ute_nome", new Object[] { uteNome } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_email = :uteEmail'.
	 */
	public Utente[] findWhereUteEmailEquals(String uteEmail) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_email = ? ORDER BY ute_email", new Object[] { uteEmail } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_password = :utePassword'.
	 */
	public Utente[] findWhereUtePasswordEquals(String utePassword) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_password = ? ORDER BY ute_password", new Object[] { utePassword } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_last_login = :uteLastLogin'.
	 */
	public Utente[] findWhereUteLastLoginEquals(Date uteLastLogin) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_last_login = ? ORDER BY ute_last_login", new Object[] { uteLastLogin==null ? null : new java.sql.Date( uteLastLogin.getTime() ) } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_cellulare = :uteCellulare'.
	 */
	public Utente[] findWhereUteCellulareEquals(String uteCellulare) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_cellulare = ? ORDER BY ute_cellulare", new Object[] { uteCellulare } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_sesso = :uteSesso'.
	 */
	public Utente[] findWhereUteSessoEquals(String uteSesso) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_sesso = ? ORDER BY ute_sesso", new Object[] { uteSesso } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_data_nascita = :uteDataNascita'.
	 */
	public Utente[] findWhereUteDataNascitaEquals(Date uteDataNascita) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_data_nascita = ? ORDER BY ute_data_nascita", new Object[] { uteDataNascita==null ? null : new java.sql.Date( uteDataNascita.getTime() ) } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_titolo = :uteTitolo'.
	 */
	public Utente[] findWhereUteTitoloEquals(long uteTitolo) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_titolo = ? ORDER BY ute_titolo", new Object[] {  new Long(uteTitolo) } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'fk_paesi = :fkPaesi'.
	 */
	public Utente[] findWhereFkPaesiEquals(long fkPaesi) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fk_paesi = ? ORDER BY fk_paesi", new Object[] {  new Long(fkPaesi) } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_carta_numero = :uteCartaNumero'.
	 */
	public Utente[] findWhereUteCartaNumeroEquals(String uteCartaNumero) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_carta_numero = ? ORDER BY ute_carta_numero", new Object[] { uteCartaNumero } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_carta_titolare = :uteCartaTitolare'.
	 */
	public Utente[] findWhereUteCartaTitolareEquals(String uteCartaTitolare) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_carta_titolare = ? ORDER BY ute_carta_titolare", new Object[] { uteCartaTitolare } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_carta_scad_mese = :uteCartaScadMese'.
	 */
	public Utente[] findWhereUteCartaScadMeseEquals(String uteCartaScadMese) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_carta_scad_mese = ? ORDER BY ute_carta_scad_mese", new Object[] { uteCartaScadMese } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_carta_scad_anno = :uteCartaScadAnno'.
	 */
	public Utente[] findWhereUteCartaScadAnnoEquals(String uteCartaScadAnno) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_carta_scad_anno = ? ORDER BY ute_carta_scad_anno", new Object[] { uteCartaScadAnno } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_carta_usa_per_lav = :uteCartaUsaPerLav'.
	 */
	public Utente[] findWhereUteCartaUsaPerLavEquals(String uteCartaUsaPerLav) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_carta_usa_per_lav = ? ORDER BY ute_carta_usa_per_lav", new Object[] { uteCartaUsaPerLav } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_carta_usa_per_premio = :uteCartaUsaPerPremio'.
	 */
	public Utente[] findWhereUteCartaUsaPerPremioEquals(String uteCartaUsaPerPremio) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_carta_usa_per_premio = ? ORDER BY ute_carta_usa_per_premio", new Object[] { uteCartaUsaPerPremio } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_tipologia = :uteTipologia'.
	 */
	public Utente[] findWhereUteTipologiaEquals(long uteTipologia) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_tipologia = ? ORDER BY ute_tipologia", new Object[] {  new Long(uteTipologia) } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_indirizzo = :uteIndirizzo'.
	 */
	public Utente[] findWhereUteIndirizzoEquals(String uteIndirizzo) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_indirizzo = ? ORDER BY ute_indirizzo", new Object[] { uteIndirizzo } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'fk_comune = :fkComune'.
	 */
	public Utente[] findWhereFkComuneEquals(long fkComune) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fk_comune = ? ORDER BY fk_comune", new Object[] {  new Long(fkComune) } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_azienda = :uteAzienda'.
	 */
	public Utente[] findWhereUteAziendaEquals(String uteAzienda) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_azienda = ? ORDER BY ute_azienda", new Object[] { uteAzienda } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'fk_comune_azienda = :fkComuneAzienda'.
	 */
	public Utente[] findWhereFkComuneAziendaEquals(long fkComuneAzienda) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fk_comune_azienda = ? ORDER BY fk_comune_azienda", new Object[] {  new Long(fkComuneAzienda) } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_telefono_azienda = :uteTelefonoAzienda'.
	 */
	public Utente[] findWhereUteTelefonoAziendaEquals(String uteTelefonoAzienda) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_telefono_azienda = ? ORDER BY ute_telefono_azienda", new Object[] { uteTelefonoAzienda } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_piva_azienda = :utePivaAzienda'.
	 */
	public Utente[] findWhereUtePivaAziendaEquals(String utePivaAzienda) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_piva_azienda = ? ORDER BY ute_piva_azienda", new Object[] { utePivaAzienda } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_foto_profilo_path = :uteFotoProfiloPath'.
	 */
	public Utente[] findWhereUteFotoProfiloPathEquals(String uteFotoProfiloPath) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_foto_profilo_path = ? ORDER BY ute_foto_profilo_path", new Object[] { uteFotoProfiloPath } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_pagamenti_online = :utePagamentiOnline'.
	 */
	public Utente[] findWhereUtePagamentiOnlineEquals(String utePagamentiOnline) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_pagamenti_online = ? ORDER BY ute_pagamenti_online", new Object[] { utePagamentiOnline } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_quando_pagare = :uteQuandoPagare'.
	 */
	public Utente[] findWhereUteQuandoPagareEquals(String uteQuandoPagare) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_quando_pagare = ? ORDER BY ute_quando_pagare", new Object[] { uteQuandoPagare } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_fumatore = :uteFumatore'.
	 */
	public Utente[] findWhereUteFumatoreEquals(String uteFumatore) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_fumatore = ? ORDER BY ute_fumatore", new Object[] { uteFumatore } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'utente_stelle = :utenteStelle'.
	 */
	public Utente[] findWhereUtenteStelleEquals(String utenteStelle) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE utente_stelle = ? ORDER BY utente_stelle", new Object[] { utenteStelle } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_camere_ospiti_disabili = :uteCamereOspitiDisabili'.
	 */
	public Utente[] findWhereUteCamereOspitiDisabiliEquals(String uteCamereOspitiDisabili) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_camere_ospiti_disabili = ? ORDER BY ute_camere_ospiti_disabili", new Object[] { uteCamereOspitiDisabili } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_ristorante = :uteRistorante'.
	 */
	public Utente[] findWhereUteRistoranteEquals(String uteRistorante) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_ristorante = ? ORDER BY ute_ristorante", new Object[] { uteRistorante } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_connessione_internet = :uteConnessioneInternet'.
	 */
	public Utente[] findWhereUteConnessioneInternetEquals(String uteConnessioneInternet) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_connessione_internet = ? ORDER BY ute_connessione_internet", new Object[] { uteConnessioneInternet } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_camera_nonfumatori = :uteCameraNonfumatori'.
	 */
	public Utente[] findWhereUteCameraNonfumatoriEquals(String uteCameraNonfumatori) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_camera_nonfumatori = ? ORDER BY ute_camera_nonfumatori", new Object[] { uteCameraNonfumatori } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_palestra = :utePalestra'.
	 */
	public Utente[] findWhereUtePalestraEquals(String utePalestra) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_palestra = ? ORDER BY ute_palestra", new Object[] { utePalestra } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_camere_familiari = :uteCamereFamiliari'.
	 */
	public Utente[] findWhereUteCamereFamiliariEquals(String uteCamereFamiliari) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_camere_familiari = ? ORDER BY ute_camere_familiari", new Object[] { uteCamereFamiliari } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_animali = :uteAnimali'.
	 */
	public Utente[] findWhereUteAnimaliEquals(String uteAnimali) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_animali = ? ORDER BY ute_animali", new Object[] { uteAnimali } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_parcheggio = :uteParcheggio'.
	 */
	public Utente[] findWhereUteParcheggioEquals(String uteParcheggio) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_parcheggio = ? ORDER BY ute_parcheggio", new Object[] { uteParcheggio } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_spa_benessere = :uteSpaBenessere'.
	 */
	public Utente[] findWhereUteSpaBenessereEquals(String uteSpaBenessere) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_spa_benessere = ? ORDER BY ute_spa_benessere", new Object[] { uteSpaBenessere } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_wifi = :uteWifi'.
	 */
	public Utente[] findWhereUteWifiEquals(String uteWifi) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_wifi = ? ORDER BY ute_wifi", new Object[] { uteWifi } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_piscina_coperta = :utePiscinaCoperta'.
	 */
	public Utente[] findWhereUtePiscinaCopertaEquals(String utePiscinaCoperta) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_piscina_coperta = ? ORDER BY ute_piscina_coperta", new Object[] { utePiscinaCoperta } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_navetta_aeroportuale = :uteNavettaAeroportuale'.
	 */
	public Utente[] findWhereUteNavettaAeroportualeEquals(String uteNavettaAeroportuale) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_navetta_aeroportuale = ? ORDER BY ute_navetta_aeroportuale", new Object[] { uteNavettaAeroportuale } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_connessione_wifi_gratuita = :uteConnessioneWifiGratuita'.
	 */
	public Utente[] findWhereUteConnessioneWifiGratuitaEquals(String uteConnessioneWifiGratuita) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_connessione_wifi_gratuita = ? ORDER BY ute_connessione_wifi_gratuita", new Object[] { uteConnessioneWifiGratuita } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_bar = :uteBar'.
	 */
	public Utente[] findWhereUteBarEquals(String uteBar) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_bar = ? ORDER BY ute_bar", new Object[] { uteBar } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_deposito_bagagli = :uteDepositoBagagli'.
	 */
	public Utente[] findWhereUteDepositoBagagliEquals(String uteDepositoBagagli) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_deposito_bagagli = ? ORDER BY ute_deposito_bagagli", new Object[] { uteDepositoBagagli } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_reception_24ore = :uteReception24ore'.
	 */
	public Utente[] findWhereUteReception24oreEquals(String uteReception24ore) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_reception_24ore = ? ORDER BY ute_reception_24ore", new Object[] { uteReception24ore } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_per_chi_prenoti = :utePerChiPrenoti'.
	 */
	public Utente[] findWhereUtePerChiPrenotiEquals(String utePerChiPrenoti) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_per_chi_prenoti = ? ORDER BY ute_per_chi_prenoti", new Object[] { utePerChiPrenoti } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'fk_preferenza_valuta = :fkPreferenzaValuta'.
	 */
	public Utente[] findWhereFkPreferenzaValutaEquals(long fkPreferenzaValuta) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fk_preferenza_valuta = ? ORDER BY fk_preferenza_valuta", new Object[] {  new Long(fkPreferenzaValuta) } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_carta_tipo = :uteCartaTipo'.
	 */
	public Utente[] findWhereUteCartaTipoEquals(int uteCartaTipo) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_carta_tipo = ? ORDER BY ute_carta_tipo", new Object[] {  new Integer(uteCartaTipo) } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_cap = :uteCap'.
	 */
	public Utente[] findWhereUteCapEquals(String uteCap) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_cap = ? ORDER BY ute_cap", new Object[] { uteCap } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_cap_azienda = :uteCapAzienda'.
	 */
	public Utente[] findWhereUteCapAziendaEquals(String uteCapAzienda) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_cap_azienda = ? ORDER BY ute_cap_azienda", new Object[] { uteCapAzienda } );
	}

	/**
	 * Method 'UtenteDaoImpl'
	 * 
	 */
	public UtenteDaoImpl()
	{
	}

	/**
	 * Method 'UtenteDaoImpl'
	 * 
	 * @param userConn
	 */
	public UtenteDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "utente";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Utente fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Utente dto = new Utente();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Utente[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Utente dto = new Utente();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Utente ret[] = new Utente[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Utente dto, ResultSet rs) throws SQLException
	{
		dto.setUteId( rs.getLong( COLUMN_UTE_ID ) );
		dto.setUteCognome( rs.getString( COLUMN_UTE_COGNOME ) );
		dto.setUteNome( rs.getString( COLUMN_UTE_NOME ) );
		dto.setUteEmail( rs.getString( COLUMN_UTE_EMAIL ) );
		dto.setUtePassword( rs.getString( COLUMN_UTE_PASSWORD ) );
		dto.setUteLastLogin( rs.getDate(COLUMN_UTE_LAST_LOGIN ) );
		dto.setUteCellulare( rs.getString( COLUMN_UTE_CELLULARE ) );
		dto.setUteSesso( rs.getString( COLUMN_UTE_SESSO ) );
		dto.setUteDataNascita( rs.getDate(COLUMN_UTE_DATA_NASCITA ) );
		dto.setUteTitolo( rs.getLong( COLUMN_UTE_TITOLO ) );
		dto.setFkPaesi( rs.getLong( COLUMN_FK_PAESI ) );
		dto.setUteCartaNumero( rs.getString( COLUMN_UTE_CARTA_NUMERO ) );
		dto.setUteCartaTitolare( rs.getString( COLUMN_UTE_CARTA_TITOLARE ) );
		dto.setUteCartaScadMese( rs.getString( COLUMN_UTE_CARTA_SCAD_MESE ) );
		dto.setUteCartaScadAnno( rs.getString( COLUMN_UTE_CARTA_SCAD_ANNO ) );
		dto.setUteCartaUsaPerLav( rs.getString( COLUMN_UTE_CARTA_USA_PER_LAV ) );
		dto.setUteCartaUsaPerPremio( rs.getString( COLUMN_UTE_CARTA_USA_PER_PREMIO ) );
		dto.setUteTipologia( rs.getLong( COLUMN_UTE_TIPOLOGIA ) );
		if (rs.wasNull()) {
			dto.setUteTipologiaNull( true );
		}
		
		dto.setUteIndirizzo( rs.getString( COLUMN_UTE_INDIRIZZO ) );
		dto.setFkComune( rs.getLong( COLUMN_FK_COMUNE ) );
		if (rs.wasNull()) {
			dto.setFkComuneNull( true );
		}
		
		dto.setUteAzienda( rs.getString( COLUMN_UTE_AZIENDA ) );
		dto.setFkComuneAzienda( rs.getLong( COLUMN_FK_COMUNE_AZIENDA ) );
		if (rs.wasNull()) {
			dto.setFkComuneAziendaNull( true );
		}
		
		dto.setUteTelefonoAzienda( rs.getString( COLUMN_UTE_TELEFONO_AZIENDA ) );
		dto.setUtePivaAzienda( rs.getString( COLUMN_UTE_PIVA_AZIENDA ) );
		dto.setUteFotoProfiloPath( rs.getString( COLUMN_UTE_FOTO_PROFILO_PATH ) );
		dto.setUtePagamentiOnline( rs.getString( COLUMN_UTE_PAGAMENTI_ONLINE ) );
		dto.setUteQuandoPagare( rs.getString( COLUMN_UTE_QUANDO_PAGARE ) );
		dto.setUteFumatore( rs.getString( COLUMN_UTE_FUMATORE ) );
		dto.setUtenteStelle( rs.getString( COLUMN_UTENTE_STELLE ) );
		dto.setUteCamereOspitiDisabili( rs.getString( COLUMN_UTE_CAMERE_OSPITI_DISABILI ) );
		dto.setUteRistorante( rs.getString( COLUMN_UTE_RISTORANTE ) );
		dto.setUteConnessioneInternet( rs.getString( COLUMN_UTE_CONNESSIONE_INTERNET ) );
		dto.setUteCameraNonfumatori( rs.getString( COLUMN_UTE_CAMERA_NONFUMATORI ) );
		dto.setUtePalestra( rs.getString( COLUMN_UTE_PALESTRA ) );
		dto.setUteCamereFamiliari( rs.getString( COLUMN_UTE_CAMERE_FAMILIARI ) );
		dto.setUteAnimali( rs.getString( COLUMN_UTE_ANIMALI ) );
		dto.setUteParcheggio( rs.getString( COLUMN_UTE_PARCHEGGIO ) );
		dto.setUteSpaBenessere( rs.getString( COLUMN_UTE_SPA_BENESSERE ) );
		dto.setUteWifi( rs.getString( COLUMN_UTE_WIFI ) );
		dto.setUtePiscinaCoperta( rs.getString( COLUMN_UTE_PISCINA_COPERTA ) );
		dto.setUteNavettaAeroportuale( rs.getString( COLUMN_UTE_NAVETTA_AEROPORTUALE ) );
		dto.setUteConnessioneWifiGratuita( rs.getString( COLUMN_UTE_CONNESSIONE_WIFI_GRATUITA ) );
		dto.setUteBar( rs.getString( COLUMN_UTE_BAR ) );
		dto.setUteDepositoBagagli( rs.getString( COLUMN_UTE_DEPOSITO_BAGAGLI ) );
		dto.setUteReception24ore( rs.getString( COLUMN_UTE_RECEPTION24ORE ) );
		dto.setUtePerChiPrenoti( rs.getString( COLUMN_UTE_PER_CHI_PRENOTI ) );
		dto.setFkPreferenzaValuta( rs.getLong( COLUMN_FK_PREFERENZA_VALUTA ) );
		if (rs.wasNull()) {
			dto.setFkPreferenzaValutaNull( true );
		}
		
		dto.setUteCartaTipo( rs.getInt( COLUMN_UTE_CARTA_TIPO ) );
		if (rs.wasNull()) {
			dto.setUteCartaTipoNull( true );
		}
		
		dto.setUteCap( rs.getString( COLUMN_UTE_CAP ) );
		dto.setUteCapAzienda( rs.getString( COLUMN_UTE_CAP_AZIENDA ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Utente dto)
	{
	}

	/** 
	 * Returns all rows from the utente table that match the specified arbitrary SQL statement
	 */
	public Utente[] findByDynamicSelect(String sql, Object[] sqlParams) throws UtenteDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UtenteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the utente table that match the specified arbitrary SQL statement
	 */
	public Utente[] findByDynamicWhere(String sql, Object[] sqlParams) throws UtenteDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UtenteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
