/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.jdbc;

import com.mysecretwish.dao.*;
import com.mysecretwish.factory.*;
import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class CamereTecnologiaDaoImpl extends AbstractDAO implements CamereTecnologiaDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT sct_id, sct_ps4, sct_wii_u, sct_xbox_one, sct_computer, sct_console_video, sct_nintendo_wii, sct_ps2, sct_ps3, sct_xbox360, sct_portatile, sct_ipad, sct_canali_cavo, sct_lettore_cd, sct_lettore_dvd, sct_fax, sct_docking, sct_cassaforte_port, sct_tv_piatta, sct_canali_ppv, sct_radio, sct_canali_sat, sct_telefono, sct_tv, sct_videoregistr, sct_videogiochi, sct_lettore_blur, sct_wifi_portatile, sct_smartphone, sct_streaming, camere_cam_id FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( sct_id, sct_ps4, sct_wii_u, sct_xbox_one, sct_computer, sct_console_video, sct_nintendo_wii, sct_ps2, sct_ps3, sct_xbox360, sct_portatile, sct_ipad, sct_canali_cavo, sct_lettore_cd, sct_lettore_dvd, sct_fax, sct_docking, sct_cassaforte_port, sct_tv_piatta, sct_canali_ppv, sct_radio, sct_canali_sat, sct_telefono, sct_tv, sct_videoregistr, sct_videogiochi, sct_lettore_blur, sct_wifi_portatile, sct_smartphone, sct_streaming, camere_cam_id ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET sct_id = ?, sct_ps4 = ?, sct_wii_u = ?, sct_xbox_one = ?, sct_computer = ?, sct_console_video = ?, sct_nintendo_wii = ?, sct_ps2 = ?, sct_ps3 = ?, sct_xbox360 = ?, sct_portatile = ?, sct_ipad = ?, sct_canali_cavo = ?, sct_lettore_cd = ?, sct_lettore_dvd = ?, sct_fax = ?, sct_docking = ?, sct_cassaforte_port = ?, sct_tv_piatta = ?, sct_canali_ppv = ?, sct_radio = ?, sct_canali_sat = ?, sct_telefono = ?, sct_tv = ?, sct_videoregistr = ?, sct_videogiochi = ?, sct_lettore_blur = ?, sct_wifi_portatile = ?, sct_smartphone = ?, sct_streaming = ?, camere_cam_id = ? WHERE sct_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE sct_id = ?";

	/** 
	 * Index of column sct_id
	 */
	protected static final int COLUMN_SCT_ID = 1;

	/** 
	 * Index of column sct_ps4
	 */
	protected static final int COLUMN_SCT_PS4 = 2;

	/** 
	 * Index of column sct_wii_u
	 */
	protected static final int COLUMN_SCT_WII_U = 3;

	/** 
	 * Index of column sct_xbox_one
	 */
	protected static final int COLUMN_SCT_XBOX_ONE = 4;

	/** 
	 * Index of column sct_computer
	 */
	protected static final int COLUMN_SCT_COMPUTER = 5;

	/** 
	 * Index of column sct_console_video
	 */
	protected static final int COLUMN_SCT_CONSOLE_VIDEO = 6;

	/** 
	 * Index of column sct_nintendo_wii
	 */
	protected static final int COLUMN_SCT_NINTENDO_WII = 7;

	/** 
	 * Index of column sct_ps2
	 */
	protected static final int COLUMN_SCT_PS2 = 8;

	/** 
	 * Index of column sct_ps3
	 */
	protected static final int COLUMN_SCT_PS3 = 9;

	/** 
	 * Index of column sct_xbox360
	 */
	protected static final int COLUMN_SCT_XBOX360 = 10;

	/** 
	 * Index of column sct_portatile
	 */
	protected static final int COLUMN_SCT_PORTATILE = 11;

	/** 
	 * Index of column sct_ipad
	 */
	protected static final int COLUMN_SCT_IPAD = 12;

	/** 
	 * Index of column sct_canali_cavo
	 */
	protected static final int COLUMN_SCT_CANALI_CAVO = 13;

	/** 
	 * Index of column sct_lettore_cd
	 */
	protected static final int COLUMN_SCT_LETTORE_CD = 14;

	/** 
	 * Index of column sct_lettore_dvd
	 */
	protected static final int COLUMN_SCT_LETTORE_DVD = 15;

	/** 
	 * Index of column sct_fax
	 */
	protected static final int COLUMN_SCT_FAX = 16;

	/** 
	 * Index of column sct_docking
	 */
	protected static final int COLUMN_SCT_DOCKING = 17;

	/** 
	 * Index of column sct_cassaforte_port
	 */
	protected static final int COLUMN_SCT_CASSAFORTE_PORT = 18;

	/** 
	 * Index of column sct_tv_piatta
	 */
	protected static final int COLUMN_SCT_TV_PIATTA = 19;

	/** 
	 * Index of column sct_canali_ppv
	 */
	protected static final int COLUMN_SCT_CANALI_PPV = 20;

	/** 
	 * Index of column sct_radio
	 */
	protected static final int COLUMN_SCT_RADIO = 21;

	/** 
	 * Index of column sct_canali_sat
	 */
	protected static final int COLUMN_SCT_CANALI_SAT = 22;

	/** 
	 * Index of column sct_telefono
	 */
	protected static final int COLUMN_SCT_TELEFONO = 23;

	/** 
	 * Index of column sct_tv
	 */
	protected static final int COLUMN_SCT_TV = 24;

	/** 
	 * Index of column sct_videoregistr
	 */
	protected static final int COLUMN_SCT_VIDEOREGISTR = 25;

	/** 
	 * Index of column sct_videogiochi
	 */
	protected static final int COLUMN_SCT_VIDEOGIOCHI = 26;

	/** 
	 * Index of column sct_lettore_blur
	 */
	protected static final int COLUMN_SCT_LETTORE_BLUR = 27;

	/** 
	 * Index of column sct_wifi_portatile
	 */
	protected static final int COLUMN_SCT_WIFI_PORTATILE = 28;

	/** 
	 * Index of column sct_smartphone
	 */
	protected static final int COLUMN_SCT_SMARTPHONE = 29;

	/** 
	 * Index of column sct_streaming
	 */
	protected static final int COLUMN_SCT_STREAMING = 30;

	/** 
	 * Index of column camere_cam_id
	 */
	protected static final int COLUMN_CAMERE_CAM_ID = 31;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 31;

	/** 
	 * Index of primary-key column sct_id
	 */
	protected static final int PK_COLUMN_SCT_ID = 1;

	/** 
	 * Inserts a new row in the camere_tecnologia table.
	 */
	public CamereTecnologiaPk insert(CamereTecnologia dto) throws CamereTecnologiaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_camere')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setSctId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getSctId() );
			stmt.setString( index++, dto.getSctPs4() );
			stmt.setString( index++, dto.getSctWiiU() );
			stmt.setString( index++, dto.getSctXboxOne() );
			stmt.setString( index++, dto.getSctComputer() );
			stmt.setString( index++, dto.getSctConsoleVideo() );
			stmt.setString( index++, dto.getSctNintendoWii() );
			stmt.setString( index++, dto.getSctPs2() );
			stmt.setString( index++, dto.getSctPs3() );
			stmt.setString( index++, dto.getSctXbox360() );
			stmt.setString( index++, dto.getSctPortatile() );
			stmt.setString( index++, dto.getSctIpad() );
			stmt.setString( index++, dto.getSctCanaliCavo() );
			stmt.setString( index++, dto.getSctLettoreCd() );
			stmt.setString( index++, dto.getSctLettoreDvd() );
			stmt.setString( index++, dto.getSctFax() );
			stmt.setString( index++, dto.getSctDocking() );
			stmt.setString( index++, dto.getSctCassafortePort() );
			stmt.setString( index++, dto.getSctTvPiatta() );
			stmt.setString( index++, dto.getSctCanaliPpv() );
			stmt.setString( index++, dto.getSctRadio() );
			stmt.setString( index++, dto.getSctCanaliSat() );
			stmt.setString( index++, dto.getSctTelefono() );
			stmt.setString( index++, dto.getSctTv() );
			stmt.setString( index++, dto.getSctVideoregistr() );
			stmt.setString( index++, dto.getSctVideogiochi() );
			stmt.setString( index++, dto.getSctLettoreBlur() );
			stmt.setString( index++, dto.getSctWifiPortatile() );
			stmt.setString( index++, dto.getSctSmartphone() );
			stmt.setString( index++, dto.getSctStreaming() );
			stmt.setLong( index++, dto.getCamereCamId() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CamereTecnologiaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the camere_tecnologia table.
	 */
	public void update(CamereTecnologiaPk pk, CamereTecnologia dto) throws CamereTecnologiaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getSctId() );
			stmt.setString( index++, dto.getSctPs4() );
			stmt.setString( index++, dto.getSctWiiU() );
			stmt.setString( index++, dto.getSctXboxOne() );
			stmt.setString( index++, dto.getSctComputer() );
			stmt.setString( index++, dto.getSctConsoleVideo() );
			stmt.setString( index++, dto.getSctNintendoWii() );
			stmt.setString( index++, dto.getSctPs2() );
			stmt.setString( index++, dto.getSctPs3() );
			stmt.setString( index++, dto.getSctXbox360() );
			stmt.setString( index++, dto.getSctPortatile() );
			stmt.setString( index++, dto.getSctIpad() );
			stmt.setString( index++, dto.getSctCanaliCavo() );
			stmt.setString( index++, dto.getSctLettoreCd() );
			stmt.setString( index++, dto.getSctLettoreDvd() );
			stmt.setString( index++, dto.getSctFax() );
			stmt.setString( index++, dto.getSctDocking() );
			stmt.setString( index++, dto.getSctCassafortePort() );
			stmt.setString( index++, dto.getSctTvPiatta() );
			stmt.setString( index++, dto.getSctCanaliPpv() );
			stmt.setString( index++, dto.getSctRadio() );
			stmt.setString( index++, dto.getSctCanaliSat() );
			stmt.setString( index++, dto.getSctTelefono() );
			stmt.setString( index++, dto.getSctTv() );
			stmt.setString( index++, dto.getSctVideoregistr() );
			stmt.setString( index++, dto.getSctVideogiochi() );
			stmt.setString( index++, dto.getSctLettoreBlur() );
			stmt.setString( index++, dto.getSctWifiPortatile() );
			stmt.setString( index++, dto.getSctSmartphone() );
			stmt.setString( index++, dto.getSctStreaming() );
			stmt.setLong( index++, dto.getCamereCamId() );
			stmt.setLong( 32, pk.getSctId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CamereTecnologiaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the camere_tecnologia table.
	 */
	public void delete(CamereTecnologiaPk pk) throws CamereTecnologiaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getSctId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CamereTecnologiaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the camere_tecnologia table that matches the specified primary-key value.
	 */
	public CamereTecnologia findByPrimaryKey(CamereTecnologiaPk pk) throws CamereTecnologiaDaoException
	{
		return findByPrimaryKey( pk.getSctId() );
	}

	/** 
	 * Returns all rows from the camere_tecnologia table that match the criteria 'sct_id = :sctId'.
	 */
	public CamereTecnologia findByPrimaryKey(long sctId) throws CamereTecnologiaDaoException
	{
		CamereTecnologia ret[] = findByDynamicSelect( SQL_SELECT + " WHERE sct_id = ?", new Object[] {  new Long(sctId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the camere_tecnologia table that match the criteria ''.
	 */
	public CamereTecnologia[] findAll() throws CamereTecnologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY sct_id", null );
	}

	/** 
	 * Returns all rows from the camere_tecnologia table that match the criteria 'camere_cam_id = :camereCamId'.
	 */
	public CamereTecnologia[] findByCamere(long camereCamId) throws CamereTecnologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE camere_cam_id = ?", new Object[] {  new Long(camereCamId) } );
	}

	/** 
	 * Returns all rows from the camere_tecnologia table that match the criteria 'sct_id = :sctId'.
	 */
	public CamereTecnologia[] findWhereSctIdEquals(long sctId) throws CamereTecnologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sct_id = ? ORDER BY sct_id", new Object[] {  new Long(sctId) } );
	}

	/** 
	 * Returns all rows from the camere_tecnologia table that match the criteria 'sct_ps4 = :sctPs4'.
	 */
	public CamereTecnologia[] findWhereSctPs4Equals(String sctPs4) throws CamereTecnologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sct_ps4 = ? ORDER BY sct_ps4", new Object[] { sctPs4 } );
	}

	/** 
	 * Returns all rows from the camere_tecnologia table that match the criteria 'sct_wii_u = :sctWiiU'.
	 */
	public CamereTecnologia[] findWhereSctWiiUEquals(String sctWiiU) throws CamereTecnologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sct_wii_u = ? ORDER BY sct_wii_u", new Object[] { sctWiiU } );
	}

	/** 
	 * Returns all rows from the camere_tecnologia table that match the criteria 'sct_xbox_one = :sctXboxOne'.
	 */
	public CamereTecnologia[] findWhereSctXboxOneEquals(String sctXboxOne) throws CamereTecnologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sct_xbox_one = ? ORDER BY sct_xbox_one", new Object[] { sctXboxOne } );
	}

	/** 
	 * Returns all rows from the camere_tecnologia table that match the criteria 'sct_computer = :sctComputer'.
	 */
	public CamereTecnologia[] findWhereSctComputerEquals(String sctComputer) throws CamereTecnologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sct_computer = ? ORDER BY sct_computer", new Object[] { sctComputer } );
	}

	/** 
	 * Returns all rows from the camere_tecnologia table that match the criteria 'sct_console_video = :sctConsoleVideo'.
	 */
	public CamereTecnologia[] findWhereSctConsoleVideoEquals(String sctConsoleVideo) throws CamereTecnologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sct_console_video = ? ORDER BY sct_console_video", new Object[] { sctConsoleVideo } );
	}

	/** 
	 * Returns all rows from the camere_tecnologia table that match the criteria 'sct_nintendo_wii = :sctNintendoWii'.
	 */
	public CamereTecnologia[] findWhereSctNintendoWiiEquals(String sctNintendoWii) throws CamereTecnologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sct_nintendo_wii = ? ORDER BY sct_nintendo_wii", new Object[] { sctNintendoWii } );
	}

	/** 
	 * Returns all rows from the camere_tecnologia table that match the criteria 'sct_ps2 = :sctPs2'.
	 */
	public CamereTecnologia[] findWhereSctPs2Equals(String sctPs2) throws CamereTecnologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sct_ps2 = ? ORDER BY sct_ps2", new Object[] { sctPs2 } );
	}

	/** 
	 * Returns all rows from the camere_tecnologia table that match the criteria 'sct_ps3 = :sctPs3'.
	 */
	public CamereTecnologia[] findWhereSctPs3Equals(String sctPs3) throws CamereTecnologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sct_ps3 = ? ORDER BY sct_ps3", new Object[] { sctPs3 } );
	}

	/** 
	 * Returns all rows from the camere_tecnologia table that match the criteria 'sct_xbox360 = :sctXbox360'.
	 */
	public CamereTecnologia[] findWhereSctXbox360Equals(String sctXbox360) throws CamereTecnologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sct_xbox360 = ? ORDER BY sct_xbox360", new Object[] { sctXbox360 } );
	}

	/** 
	 * Returns all rows from the camere_tecnologia table that match the criteria 'sct_portatile = :sctPortatile'.
	 */
	public CamereTecnologia[] findWhereSctPortatileEquals(String sctPortatile) throws CamereTecnologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sct_portatile = ? ORDER BY sct_portatile", new Object[] { sctPortatile } );
	}

	/** 
	 * Returns all rows from the camere_tecnologia table that match the criteria 'sct_ipad = :sctIpad'.
	 */
	public CamereTecnologia[] findWhereSctIpadEquals(String sctIpad) throws CamereTecnologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sct_ipad = ? ORDER BY sct_ipad", new Object[] { sctIpad } );
	}

	/** 
	 * Returns all rows from the camere_tecnologia table that match the criteria 'sct_canali_cavo = :sctCanaliCavo'.
	 */
	public CamereTecnologia[] findWhereSctCanaliCavoEquals(String sctCanaliCavo) throws CamereTecnologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sct_canali_cavo = ? ORDER BY sct_canali_cavo", new Object[] { sctCanaliCavo } );
	}

	/** 
	 * Returns all rows from the camere_tecnologia table that match the criteria 'sct_lettore_cd = :sctLettoreCd'.
	 */
	public CamereTecnologia[] findWhereSctLettoreCdEquals(String sctLettoreCd) throws CamereTecnologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sct_lettore_cd = ? ORDER BY sct_lettore_cd", new Object[] { sctLettoreCd } );
	}

	/** 
	 * Returns all rows from the camere_tecnologia table that match the criteria 'sct_lettore_dvd = :sctLettoreDvd'.
	 */
	public CamereTecnologia[] findWhereSctLettoreDvdEquals(String sctLettoreDvd) throws CamereTecnologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sct_lettore_dvd = ? ORDER BY sct_lettore_dvd", new Object[] { sctLettoreDvd } );
	}

	/** 
	 * Returns all rows from the camere_tecnologia table that match the criteria 'sct_fax = :sctFax'.
	 */
	public CamereTecnologia[] findWhereSctFaxEquals(String sctFax) throws CamereTecnologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sct_fax = ? ORDER BY sct_fax", new Object[] { sctFax } );
	}

	/** 
	 * Returns all rows from the camere_tecnologia table that match the criteria 'sct_docking = :sctDocking'.
	 */
	public CamereTecnologia[] findWhereSctDockingEquals(String sctDocking) throws CamereTecnologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sct_docking = ? ORDER BY sct_docking", new Object[] { sctDocking } );
	}

	/** 
	 * Returns all rows from the camere_tecnologia table that match the criteria 'sct_cassaforte_port = :sctCassafortePort'.
	 */
	public CamereTecnologia[] findWhereSctCassafortePortEquals(String sctCassafortePort) throws CamereTecnologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sct_cassaforte_port = ? ORDER BY sct_cassaforte_port", new Object[] { sctCassafortePort } );
	}

	/** 
	 * Returns all rows from the camere_tecnologia table that match the criteria 'sct_tv_piatta = :sctTvPiatta'.
	 */
	public CamereTecnologia[] findWhereSctTvPiattaEquals(String sctTvPiatta) throws CamereTecnologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sct_tv_piatta = ? ORDER BY sct_tv_piatta", new Object[] { sctTvPiatta } );
	}

	/** 
	 * Returns all rows from the camere_tecnologia table that match the criteria 'sct_canali_ppv = :sctCanaliPpv'.
	 */
	public CamereTecnologia[] findWhereSctCanaliPpvEquals(String sctCanaliPpv) throws CamereTecnologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sct_canali_ppv = ? ORDER BY sct_canali_ppv", new Object[] { sctCanaliPpv } );
	}

	/** 
	 * Returns all rows from the camere_tecnologia table that match the criteria 'sct_radio = :sctRadio'.
	 */
	public CamereTecnologia[] findWhereSctRadioEquals(String sctRadio) throws CamereTecnologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sct_radio = ? ORDER BY sct_radio", new Object[] { sctRadio } );
	}

	/** 
	 * Returns all rows from the camere_tecnologia table that match the criteria 'sct_canali_sat = :sctCanaliSat'.
	 */
	public CamereTecnologia[] findWhereSctCanaliSatEquals(String sctCanaliSat) throws CamereTecnologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sct_canali_sat = ? ORDER BY sct_canali_sat", new Object[] { sctCanaliSat } );
	}

	/** 
	 * Returns all rows from the camere_tecnologia table that match the criteria 'sct_telefono = :sctTelefono'.
	 */
	public CamereTecnologia[] findWhereSctTelefonoEquals(String sctTelefono) throws CamereTecnologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sct_telefono = ? ORDER BY sct_telefono", new Object[] { sctTelefono } );
	}

	/** 
	 * Returns all rows from the camere_tecnologia table that match the criteria 'sct_tv = :sctTv'.
	 */
	public CamereTecnologia[] findWhereSctTvEquals(String sctTv) throws CamereTecnologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sct_tv = ? ORDER BY sct_tv", new Object[] { sctTv } );
	}

	/** 
	 * Returns all rows from the camere_tecnologia table that match the criteria 'sct_videoregistr = :sctVideoregistr'.
	 */
	public CamereTecnologia[] findWhereSctVideoregistrEquals(String sctVideoregistr) throws CamereTecnologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sct_videoregistr = ? ORDER BY sct_videoregistr", new Object[] { sctVideoregistr } );
	}

	/** 
	 * Returns all rows from the camere_tecnologia table that match the criteria 'sct_videogiochi = :sctVideogiochi'.
	 */
	public CamereTecnologia[] findWhereSctVideogiochiEquals(String sctVideogiochi) throws CamereTecnologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sct_videogiochi = ? ORDER BY sct_videogiochi", new Object[] { sctVideogiochi } );
	}

	/** 
	 * Returns all rows from the camere_tecnologia table that match the criteria 'sct_lettore_blur = :sctLettoreBlur'.
	 */
	public CamereTecnologia[] findWhereSctLettoreBlurEquals(String sctLettoreBlur) throws CamereTecnologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sct_lettore_blur = ? ORDER BY sct_lettore_blur", new Object[] { sctLettoreBlur } );
	}

	/** 
	 * Returns all rows from the camere_tecnologia table that match the criteria 'sct_wifi_portatile = :sctWifiPortatile'.
	 */
	public CamereTecnologia[] findWhereSctWifiPortatileEquals(String sctWifiPortatile) throws CamereTecnologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sct_wifi_portatile = ? ORDER BY sct_wifi_portatile", new Object[] { sctWifiPortatile } );
	}

	/** 
	 * Returns all rows from the camere_tecnologia table that match the criteria 'sct_smartphone = :sctSmartphone'.
	 */
	public CamereTecnologia[] findWhereSctSmartphoneEquals(String sctSmartphone) throws CamereTecnologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sct_smartphone = ? ORDER BY sct_smartphone", new Object[] { sctSmartphone } );
	}

	/** 
	 * Returns all rows from the camere_tecnologia table that match the criteria 'sct_streaming = :sctStreaming'.
	 */
	public CamereTecnologia[] findWhereSctStreamingEquals(String sctStreaming) throws CamereTecnologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sct_streaming = ? ORDER BY sct_streaming", new Object[] { sctStreaming } );
	}

	/** 
	 * Returns all rows from the camere_tecnologia table that match the criteria 'camere_cam_id = :camereCamId'.
	 */
	public CamereTecnologia[] findWhereCamereCamIdEquals(long camereCamId) throws CamereTecnologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE camere_cam_id = ? ORDER BY camere_cam_id", new Object[] {  new Long(camereCamId) } );
	}

	/**
	 * Method 'CamereTecnologiaDaoImpl'
	 * 
	 */
	public CamereTecnologiaDaoImpl()
	{
	}

	/**
	 * Method 'CamereTecnologiaDaoImpl'
	 * 
	 * @param userConn
	 */
	public CamereTecnologiaDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "camere_tecnologia";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected CamereTecnologia fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			CamereTecnologia dto = new CamereTecnologia();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected CamereTecnologia[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			CamereTecnologia dto = new CamereTecnologia();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		CamereTecnologia ret[] = new CamereTecnologia[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(CamereTecnologia dto, ResultSet rs) throws SQLException
	{
		dto.setSctId( rs.getLong( COLUMN_SCT_ID ) );
		dto.setSctPs4( rs.getString( COLUMN_SCT_PS4 ) );
		dto.setSctWiiU( rs.getString( COLUMN_SCT_WII_U ) );
		dto.setSctXboxOne( rs.getString( COLUMN_SCT_XBOX_ONE ) );
		dto.setSctComputer( rs.getString( COLUMN_SCT_COMPUTER ) );
		dto.setSctConsoleVideo( rs.getString( COLUMN_SCT_CONSOLE_VIDEO ) );
		dto.setSctNintendoWii( rs.getString( COLUMN_SCT_NINTENDO_WII ) );
		dto.setSctPs2( rs.getString( COLUMN_SCT_PS2 ) );
		dto.setSctPs3( rs.getString( COLUMN_SCT_PS3 ) );
		dto.setSctXbox360( rs.getString( COLUMN_SCT_XBOX360 ) );
		dto.setSctPortatile( rs.getString( COLUMN_SCT_PORTATILE ) );
		dto.setSctIpad( rs.getString( COLUMN_SCT_IPAD ) );
		dto.setSctCanaliCavo( rs.getString( COLUMN_SCT_CANALI_CAVO ) );
		dto.setSctLettoreCd( rs.getString( COLUMN_SCT_LETTORE_CD ) );
		dto.setSctLettoreDvd( rs.getString( COLUMN_SCT_LETTORE_DVD ) );
		dto.setSctFax( rs.getString( COLUMN_SCT_FAX ) );
		dto.setSctDocking( rs.getString( COLUMN_SCT_DOCKING ) );
		dto.setSctCassafortePort( rs.getString( COLUMN_SCT_CASSAFORTE_PORT ) );
		dto.setSctTvPiatta( rs.getString( COLUMN_SCT_TV_PIATTA ) );
		dto.setSctCanaliPpv( rs.getString( COLUMN_SCT_CANALI_PPV ) );
		dto.setSctRadio( rs.getString( COLUMN_SCT_RADIO ) );
		dto.setSctCanaliSat( rs.getString( COLUMN_SCT_CANALI_SAT ) );
		dto.setSctTelefono( rs.getString( COLUMN_SCT_TELEFONO ) );
		dto.setSctTv( rs.getString( COLUMN_SCT_TV ) );
		dto.setSctVideoregistr( rs.getString( COLUMN_SCT_VIDEOREGISTR ) );
		dto.setSctVideogiochi( rs.getString( COLUMN_SCT_VIDEOGIOCHI ) );
		dto.setSctLettoreBlur( rs.getString( COLUMN_SCT_LETTORE_BLUR ) );
		dto.setSctWifiPortatile( rs.getString( COLUMN_SCT_WIFI_PORTATILE ) );
		dto.setSctSmartphone( rs.getString( COLUMN_SCT_SMARTPHONE ) );
		dto.setSctStreaming( rs.getString( COLUMN_SCT_STREAMING ) );
		dto.setCamereCamId( rs.getLong( COLUMN_CAMERE_CAM_ID ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(CamereTecnologia dto)
	{
	}

	/** 
	 * Returns all rows from the camere_tecnologia table that match the specified arbitrary SQL statement
	 */
	public CamereTecnologia[] findByDynamicSelect(String sql, Object[] sqlParams) throws CamereTecnologiaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CamereTecnologiaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the camere_tecnologia table that match the specified arbitrary SQL statement
	 */
	public CamereTecnologia[] findByDynamicWhere(String sql, Object[] sqlParams) throws CamereTecnologiaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CamereTecnologiaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
