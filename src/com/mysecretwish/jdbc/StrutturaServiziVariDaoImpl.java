/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.jdbc;

import com.mysecretwish.dao.*;
import com.mysecretwish.factory.*;
import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class StrutturaServiziVariDaoImpl extends AbstractDAO implements StrutturaServiziVariDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ssv_id, ssv_anim_ceste, ssv_anim_ciotole, ssv_solo_adulti, ssv_cam_analergica, ssv_solo_non_fum, ssv_area_fum, ssv_cam_non_fum, ssv_ascensore, ssv_cam_disabili, ssv_cam_famigl, ssv_cam_insonoriz, ssv_suite_nuz, ssv_servizi_vip, ssv_riscaldamento, ssv_area_cond, ssv_area_cond_costo, struttura_str_id FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ssv_id, ssv_anim_ceste, ssv_anim_ciotole, ssv_solo_adulti, ssv_cam_analergica, ssv_solo_non_fum, ssv_area_fum, ssv_cam_non_fum, ssv_ascensore, ssv_cam_disabili, ssv_cam_famigl, ssv_cam_insonoriz, ssv_suite_nuz, ssv_servizi_vip, ssv_riscaldamento, ssv_area_cond, ssv_area_cond_costo, struttura_str_id ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ssv_id = ?, ssv_anim_ceste = ?, ssv_anim_ciotole = ?, ssv_solo_adulti = ?, ssv_cam_analergica = ?, ssv_solo_non_fum = ?, ssv_area_fum = ?, ssv_cam_non_fum = ?, ssv_ascensore = ?, ssv_cam_disabili = ?, ssv_cam_famigl = ?, ssv_cam_insonoriz = ?, ssv_suite_nuz = ?, ssv_servizi_vip = ?, ssv_riscaldamento = ?, ssv_area_cond = ?, ssv_area_cond_costo = ?, struttura_str_id = ? WHERE ssv_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ssv_id = ?";

	/** 
	 * Index of column ssv_id
	 */
	protected static final int COLUMN_SSV_ID = 1;

	/** 
	 * Index of column ssv_anim_ceste
	 */
	protected static final int COLUMN_SSV_ANIM_CESTE = 2;

	/** 
	 * Index of column ssv_anim_ciotole
	 */
	protected static final int COLUMN_SSV_ANIM_CIOTOLE = 3;

	/** 
	 * Index of column ssv_solo_adulti
	 */
	protected static final int COLUMN_SSV_SOLO_ADULTI = 4;

	/** 
	 * Index of column ssv_cam_analergica
	 */
	protected static final int COLUMN_SSV_CAM_ANALERGICA = 5;

	/** 
	 * Index of column ssv_solo_non_fum
	 */
	protected static final int COLUMN_SSV_SOLO_NON_FUM = 6;

	/** 
	 * Index of column ssv_area_fum
	 */
	protected static final int COLUMN_SSV_AREA_FUM = 7;

	/** 
	 * Index of column ssv_cam_non_fum
	 */
	protected static final int COLUMN_SSV_CAM_NON_FUM = 8;

	/** 
	 * Index of column ssv_ascensore
	 */
	protected static final int COLUMN_SSV_ASCENSORE = 9;

	/** 
	 * Index of column ssv_cam_disabili
	 */
	protected static final int COLUMN_SSV_CAM_DISABILI = 10;

	/** 
	 * Index of column ssv_cam_famigl
	 */
	protected static final int COLUMN_SSV_CAM_FAMIGL = 11;

	/** 
	 * Index of column ssv_cam_insonoriz
	 */
	protected static final int COLUMN_SSV_CAM_INSONORIZ = 12;

	/** 
	 * Index of column ssv_suite_nuz
	 */
	protected static final int COLUMN_SSV_SUITE_NUZ = 13;

	/** 
	 * Index of column ssv_servizi_vip
	 */
	protected static final int COLUMN_SSV_SERVIZI_VIP = 14;

	/** 
	 * Index of column ssv_riscaldamento
	 */
	protected static final int COLUMN_SSV_RISCALDAMENTO = 15;

	/** 
	 * Index of column ssv_area_cond
	 */
	protected static final int COLUMN_SSV_AREA_COND = 16;

	/** 
	 * Index of column ssv_area_cond_costo
	 */
	protected static final int COLUMN_SSV_AREA_COND_COSTO = 17;

	/** 
	 * Index of column struttura_str_id
	 */
	protected static final int COLUMN_STRUTTURA_STR_ID = 18;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 18;

	/** 
	 * Index of primary-key column ssv_id
	 */
	protected static final int PK_COLUMN_SSV_ID = 1;

	/** 
	 * Inserts a new row in the struttura_servizi_vari table.
	 */
	public StrutturaServiziVariPk insert(StrutturaServiziVari dto) throws StrutturaServiziVariDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_strutture')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setSsvId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getSsvId() );
			stmt.setString( index++, dto.getSsvAnimCeste() );
			stmt.setString( index++, dto.getSsvAnimCiotole() );
			stmt.setString( index++, dto.getSsvSoloAdulti() );
			stmt.setString( index++, dto.getSsvCamAnalergica() );
			stmt.setString( index++, dto.getSsvSoloNonFum() );
			stmt.setString( index++, dto.getSsvAreaFum() );
			stmt.setString( index++, dto.getSsvCamNonFum() );
			stmt.setString( index++, dto.getSsvAscensore() );
			stmt.setString( index++, dto.getSsvCamDisabili() );
			stmt.setString( index++, dto.getSsvCamFamigl() );
			stmt.setString( index++, dto.getSsvCamInsonoriz() );
			stmt.setString( index++, dto.getSsvSuiteNuz() );
			stmt.setString( index++, dto.getSsvServiziVip() );
			stmt.setString( index++, dto.getSsvRiscaldamento() );
			stmt.setString( index++, dto.getSsvAreaCond() );
			if (dto.isSsvAreaCondCostoNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getSsvAreaCondCosto() );
			}
		
			stmt.setLong( index++, dto.getStrutturaStrId() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaServiziVariDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the struttura_servizi_vari table.
	 */
	public void update(StrutturaServiziVariPk pk, StrutturaServiziVari dto) throws StrutturaServiziVariDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getSsvId() );
			stmt.setString( index++, dto.getSsvAnimCeste() );
			stmt.setString( index++, dto.getSsvAnimCiotole() );
			stmt.setString( index++, dto.getSsvSoloAdulti() );
			stmt.setString( index++, dto.getSsvCamAnalergica() );
			stmt.setString( index++, dto.getSsvSoloNonFum() );
			stmt.setString( index++, dto.getSsvAreaFum() );
			stmt.setString( index++, dto.getSsvCamNonFum() );
			stmt.setString( index++, dto.getSsvAscensore() );
			stmt.setString( index++, dto.getSsvCamDisabili() );
			stmt.setString( index++, dto.getSsvCamFamigl() );
			stmt.setString( index++, dto.getSsvCamInsonoriz() );
			stmt.setString( index++, dto.getSsvSuiteNuz() );
			stmt.setString( index++, dto.getSsvServiziVip() );
			stmt.setString( index++, dto.getSsvRiscaldamento() );
			stmt.setString( index++, dto.getSsvAreaCond() );
			if (dto.isSsvAreaCondCostoNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getSsvAreaCondCosto() );
			}
		
			stmt.setLong( index++, dto.getStrutturaStrId() );
			stmt.setLong( 19, pk.getSsvId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaServiziVariDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the struttura_servizi_vari table.
	 */
	public void delete(StrutturaServiziVariPk pk) throws StrutturaServiziVariDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getSsvId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaServiziVariDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the struttura_servizi_vari table that matches the specified primary-key value.
	 */
	public StrutturaServiziVari findByPrimaryKey(StrutturaServiziVariPk pk) throws StrutturaServiziVariDaoException
	{
		return findByPrimaryKey( pk.getSsvId() );
	}

	/** 
	 * Returns all rows from the struttura_servizi_vari table that match the criteria 'ssv_id = :ssvId'.
	 */
	public StrutturaServiziVari findByPrimaryKey(long ssvId) throws StrutturaServiziVariDaoException
	{
		StrutturaServiziVari ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ssv_id = ?", new Object[] {  new Long(ssvId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the struttura_servizi_vari table that match the criteria ''.
	 */
	public StrutturaServiziVari[] findAll() throws StrutturaServiziVariDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ssv_id", null );
	}

	/** 
	 * Returns all rows from the struttura_servizi_vari table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaServiziVari[] findByStruttura(long strutturaStrId) throws StrutturaServiziVariDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_str_id = ?", new Object[] {  new Long(strutturaStrId) } );
	}

	/** 
	 * Returns all rows from the struttura_servizi_vari table that match the criteria 'ssv_id = :ssvId'.
	 */
	public StrutturaServiziVari[] findWhereSsvIdEquals(long ssvId) throws StrutturaServiziVariDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssv_id = ? ORDER BY ssv_id", new Object[] {  new Long(ssvId) } );
	}

	/** 
	 * Returns all rows from the struttura_servizi_vari table that match the criteria 'ssv_anim_ceste = :ssvAnimCeste'.
	 */
	public StrutturaServiziVari[] findWhereSsvAnimCesteEquals(String ssvAnimCeste) throws StrutturaServiziVariDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssv_anim_ceste = ? ORDER BY ssv_anim_ceste", new Object[] { ssvAnimCeste } );
	}

	/** 
	 * Returns all rows from the struttura_servizi_vari table that match the criteria 'ssv_anim_ciotole = :ssvAnimCiotole'.
	 */
	public StrutturaServiziVari[] findWhereSsvAnimCiotoleEquals(String ssvAnimCiotole) throws StrutturaServiziVariDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssv_anim_ciotole = ? ORDER BY ssv_anim_ciotole", new Object[] { ssvAnimCiotole } );
	}

	/** 
	 * Returns all rows from the struttura_servizi_vari table that match the criteria 'ssv_solo_adulti = :ssvSoloAdulti'.
	 */
	public StrutturaServiziVari[] findWhereSsvSoloAdultiEquals(String ssvSoloAdulti) throws StrutturaServiziVariDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssv_solo_adulti = ? ORDER BY ssv_solo_adulti", new Object[] { ssvSoloAdulti } );
	}

	/** 
	 * Returns all rows from the struttura_servizi_vari table that match the criteria 'ssv_cam_analergica = :ssvCamAnalergica'.
	 */
	public StrutturaServiziVari[] findWhereSsvCamAnalergicaEquals(String ssvCamAnalergica) throws StrutturaServiziVariDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssv_cam_analergica = ? ORDER BY ssv_cam_analergica", new Object[] { ssvCamAnalergica } );
	}

	/** 
	 * Returns all rows from the struttura_servizi_vari table that match the criteria 'ssv_solo_non_fum = :ssvSoloNonFum'.
	 */
	public StrutturaServiziVari[] findWhereSsvSoloNonFumEquals(String ssvSoloNonFum) throws StrutturaServiziVariDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssv_solo_non_fum = ? ORDER BY ssv_solo_non_fum", new Object[] { ssvSoloNonFum } );
	}

	/** 
	 * Returns all rows from the struttura_servizi_vari table that match the criteria 'ssv_area_fum = :ssvAreaFum'.
	 */
	public StrutturaServiziVari[] findWhereSsvAreaFumEquals(String ssvAreaFum) throws StrutturaServiziVariDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssv_area_fum = ? ORDER BY ssv_area_fum", new Object[] { ssvAreaFum } );
	}

	/** 
	 * Returns all rows from the struttura_servizi_vari table that match the criteria 'ssv_cam_non_fum = :ssvCamNonFum'.
	 */
	public StrutturaServiziVari[] findWhereSsvCamNonFumEquals(String ssvCamNonFum) throws StrutturaServiziVariDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssv_cam_non_fum = ? ORDER BY ssv_cam_non_fum", new Object[] { ssvCamNonFum } );
	}

	/** 
	 * Returns all rows from the struttura_servizi_vari table that match the criteria 'ssv_ascensore = :ssvAscensore'.
	 */
	public StrutturaServiziVari[] findWhereSsvAscensoreEquals(String ssvAscensore) throws StrutturaServiziVariDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssv_ascensore = ? ORDER BY ssv_ascensore", new Object[] { ssvAscensore } );
	}

	/** 
	 * Returns all rows from the struttura_servizi_vari table that match the criteria 'ssv_cam_disabili = :ssvCamDisabili'.
	 */
	public StrutturaServiziVari[] findWhereSsvCamDisabiliEquals(String ssvCamDisabili) throws StrutturaServiziVariDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssv_cam_disabili = ? ORDER BY ssv_cam_disabili", new Object[] { ssvCamDisabili } );
	}

	/** 
	 * Returns all rows from the struttura_servizi_vari table that match the criteria 'ssv_cam_famigl = :ssvCamFamigl'.
	 */
	public StrutturaServiziVari[] findWhereSsvCamFamiglEquals(String ssvCamFamigl) throws StrutturaServiziVariDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssv_cam_famigl = ? ORDER BY ssv_cam_famigl", new Object[] { ssvCamFamigl } );
	}

	/** 
	 * Returns all rows from the struttura_servizi_vari table that match the criteria 'ssv_cam_insonoriz = :ssvCamInsonoriz'.
	 */
	public StrutturaServiziVari[] findWhereSsvCamInsonorizEquals(String ssvCamInsonoriz) throws StrutturaServiziVariDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssv_cam_insonoriz = ? ORDER BY ssv_cam_insonoriz", new Object[] { ssvCamInsonoriz } );
	}

	/** 
	 * Returns all rows from the struttura_servizi_vari table that match the criteria 'ssv_suite_nuz = :ssvSuiteNuz'.
	 */
	public StrutturaServiziVari[] findWhereSsvSuiteNuzEquals(String ssvSuiteNuz) throws StrutturaServiziVariDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssv_suite_nuz = ? ORDER BY ssv_suite_nuz", new Object[] { ssvSuiteNuz } );
	}

	/** 
	 * Returns all rows from the struttura_servizi_vari table that match the criteria 'ssv_servizi_vip = :ssvServiziVip'.
	 */
	public StrutturaServiziVari[] findWhereSsvServiziVipEquals(String ssvServiziVip) throws StrutturaServiziVariDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssv_servizi_vip = ? ORDER BY ssv_servizi_vip", new Object[] { ssvServiziVip } );
	}

	/** 
	 * Returns all rows from the struttura_servizi_vari table that match the criteria 'ssv_riscaldamento = :ssvRiscaldamento'.
	 */
	public StrutturaServiziVari[] findWhereSsvRiscaldamentoEquals(String ssvRiscaldamento) throws StrutturaServiziVariDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssv_riscaldamento = ? ORDER BY ssv_riscaldamento", new Object[] { ssvRiscaldamento } );
	}

	/** 
	 * Returns all rows from the struttura_servizi_vari table that match the criteria 'ssv_area_cond = :ssvAreaCond'.
	 */
	public StrutturaServiziVari[] findWhereSsvAreaCondEquals(String ssvAreaCond) throws StrutturaServiziVariDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssv_area_cond = ? ORDER BY ssv_area_cond", new Object[] { ssvAreaCond } );
	}

	/** 
	 * Returns all rows from the struttura_servizi_vari table that match the criteria 'ssv_area_cond_costo = :ssvAreaCondCosto'.
	 */
	public StrutturaServiziVari[] findWhereSsvAreaCondCostoEquals(float ssvAreaCondCosto) throws StrutturaServiziVariDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ssv_area_cond_costo = ? ORDER BY ssv_area_cond_costo", new Object[] {  new Float(ssvAreaCondCosto) } );
	}

	/** 
	 * Returns all rows from the struttura_servizi_vari table that match the criteria 'struttura_str_id = :strutturaStrId'.
	 */
	public StrutturaServiziVari[] findWhereStrutturaStrIdEquals(long strutturaStrId) throws StrutturaServiziVariDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE struttura_str_id = ? ORDER BY struttura_str_id", new Object[] {  new Long(strutturaStrId) } );
	}

	/**
	 * Method 'StrutturaServiziVariDaoImpl'
	 * 
	 */
	public StrutturaServiziVariDaoImpl()
	{
	}

	/**
	 * Method 'StrutturaServiziVariDaoImpl'
	 * 
	 * @param userConn
	 */
	public StrutturaServiziVariDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "struttura_servizi_vari";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected StrutturaServiziVari fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			StrutturaServiziVari dto = new StrutturaServiziVari();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected StrutturaServiziVari[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			StrutturaServiziVari dto = new StrutturaServiziVari();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		StrutturaServiziVari ret[] = new StrutturaServiziVari[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(StrutturaServiziVari dto, ResultSet rs) throws SQLException
	{
		dto.setSsvId( rs.getLong( COLUMN_SSV_ID ) );
		dto.setSsvAnimCeste( rs.getString( COLUMN_SSV_ANIM_CESTE ) );
		dto.setSsvAnimCiotole( rs.getString( COLUMN_SSV_ANIM_CIOTOLE ) );
		dto.setSsvSoloAdulti( rs.getString( COLUMN_SSV_SOLO_ADULTI ) );
		dto.setSsvCamAnalergica( rs.getString( COLUMN_SSV_CAM_ANALERGICA ) );
		dto.setSsvSoloNonFum( rs.getString( COLUMN_SSV_SOLO_NON_FUM ) );
		dto.setSsvAreaFum( rs.getString( COLUMN_SSV_AREA_FUM ) );
		dto.setSsvCamNonFum( rs.getString( COLUMN_SSV_CAM_NON_FUM ) );
		dto.setSsvAscensore( rs.getString( COLUMN_SSV_ASCENSORE ) );
		dto.setSsvCamDisabili( rs.getString( COLUMN_SSV_CAM_DISABILI ) );
		dto.setSsvCamFamigl( rs.getString( COLUMN_SSV_CAM_FAMIGL ) );
		dto.setSsvCamInsonoriz( rs.getString( COLUMN_SSV_CAM_INSONORIZ ) );
		dto.setSsvSuiteNuz( rs.getString( COLUMN_SSV_SUITE_NUZ ) );
		dto.setSsvServiziVip( rs.getString( COLUMN_SSV_SERVIZI_VIP ) );
		dto.setSsvRiscaldamento( rs.getString( COLUMN_SSV_RISCALDAMENTO ) );
		dto.setSsvAreaCond( rs.getString( COLUMN_SSV_AREA_COND ) );
		dto.setSsvAreaCondCosto( rs.getFloat( COLUMN_SSV_AREA_COND_COSTO ) );
		if (rs.wasNull()) {
			dto.setSsvAreaCondCostoNull( true );
		}
		
		dto.setStrutturaStrId( rs.getLong( COLUMN_STRUTTURA_STR_ID ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(StrutturaServiziVari dto)
	{
	}

	/** 
	 * Returns all rows from the struttura_servizi_vari table that match the specified arbitrary SQL statement
	 */
	public StrutturaServiziVari[] findByDynamicSelect(String sql, Object[] sqlParams) throws StrutturaServiziVariDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaServiziVariDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the struttura_servizi_vari table that match the specified arbitrary SQL statement
	 */
	public StrutturaServiziVari[] findByDynamicWhere(String sql, Object[] sqlParams) throws StrutturaServiziVariDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaServiziVariDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
