/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mysecretwish.jdbc;

import com.mysecretwish.dao.*;
import com.mysecretwish.factory.*;
import java.util.Date;
import com.mysecretwish.dto.*;
import com.mysecretwish.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class StrutturaCamereAperChiuDaoImpl extends AbstractDAO implements StrutturaCamereAperChiuDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT sac_id, sac_data_inizio, sac_data_fine, sac_lunedi, sac_martedi, sac_mercoledi, sac_giovedi, sac_venerdi, sac_sabato, sac_domenica, categorie_cat_id, camere_cam_id, sac_stato FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( sac_id, sac_data_inizio, sac_data_fine, sac_lunedi, sac_martedi, sac_mercoledi, sac_giovedi, sac_venerdi, sac_sabato, sac_domenica, categorie_cat_id, camere_cam_id, sac_stato ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET sac_id = ?, sac_data_inizio = ?, sac_data_fine = ?, sac_lunedi = ?, sac_martedi = ?, sac_mercoledi = ?, sac_giovedi = ?, sac_venerdi = ?, sac_sabato = ?, sac_domenica = ?, categorie_cat_id = ?, camere_cam_id = ?, sac_stato = ? WHERE sac_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE sac_id = ?";

	/** 
	 * Index of column sac_id
	 */
	protected static final int COLUMN_SAC_ID = 1;

	/** 
	 * Index of column sac_data_inizio
	 */
	protected static final int COLUMN_SAC_DATA_INIZIO = 2;

	/** 
	 * Index of column sac_data_fine
	 */
	protected static final int COLUMN_SAC_DATA_FINE = 3;

	/** 
	 * Index of column sac_lunedi
	 */
	protected static final int COLUMN_SAC_LUNEDI = 4;

	/** 
	 * Index of column sac_martedi
	 */
	protected static final int COLUMN_SAC_MARTEDI = 5;

	/** 
	 * Index of column sac_mercoledi
	 */
	protected static final int COLUMN_SAC_MERCOLEDI = 6;

	/** 
	 * Index of column sac_giovedi
	 */
	protected static final int COLUMN_SAC_GIOVEDI = 7;

	/** 
	 * Index of column sac_venerdi
	 */
	protected static final int COLUMN_SAC_VENERDI = 8;

	/** 
	 * Index of column sac_sabato
	 */
	protected static final int COLUMN_SAC_SABATO = 9;

	/** 
	 * Index of column sac_domenica
	 */
	protected static final int COLUMN_SAC_DOMENICA = 10;

	/** 
	 * Index of column categorie_cat_id
	 */
	protected static final int COLUMN_CATEGORIE_CAT_ID = 11;

	/** 
	 * Index of column camere_cam_id
	 */
	protected static final int COLUMN_CAMERE_CAM_ID = 12;

	/** 
	 * Index of column sac_stato
	 */
	protected static final int COLUMN_SAC_STATO = 13;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 13;

	/** 
	 * Index of primary-key column sac_id
	 */
	protected static final int PK_COLUMN_SAC_ID = 1;

	/** 
	 * Inserts a new row in the struttura_camere_aper_chiu table.
	 */
	public StrutturaCamereAperChiuPk insert(StrutturaCamereAperChiu dto) throws StrutturaCamereAperChiuDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_strutture')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setSacId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getSacId() );
			stmt.setDate(index++, dto.getSacDataInizio()==null ? null : new java.sql.Date( dto.getSacDataInizio().getTime() ) );
			stmt.setDate(index++, dto.getSacDataFine()==null ? null : new java.sql.Date( dto.getSacDataFine().getTime() ) );
			stmt.setString( index++, dto.getSacLunedi() );
			stmt.setString( index++, dto.getSacMartedi() );
			stmt.setString( index++, dto.getSacMercoledi() );
			stmt.setString( index++, dto.getSacGiovedi() );
			stmt.setString( index++, dto.getSacVenerdi() );
			stmt.setString( index++, dto.getSacSabato() );
			stmt.setString( index++, dto.getSacDomenica() );
			stmt.setLong( index++, dto.getCategorieCatId() );
			stmt.setLong( index++, dto.getCamereCamId() );
			stmt.setInt( index++, dto.getSacStato() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaCamereAperChiuDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the struttura_camere_aper_chiu table.
	 */
	public void update(StrutturaCamereAperChiuPk pk, StrutturaCamereAperChiu dto) throws StrutturaCamereAperChiuDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getSacId() );
			stmt.setDate(index++, dto.getSacDataInizio()==null ? null : new java.sql.Date( dto.getSacDataInizio().getTime() ) );
			stmt.setDate(index++, dto.getSacDataFine()==null ? null : new java.sql.Date( dto.getSacDataFine().getTime() ) );
			stmt.setString( index++, dto.getSacLunedi() );
			stmt.setString( index++, dto.getSacMartedi() );
			stmt.setString( index++, dto.getSacMercoledi() );
			stmt.setString( index++, dto.getSacGiovedi() );
			stmt.setString( index++, dto.getSacVenerdi() );
			stmt.setString( index++, dto.getSacSabato() );
			stmt.setString( index++, dto.getSacDomenica() );
			stmt.setLong( index++, dto.getCategorieCatId() );
			stmt.setLong( index++, dto.getCamereCamId() );
			stmt.setInt( index++, dto.getSacStato() );
			stmt.setLong( 14, pk.getSacId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaCamereAperChiuDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the struttura_camere_aper_chiu table.
	 */
	public void delete(StrutturaCamereAperChiuPk pk) throws StrutturaCamereAperChiuDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getSacId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaCamereAperChiuDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the struttura_camere_aper_chiu table that matches the specified primary-key value.
	 */
	public StrutturaCamereAperChiu findByPrimaryKey(StrutturaCamereAperChiuPk pk) throws StrutturaCamereAperChiuDaoException
	{
		return findByPrimaryKey( pk.getSacId() );
	}

	/** 
	 * Returns all rows from the struttura_camere_aper_chiu table that match the criteria 'sac_id = :sacId'.
	 */
	public StrutturaCamereAperChiu findByPrimaryKey(long sacId) throws StrutturaCamereAperChiuDaoException
	{
		StrutturaCamereAperChiu ret[] = findByDynamicSelect( SQL_SELECT + " WHERE sac_id = ?", new Object[] {  new Long(sacId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the struttura_camere_aper_chiu table that match the criteria ''.
	 */
	public StrutturaCamereAperChiu[] findAll() throws StrutturaCamereAperChiuDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY sac_id", null );
	}

	/** 
	 * Returns all rows from the struttura_camere_aper_chiu table that match the criteria 'camere_cam_id = :camereCamId'.
	 */
	public StrutturaCamereAperChiu[] findByCamere(long camereCamId) throws StrutturaCamereAperChiuDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE camere_cam_id = ?", new Object[] {  new Long(camereCamId) } );
	}

	/** 
	 * Returns all rows from the struttura_camere_aper_chiu table that match the criteria 'sac_id = :sacId'.
	 */
	public StrutturaCamereAperChiu[] findWhereSacIdEquals(long sacId) throws StrutturaCamereAperChiuDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sac_id = ? ORDER BY sac_id", new Object[] {  new Long(sacId) } );
	}

	/** 
	 * Returns all rows from the struttura_camere_aper_chiu table that match the criteria 'sac_data_inizio = :sacDataInizio'.
	 */
	public StrutturaCamereAperChiu[] findWhereSacDataInizioEquals(Date sacDataInizio) throws StrutturaCamereAperChiuDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sac_data_inizio = ? ORDER BY sac_data_inizio", new Object[] { sacDataInizio==null ? null : new java.sql.Date( sacDataInizio.getTime() ) } );
	}

	/** 
	 * Returns all rows from the struttura_camere_aper_chiu table that match the criteria 'sac_data_fine = :sacDataFine'.
	 */
	public StrutturaCamereAperChiu[] findWhereSacDataFineEquals(Date sacDataFine) throws StrutturaCamereAperChiuDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sac_data_fine = ? ORDER BY sac_data_fine", new Object[] { sacDataFine==null ? null : new java.sql.Date( sacDataFine.getTime() ) } );
	}

	/** 
	 * Returns all rows from the struttura_camere_aper_chiu table that match the criteria 'sac_lunedi = :sacLunedi'.
	 */
	public StrutturaCamereAperChiu[] findWhereSacLunediEquals(String sacLunedi) throws StrutturaCamereAperChiuDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sac_lunedi = ? ORDER BY sac_lunedi", new Object[] { sacLunedi } );
	}

	/** 
	 * Returns all rows from the struttura_camere_aper_chiu table that match the criteria 'sac_martedi = :sacMartedi'.
	 */
	public StrutturaCamereAperChiu[] findWhereSacMartediEquals(String sacMartedi) throws StrutturaCamereAperChiuDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sac_martedi = ? ORDER BY sac_martedi", new Object[] { sacMartedi } );
	}

	/** 
	 * Returns all rows from the struttura_camere_aper_chiu table that match the criteria 'sac_mercoledi = :sacMercoledi'.
	 */
	public StrutturaCamereAperChiu[] findWhereSacMercolediEquals(String sacMercoledi) throws StrutturaCamereAperChiuDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sac_mercoledi = ? ORDER BY sac_mercoledi", new Object[] { sacMercoledi } );
	}

	/** 
	 * Returns all rows from the struttura_camere_aper_chiu table that match the criteria 'sac_giovedi = :sacGiovedi'.
	 */
	public StrutturaCamereAperChiu[] findWhereSacGiovediEquals(String sacGiovedi) throws StrutturaCamereAperChiuDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sac_giovedi = ? ORDER BY sac_giovedi", new Object[] { sacGiovedi } );
	}

	/** 
	 * Returns all rows from the struttura_camere_aper_chiu table that match the criteria 'sac_venerdi = :sacVenerdi'.
	 */
	public StrutturaCamereAperChiu[] findWhereSacVenerdiEquals(String sacVenerdi) throws StrutturaCamereAperChiuDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sac_venerdi = ? ORDER BY sac_venerdi", new Object[] { sacVenerdi } );
	}

	/** 
	 * Returns all rows from the struttura_camere_aper_chiu table that match the criteria 'sac_sabato = :sacSabato'.
	 */
	public StrutturaCamereAperChiu[] findWhereSacSabatoEquals(String sacSabato) throws StrutturaCamereAperChiuDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sac_sabato = ? ORDER BY sac_sabato", new Object[] { sacSabato } );
	}

	/** 
	 * Returns all rows from the struttura_camere_aper_chiu table that match the criteria 'sac_domenica = :sacDomenica'.
	 */
	public StrutturaCamereAperChiu[] findWhereSacDomenicaEquals(String sacDomenica) throws StrutturaCamereAperChiuDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sac_domenica = ? ORDER BY sac_domenica", new Object[] { sacDomenica } );
	}

	/** 
	 * Returns all rows from the struttura_camere_aper_chiu table that match the criteria 'categorie_cat_id = :categorieCatId'.
	 */
	public StrutturaCamereAperChiu[] findWhereCategorieCatIdEquals(long categorieCatId) throws StrutturaCamereAperChiuDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE categorie_cat_id = ? ORDER BY categorie_cat_id", new Object[] {  new Long(categorieCatId) } );
	}

	/** 
	 * Returns all rows from the struttura_camere_aper_chiu table that match the criteria 'camere_cam_id = :camereCamId'.
	 */
	public StrutturaCamereAperChiu[] findWhereCamereCamIdEquals(long camereCamId) throws StrutturaCamereAperChiuDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE camere_cam_id = ? ORDER BY camere_cam_id", new Object[] {  new Long(camereCamId) } );
	}

	/** 
	 * Returns all rows from the struttura_camere_aper_chiu table that match the criteria 'sac_stato = :sacStato'.
	 */
	public StrutturaCamereAperChiu[] findWhereSacStatoEquals(int sacStato) throws StrutturaCamereAperChiuDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sac_stato = ? ORDER BY sac_stato", new Object[] {  new Integer(sacStato) } );
	}

	/**
	 * Method 'StrutturaCamereAperChiuDaoImpl'
	 * 
	 */
	public StrutturaCamereAperChiuDaoImpl()
	{
	}

	/**
	 * Method 'StrutturaCamereAperChiuDaoImpl'
	 * 
	 * @param userConn
	 */
	public StrutturaCamereAperChiuDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "struttura_camere_aper_chiu";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected StrutturaCamereAperChiu fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			StrutturaCamereAperChiu dto = new StrutturaCamereAperChiu();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected StrutturaCamereAperChiu[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			StrutturaCamereAperChiu dto = new StrutturaCamereAperChiu();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		StrutturaCamereAperChiu ret[] = new StrutturaCamereAperChiu[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(StrutturaCamereAperChiu dto, ResultSet rs) throws SQLException
	{
		dto.setSacId( rs.getLong( COLUMN_SAC_ID ) );
		dto.setSacDataInizio( rs.getDate(COLUMN_SAC_DATA_INIZIO ) );
		dto.setSacDataFine( rs.getDate(COLUMN_SAC_DATA_FINE ) );
		dto.setSacLunedi( rs.getString( COLUMN_SAC_LUNEDI ) );
		dto.setSacMartedi( rs.getString( COLUMN_SAC_MARTEDI ) );
		dto.setSacMercoledi( rs.getString( COLUMN_SAC_MERCOLEDI ) );
		dto.setSacGiovedi( rs.getString( COLUMN_SAC_GIOVEDI ) );
		dto.setSacVenerdi( rs.getString( COLUMN_SAC_VENERDI ) );
		dto.setSacSabato( rs.getString( COLUMN_SAC_SABATO ) );
		dto.setSacDomenica( rs.getString( COLUMN_SAC_DOMENICA ) );
		dto.setCategorieCatId( rs.getLong( COLUMN_CATEGORIE_CAT_ID ) );
		dto.setCamereCamId( rs.getLong( COLUMN_CAMERE_CAM_ID ) );
		dto.setSacStato( rs.getInt( COLUMN_SAC_STATO ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(StrutturaCamereAperChiu dto)
	{
	}

	/** 
	 * Returns all rows from the struttura_camere_aper_chiu table that match the specified arbitrary SQL statement
	 */
	public StrutturaCamereAperChiu[] findByDynamicSelect(String sql, Object[] sqlParams) throws StrutturaCamereAperChiuDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaCamereAperChiuDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the struttura_camere_aper_chiu table that match the specified arbitrary SQL statement
	 */
	public StrutturaCamereAperChiu[] findByDynamicWhere(String sql, Object[] sqlParams) throws StrutturaCamereAperChiuDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StrutturaCamereAperChiuDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
